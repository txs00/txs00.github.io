<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue3 Composition API</title>
      <link href="/2023/01/03/study/vue/vue3Comonsition%20API/"/>
      <url>/2023/01/03/study/vue/vue3Comonsition%20API/</url>
      
        <content type="html"><![CDATA[<h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><p><code>Composition API</code> 可以说是<code>Vue3</code>的最大特点，那么为什么要推出<code>Composition Api</code>，解决了什么问题？</p><p>通常使用<code>Vue2</code>开发的项目，普遍会存在以下问题：</p><ul><li>代码的可读性随着组件变大而变差</li><li>每一种代码复用的方式，都存在缺点</li><li>TypeScript支持有限</li></ul><p>以上通过使用<code>Composition Api</code>都能迎刃而解</p><h2 id="Options-Api"><a href="#Options-Api" class="headerlink" title="Options Api"></a>Options Api</h2><p><code>Options API</code>，即大家常说的选项API，即以<code>vue</code>为后缀的文件，通过定义<code>methods</code>，<code>computed</code>，<code>watch</code>，<code>data</code>等属性与方法，共同处理页面逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // data() 返回的属性将会成为响应式的状态</span><br><span class="line">  // 并且暴露在 `this` 上</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // methods 是一些用来更改状态与触发更新的函数</span><br><span class="line">  // 它们可以在模板中作为事件监听器绑定</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 生命周期钩子会在组件生命周期的各个不同阶段被调用</span><br><span class="line">  // 例如这个函数就会在组件挂载完成后被调用</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(`The initial count is $&#123;this.count&#125;.`)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>可以看到<code>Options</code>代码编写方式，如果是组件状态，则写在<code>data</code>属性上，如果是方法，则写在<code>methods</code>属性上…</p><p>用组件的选项 (<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>) 组织逻辑在大多数情况下都有效</p><p>然而，当组件变得复杂，导致对应属性的列表也会增长，这可能会导致组件难以阅读和理解</p><h2 id="Composition-Api"><a href="#Composition-Api" class="headerlink" title="Composition Api"></a>Composition Api</h2><p>在 Vue3 Composition API 中，组件根据逻辑功能来组织的，一个功能所定义的所有 API 会放在一起（更加的高内聚，低耦合）</p><p>即使项目很大，功能很多，我们都能快速的定位到这个功能所用到的所有 API</p><p>面举个简单例子，将处理<code>count</code>属性相关的代码放在同一个函数了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleConut</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span> = count.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count,</span><br><span class="line">        double,</span><br><span class="line">        handleConut,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件上中使用<code>count</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式状态</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来修改状态、触发更新的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count.<span class="property">value</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生命周期钩子</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The initial count is <span class="subst">$&#123;count.value&#125;</span>.`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>在逻辑组织和逻辑复用方面，<code>Composition API</code>是优于<code>Options API</code></li><li>因为<code>Composition API</code>几乎是函数，会有更好的类型推断。</li><li><code>Composition API</code>对 <code>tree-shaking</code> 友好，代码也更容易压缩</li><li><code>Composition API</code>中见不到<code>this</code>的使用，减少了<code>this</code>指向不明的情况</li><li>如果是小型组件，可以继续使用<code>Options API</code>，也是十分友好的</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件模型</title>
      <link href="/2022/11/21/study/js/js%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/11/21/study/js/js%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="事件与事件流"><a href="#事件与事件流" class="headerlink" title="事件与事件流"></a>事件与事件流</h2><p><code>javascript</code>中的事件，可以理解就是在<code>HTML</code>文档或者浏览器中发生的一种交互操作，使得网页具备互动性， 常见的有加载事件、鼠标事件、自定义事件等</p><p>由于<code>DOM</code>是一个树结构，如果在父子节点绑定事件时候，当触发子节点的时候，就存在一个顺序问题，这就涉及到了事件流的概念</p><p>事件流都会经历三个阶段：</p><ul><li>事件捕获阶段(capture phase)</li><li>处于目标阶段(target phase)</li><li>事件冒泡阶段(bubbling phase)</li></ul><p>事件冒泡是一种从下往上的传播方式，由最具体的元素（触发节点）然后逐渐向上传播到最不具体的那个节点，也就是<code>DOM</code>中最高层的父节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Event Bubbling<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，我们给<code>button</code>和它的父元素，加入点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;clickMe&#x27;</span>);</span><br><span class="line"></span><br><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1.Button&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2.body&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3.document&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4.window&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>点击按钮，输出如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>button</span><br><span class="line"><span class="number">2.</span>body</span><br><span class="line"><span class="number">3.</span><span class="variable language_">document</span></span><br><span class="line"><span class="number">4.</span><span class="variable language_">window</span></span><br></pre></td></tr></table></figure><p>点击事件首先在<code>button</code>元素上发生，然后逐级向上传播</p><p>事件捕获与事件冒泡相反，事件最开始由不太具体的节点最早接受事件, 而最具体的节点（触发节点）最后接受事件</p><h2 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h2><p>事件模型可以分为三种：</p><ul><li>原始事件模型（DOM0级）</li><li>标准事件模型（DOM2级）</li><li>IE事件模型（基本不用）</li></ul><h3 id="原始事件模型"><a href="#原始事件模型" class="headerlink" title="原始事件模型"></a>原始事件模型</h3><p>事件绑定监听函数比较简单, 有两种方式：</p><ul><li>HTML代码中直接绑定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> onclick=<span class="string">&quot;fun()&quot;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>通过<code>JS</code>代码绑定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = fun;</span><br></pre></td></tr></table></figure><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>绑定速度快</li></ul><p><code>DOM0</code>级事件具有很好的跨浏览器优势，会以最快的速度绑定，但由于绑定速度太快，可能页面还未完全加载出来，以至于事件可能无法正常运行</p><ul><li>只支持冒泡，不支持捕获</li><li>同一个类型的事件只能绑定一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> onclick=<span class="string">&quot;fun1()&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = fun2;</span><br></pre></td></tr></table></figure><h3 id="标准事件模型"><a href="#标准事件模型" class="headerlink" title="标准事件模型"></a>标准事件模型</h3><p>在该事件模型中，一次事件共有三个过程:</p><ul><li>事件捕获阶段：事件从<code>document</code>一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li><li>事件处理阶段：事件到达目标元素, 触发目标元素的监听函数</li><li>事件冒泡阶段：事件从目标元素冒泡到<code>document</code>, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li></ul><p>事件绑定监听函数的方式如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(eventType, handler, useCapture)</span><br></pre></td></tr></table></figure><p>事件移除监听函数的方式如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removeEventListener(eventType, handler, useCapture)</span><br></pre></td></tr></table></figure><p>参数如下：</p><ul><li><code>eventType</code>指定事件类型(不要加on)</li><li><code>handler</code>是事件处理函数</li><li><code>useCapture</code>是一个<code>boolean</code>用于指定是否在捕获阶段进行处理，一般设置为<code>false</code>与IE浏览器保持一致</li></ul><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(‘click’, showMessage, <span class="literal">false</span>);</span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(‘click’, showMessage, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h4><ul><li>可以在一个<code>DOM</code>元素上绑定多个事件处理器，各自并不会冲突</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(‘click’, showMessage1, <span class="literal">false</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(‘click’, showMessage2, <span class="literal">false</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(‘click’, showMessage3, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ul><li>执行时机</li></ul><p>当第三个参数(<code>useCapture</code>)设置为<code>true</code>就在捕获过程中执行，反之在冒泡过程中执行处理函数</p><p>下面举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;div&#x27;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&#x27;p&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;span&#x27;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;/p &gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>设置点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onClickFn</span> (event) &#123;</span><br><span class="line">    <span class="keyword">var</span> tagName = event.<span class="property">currentTarget</span>.<span class="property">tagName</span>;</span><br><span class="line">    <span class="keyword">var</span> phase = event.<span class="property">eventPhase</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tagName, phase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">false</span>);</span><br><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>上述使用了<code>eventPhase</code>，返回一个代表当前执行阶段的整数值。1为捕获阶段、2为事件对象触发阶段、3为冒泡阶段</p><p>点击<code>Click Me!</code>，输出如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P <span class="number">3</span></span><br><span class="line"><span class="variable constant_">DIV</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>p</code>和<code>div</code>都是在冒泡阶段响应了事件，由于冒泡的特性，裹在里层的<code>p</code>率先做出响应</p><p>如果把第三个参数都改为<code>true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">true</span>);</span><br><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">DIV</span> <span class="number">1</span></span><br><span class="line">P <span class="number">1</span></span><br></pre></td></tr></table></figure><p>两者都是在捕获阶段响应事件，所以<code>div</code>比<code>p</code>标签先做出响应</p><h3 id="IE事件模型"><a href="#IE事件模型" class="headerlink" title="IE事件模型"></a>IE事件模型</h3><p>IE事件模型共有两个过程:</p><ul><li>事件处理阶段：事件到达目标元素, 触发目标元素的监听函数。</li><li>事件冒泡阶段：事件从目标元素冒泡到<code>document</code>, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li></ul><p>事件绑定监听函数的方式如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attachEvent(eventType, handler)</span><br></pre></td></tr></table></figure><p>事件移除监听函数的方式如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">detachEvent(eventType, handler)</span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">attachEvent</span>(‘onclick’, showMessage);</span><br><span class="line">btn.<span class="title function_">detachEvent</span>(‘onclick’, showMessage);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux配置持久化</title>
      <link href="/2022/07/13/study/react/day16/"/>
      <url>/2022/07/13/study/react/day16/</url>
      
        <content type="html"><![CDATA[<h3 id="redux配置持久化"><a href="#redux配置持久化" class="headerlink" title="redux配置持久化"></a>redux配置持久化</h3><p>参考网址：<a href="https://blog.csdn.net/hbmern/article/details/124184309">https://blog.csdn.net/hbmern/article/details/124184309</a><br>1.安装：npm i  redux-persist –save<br>2.配置store.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// applyMiddleware为中间件，支持异步action</span></span><br><span class="line"><span class="comment">// combineReducers方法用于合并多个reducer</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware,combineReducers&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;persistStore, persistReducer&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-persist&#x27;</span></span><br><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">&#x27;redux-persist/lib/storage&#x27;</span></span><br><span class="line"><span class="keyword">import</span> countReduce  <span class="keyword">from</span> <span class="string">&#x27;../reduces/count_reduce&#x27;</span></span><br><span class="line"><span class="keyword">import</span> todoReduce <span class="keyword">from</span> <span class="string">&#x27;../reduces/todolist_reduce&#x27;</span></span><br><span class="line"><span class="comment">// 异步action插件，配合applyMiddleware使用</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="keyword">const</span> allReducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>:countReduce,</span><br><span class="line">    <span class="attr">todolist</span>:todoReduce</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//在localStorge中生成key为root的值</span></span><br><span class="line"><span class="keyword">const</span> persistConfig = &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;roots&#x27;</span>,</span><br><span class="line">    storage,</span><br><span class="line">    <span class="attr">blacklist</span>:[<span class="string">&#x27;todolist&#x27;</span>]  <span class="comment">//设置某个reducer数据不持久化，</span></span><br><span class="line">                      <span class="comment">//注意单词的拼写！我就因为写错单词，找了半天,55555~</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myPersistReducer = <span class="title function_">persistReducer</span>(persistConfig, allReducer)</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(myPersistReducer,<span class="title function_">applyMiddleware</span>(thunk))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> persistor = <span class="title function_">persistStore</span>(store)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  store,</span><br><span class="line">  persistor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-redux</title>
      <link href="/2022/07/12/study/react/day15/"/>
      <url>/2022/07/12/study/react/day15/</url>
      
        <content type="html"><![CDATA[<h3 id="react-redux的使用"><a href="#react-redux的使用" class="headerlink" title="react-redux的使用"></a>react-redux的使用</h3><ol><li>安装react-redux，命令cnpm i react-redux -D</li><li>使用react-redux提供的Provider进行根组件包裹</li><li>将store作为属性传递给Provider</li><li>containers文件夹中,创建容器组件</li><li>import { connect } from ‘react-redux’,引入容器组件和redux连接方法</li><li>export default connect(mapStateToProps,mapDisptchToProps)(Count)，使用connect方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">connect</span>()()   <span class="comment">// 第一个括号是方法，第二个括号为连接的UI组件</span></span><br></pre></td></tr></table></figure><ol start="7"><li>创建接受的方法，分别接受state数据和 派发动作</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数成为我们的connect第一个参数，用途为接受redux中的数据,作用将redux中的数据转换成props</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span>  = (<span class="params">state</span>)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count123</span>:state.<span class="property">count</span>,</span><br><span class="line">        <span class="attr">todo</span>:state.<span class="property">todolist</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将redux中的派发动作转换到props中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDisptchToProps</span> =(<span class="params">dispatch</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">add</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">add_aciton</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>容器组件通过props进行获取使用</li></ol><h3 id="immutable-js的使用"><a href="#immutable-js的使用" class="headerlink" title="immutable.js的使用"></a>immutable.js的使用</h3><p>应用解决react页面不刷新的拷贝复杂数据问题</p><p>学习博客：<a href="https://blog.csdn.net/it_varlue/article/details/120440094">https://blog.csdn.net/it_varlue/article/details/120440094</a><br>学习博客：<a href="https://blog.csdn.net/yrqlyq/article/details/119318805">https://blog.csdn.net/yrqlyq/article/details/119318805</a></p><p>1.安装 npm i -S immutable<br>2.引入使用 import { Map, List, fromJS, is } from ‘immutable’<br>3.Map管理对象类型数据，List管理数组类型数据，fromJs自动可以转换相应的数据类型Map，List。is，可以做immutable数据类型对比<br>4.List([123])，Map({name:”张三”})转换回普通数组和对象，使用toJS方法</p>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>todolist</title>
      <link href="/2022/06/29/test/todolist/"/>
      <url>/2022/06/29/test/todolist/</url>
      
        <content type="html"><![CDATA[<h1 id="react组件todolist案例"><a href="#react组件todolist案例" class="headerlink" title="react组件todolist案例"></a>react组件todolist案例</h1><h3 id="Input组件："><a href="#Input组件：" class="headerlink" title="Input组件："></a>Input组件：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./input.sass&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;../api/request&#x27;</span></span><br><span class="line"><span class="keyword">import</span> text <span class="keyword">from</span> <span class="string">&#x27;../text.svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">doname</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getval</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> val = e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">addTodo</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">doname</span>: val &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">aa</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    addTodo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> doname = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">doname</span></span><br><span class="line">        <span class="keyword">let</span> e = <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">cleaript</span>;</span><br><span class="line">        <span class="keyword">if</span> (doname) &#123;</span><br><span class="line">            axios.<span class="title function_">post</span>(<span class="string">&#x27;addtodo&#x27;</span>, &#123; doname &#125;)</span><br><span class="line">            pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;refresh&#x27;</span>)</span><br><span class="line">            e.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">doname</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;todo_input&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&#x27;box_header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;text&#125;</span> <span class="attr">alt</span>=<span class="string">&#x27;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>To-Do List<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;box_both&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>~ Today I need to ~<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">action</span>=<span class="string">&#x27;#&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">ref</span>=<span class="string">&#x27;cleaript&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">placeholder</span>=<span class="string">&#x27;Add new todo...&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">onKeyUp</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123; this.getval(e) &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                        &gt;<span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addTodo&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Input-scss"><a href="#Input-scss" class="headerlink" title="Input.scss"></a>Input.scss</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todo_input</span></span><br><span class="line">  <span class="selector-class">.box_header</span></span><br><span class="line">    <span class="attribute">display</span>: flex</span><br><span class="line">    justify-content: center</span><br><span class="line">    align-items: center</span><br><span class="line">    .box_header&gt;div:first-child</span><br><span class="line">      margin-right: <span class="number">10px</span></span><br><span class="line">    img</span><br><span class="line">      width: <span class="number">80px</span></span><br><span class="line">      height: <span class="number">88px</span></span><br><span class="line">  .box_both</span><br><span class="line">    margin: <span class="number">25px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    form</span><br><span class="line">      height: <span class="number">30px</span></span><br><span class="line">      div</span><br><span class="line">        vertical-align: top</span><br><span class="line">      display: flex</span><br><span class="line">      justify-content: center</span><br><span class="line">      input</span><br><span class="line">        width: <span class="number">233px</span></span><br><span class="line">        border: none</span><br><span class="line">        border-bottom: <span class="number">3px</span> dashed <span class="number">#fe7345</span></span><br><span class="line">        padding: <span class="number">5px</span> <span class="number">0</span> <span class="number">3px</span></span><br><span class="line">        font-size: <span class="number">13px</span></span><br><span class="line">        margin-right: <span class="number">15px</span></span><br><span class="line">        background: transparent</span><br><span class="line">      button:active</span><br><span class="line">        transform: rotate(<span class="number">0deg</span>)</span><br><span class="line">        height: <span class="number">25px</span></span><br><span class="line">        span</span><br><span class="line">          left: -<span class="number">2px</span></span><br><span class="line">      button</span><br><span class="line">        width: <span class="number">63px</span></span><br><span class="line">        height: <span class="number">30px</span></span><br><span class="line">        background-color: <span class="number">#fe7345</span></span><br><span class="line">        position: relative</span><br><span class="line">        transform: rotate(<span class="number">10deg</span>)</span><br><span class="line">        border-radius: <span class="number">6px</span></span><br><span class="line">        span</span><br><span class="line">          position: absolute</span><br><span class="line">          top: -<span class="number">5.7px</span></span><br><span class="line">          left: <span class="number">0.1px</span></span><br><span class="line">          font-size: <span class="number">13.5px</span></span><br><span class="line">          background-color: <span class="number">#fff</span></span><br><span class="line">          border: <span class="number">1px</span> solid <span class="number">#494a4b</span></span><br><span class="line">          display: inline-block</span><br><span class="line">          width: <span class="number">45px</span></span><br><span class="line">          padding: <span class="number">7px</span> <span class="number">8px</span></span><br><span class="line">          border-radius: <span class="number">6px</span></span><br><span class="line">    h3</span><br><span class="line">      margin-bottom: <span class="number">18px</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="list组件："><a href="#list组件：" class="headerlink" title="list组件："></a>list组件：</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./lists.sass&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;../api/request&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">data</span>: [],</span><br><span class="line">        <span class="attr">num</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取后端数据</span></span><br><span class="line">    getlist = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> (axios.<span class="title function_">get</span>(<span class="string">&#x27;getlist&#x27;</span>))</span><br><span class="line">        <span class="keyword">let</span> num = data.<span class="property">length</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; data, num &#125;)</span><br><span class="line">        pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;btmblock&#x27;</span>, &#123; num, data &#125;)</span><br><span class="line">        pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;clearlist&#x27;</span>, <span class="variable language_">this</span>.<span class="property">clearlist</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    uplist = <span class="keyword">async</span> (_, key) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&#x27;Active&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> (axios.<span class="title function_">get</span>(<span class="string">&#x27;todotatus/0&#x27;</span>))</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; data &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key === <span class="string">&#x27;Completed&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> (axios.<span class="title function_">get</span>(<span class="string">&#x27;todotatus/1&#x27;</span>))</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; data &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getlist</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clearlist = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; data &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">let</span> arr = data.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="keyword">return</span> item.<span class="property">done</span> &#125;)</span><br><span class="line">        arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title class_">Deltodos</span>(item.<span class="property">id</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 页面加载完成赋予state数据</span></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getlist</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;refresh&#x27;</span>, <span class="variable language_">this</span>.<span class="property">getlist</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pid2</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;uplist&#x27;</span>, <span class="variable language_">this</span>.<span class="property">uplist</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除事件</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title class_">Deltodos</span>(id) &#123;</span><br><span class="line">        <span class="keyword">await</span> axios.<span class="title function_">delete</span>(<span class="string">&#x27;deltodo/&#x27;</span> + id)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getlist</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 点击单选框触发事件</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">ischecked</span>(<span class="params">id, item</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> done = !item.<span class="property">done</span></span><br><span class="line">        <span class="keyword">await</span> axios.<span class="title function_">patch</span>(<span class="string">&#x27;updatetodos/&#x27;</span> + id, &#123; done &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">data</span> &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getlist</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;todo_lists&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;</span></span><br><span class="line"><span class="language-xml">                        this.state.data.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                            return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&#123;item.done</span> ? &#x27;<span class="attr">liact</span>&#x27; <span class="attr">:</span> &#x27;&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">value</span>=<span class="string">&#123;this.state.data</span> ? <span class="attr">item.id</span> <span class="attr">:</span> &#x27; &#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">checked</span>=<span class="string">&#123;item.done&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> <span class="attr">item.done</span> ? &#x27;<span class="attr">none</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">block</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; this.ischecked(item.id, item) &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                                    /&gt;</span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> <span class="attr">item.done</span> ? &#x27;<span class="attr">block</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">none</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; this.ischecked(item.id, item) &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                                    &gt;√<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;&quot;</span>&gt;</span>&#123;item.doname&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; this.Deltodos(item.id) &#125;&#125;&gt;x<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#125;)</span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="list-scss"><a href="#list-scss" class="headerlink" title="list.scss"></a>list.scss</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todo_lists</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span></span><br><span class="line">    ul</span><br><span class="line">        list-style: none</span><br><span class="line"></span><br><span class="line">        li</span><br><span class="line">            line-height: <span class="number">33px</span></span><br><span class="line">            height: <span class="number">33px</span></span><br><span class="line">            padding: <span class="number">0</span> <span class="number">8px</span></span><br><span class="line">            border-radius: <span class="number">5px</span></span><br><span class="line">            margin: <span class="number">0</span> auto</span><br><span class="line">            width: <span class="number">95%</span></span><br><span class="line">            text-align: left</span><br><span class="line">            font-weight: <span class="number">500</span></span><br><span class="line">            display: flex</span><br><span class="line">            justify-content: space-between</span><br><span class="line">            font-size: <span class="number">14px</span></span><br><span class="line">            div:first-child</span><br><span class="line">                display: flex</span><br><span class="line">                align-items: center</span><br><span class="line">                span</span><br><span class="line">                    margin-right: <span class="number">15px</span></span><br><span class="line">                    font-size: <span class="number">15px</span></span><br><span class="line"></span><br><span class="line">            input[type=<span class="string">&#x27;checkbox&#x27;</span>]</span><br><span class="line">                width: <span class="number">15px</span></span><br><span class="line">                height: <span class="number">15px</span></span><br><span class="line">                margin-right: <span class="number">10px</span></span><br><span class="line">                vertical-align: middle</span><br><span class="line">                border: <span class="number">1px</span> solid black</span><br><span class="line">            label</span><br><span class="line">                font-weight: <span class="number">700</span></span><br><span class="line">                vertical-align: middle</span><br><span class="line">            span</span><br><span class="line">                font-size: <span class="number">18px</span></span><br><span class="line">                vertical-align: middle</span><br><span class="line">            span:hover</span><br><span class="line">                cursor: pointer</span><br><span class="line">        li.liact</span><br><span class="line">            background-color: <span class="number">#fe7345</span></span><br><span class="line">            color: <span class="number">#fff</span></span><br><span class="line">            animation: move <span class="number">1s</span> </span><br><span class="line">            div:first-child</span><br><span class="line">                label</span><br><span class="line">                    text-decoration: line-through</span><br><span class="line">        li:active</span><br><span class="line">        @keyframes move</span><br><span class="line">            <span class="number">0%</span></span><br><span class="line">                transform: rotate(<span class="number">0deg</span>)</span><br><span class="line">            <span class="number">50%</span></span><br><span class="line">                transform: rotateY(<span class="number">180deg</span>)</span><br><span class="line">            <span class="number">100%</span></span><br><span class="line">                transform: rotate()<span class="number">360deg</span></span><br></pre></td></tr></table></figure><h3 id="Btn组件："><a href="#Btn组件：" class="headerlink" title="Btn组件："></a>Btn组件：</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">import &#x27;./fonts/iconfont<span class="selector-class">.css</span>&#x27;</span><br><span class="line">import &#x27;./btn<span class="selector-class">.sass</span>&#x27;</span><br><span class="line">export default class btn extends Component &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        data: [],</span><br><span class="line">        num: <span class="number">0</span>,</span><br><span class="line">        isblock: false,</span><br><span class="line">        btnblock: false,</span><br><span class="line">        btnlist: [<span class="string">&#x27;All&#x27;</span>, <span class="string">&#x27;Active&#x27;</span>, <span class="string">&#x27;Completed&#x27;</span>],</span><br><span class="line">        btnact: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    getdata = (_, value) =&gt; &#123;</span><br><span class="line">        let &#123; num, data &#125; = value</span><br><span class="line">        let bol = data<span class="selector-class">.filter</span>(item =&gt; &#123; return item.done &#125;)<span class="selector-class">.length</span></span><br><span class="line">        let btnblock = null</span><br><span class="line">        if (bol &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            btnblock = true</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            btnblock = false</span><br><span class="line">        &#125;</span><br><span class="line">        this<span class="selector-class">.setState</span>(&#123; num, data, btnblock &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">componentDidMount</span>() &#123;</span><br><span class="line">        this<span class="selector-class">.pid</span> = pubsub<span class="selector-class">.subscribe</span>(&#x27;btmblock&#x27;, this.getdata)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">btnactive</span>(key, index) &#123;</span><br><span class="line">        this<span class="selector-class">.setState</span>(&#123; btnact: index &#125;)</span><br><span class="line">        pubsub<span class="selector-class">.publish</span>(&#x27;uplist&#x27;, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">clearlist</span>() &#123;</span><br><span class="line">        pubsub<span class="selector-class">.publish</span>(&#x27;clearlist&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">render</span>() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&#x27;todo_btn&#x27;&gt;</span><br><span class="line">                &lt;div style=&#123;&#123; display: this.state.num &gt;= <span class="number">1</span> ? &#x27;none&#x27; : &#x27;block&#x27; &#125;&#125;&gt;</span><br><span class="line">                    &lt;i className=&#x27;iconfont&#x27;&gt;&lt;/i&gt;</span><br><span class="line">                    &lt;span&gt;</span><br><span class="line">                        Congrat, you have no more tasks to do</span><br><span class="line">                    &lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div className=&#x27;btmnone&#x27; style=&#123;&#123; display: this.state.num &gt;= <span class="number">1</span> ? &#x27;block&#x27; : &#x27;none&#x27; &#125;&#125;&gt;</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                        &lt;span&gt;</span><br><span class="line">                            &lt;i&gt;&#123;this.state.data.filter(item =&gt; &#123; return !item.done &#125;)<span class="selector-class">.length</span>&#125;&lt;/<span class="selector-tag">i</span>&gt;</span><br><span class="line">                            item <span class="attribute">left</span></span><br><span class="line">                        &lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">                    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                    &lt;<span class="selector-tag">div</span> style=&#123;&#123; <span class="attribute">display</span>: this.state.btnblock ? <span class="string">&#x27;block&#x27;</span> : <span class="string">&#x27;none&#x27;</span> &#125;&#125;&gt;</span><br><span class="line">                        &#123;this<span class="selector-class">.state</span><span class="selector-class">.btnlist</span><span class="selector-class">.map</span>((item, index) =&gt; &#123;</span><br><span class="line">                            return &lt;<span class="selector-tag">button</span></span><br><span class="line">                                key=&#123;index&#125;</span><br><span class="line">                                onClick=&#123;() =&gt; &#123; this<span class="selector-class">.btnactive</span>(item, index) &#125;&#125;</span><br><span class="line">                                className=&#123;this<span class="selector-class">.state</span><span class="selector-class">.btnact</span> === index ? &#x27;btnact&#x27; : <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">                            &gt;&#123;item&#125;&lt;/<span class="selector-tag">button</span>&gt;</span><br><span class="line">                        &#125;)&#125;</span><br><span class="line">                    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                    &lt;<span class="selector-tag">div</span> style=&#123;&#123; <span class="attribute">display</span>: this.state.btnblock ? <span class="string">&#x27;block&#x27;</span> : <span class="string">&#x27;none&#x27;</span> &#125;&#125;&gt;</span><br><span class="line">                        &lt;<span class="selector-tag">button</span> onClick=&#123;this<span class="selector-class">.clearlist</span>&#125;&gt;</span><br><span class="line">                            <span class="attribute">Clear</span> completed</span><br><span class="line">                        &lt;/<span class="selector-tag">button</span>&gt;</span><br><span class="line">                    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                    &lt;<span class="selector-tag">div</span> style=&#123;&#123; <span class="attribute">display</span>: this.state.btnblock ? <span class="string">&#x27;none&#x27;</span> : <span class="string">&#x27;block&#x27;</span> &#125;&#125;&gt;</span><br><span class="line">                        &lt;<span class="selector-tag">button</span>&gt;</span><br><span class="line">                            <span class="attribute">All</span></span><br><span class="line">                        &lt;/<span class="selector-tag">button</span>&gt;</span><br><span class="line">                    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;/<span class="selector-tag">div</span> &gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Btn-scss"><a href="#Btn-scss" class="headerlink" title="Btn.scss"></a>Btn.scss</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todo_btn</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span></span><br><span class="line">    i</span><br><span class="line">        color: <span class="number">#aaa</span></span><br><span class="line">        margin-right: <span class="number">10px</span></span><br><span class="line">    span</span><br><span class="line">        color: <span class="number">#B7B8B8</span></span><br><span class="line">        font-size: <span class="number">14px</span></span><br><span class="line">    .btmnone</span><br><span class="line">        box-sizing: border-box</span><br><span class="line">        div:first-child</span><br><span class="line">            float: left</span><br><span class="line">            i</span><br><span class="line">                font-style: normal</span><br><span class="line">        div:nth-child(<span class="number">2</span>)</span><br><span class="line">            float: left</span><br><span class="line">            margin-left: <span class="number">20px</span></span><br><span class="line">            button</span><br><span class="line">                padding: <span class="number">4px</span></span><br><span class="line">                border: <span class="number">0</span></span><br><span class="line">                margin: <span class="number">0</span> <span class="number">2px</span></span><br><span class="line">                border-radius: <span class="number">5px</span></span><br><span class="line">            button:hover</span><br><span class="line">                background-color: <span class="number">#fe7345</span></span><br><span class="line">                color: <span class="number">#fff</span></span><br><span class="line">                cursor: pointer</span><br><span class="line">            .btnact</span><br><span class="line">                background-color: <span class="number">#fe7345</span></span><br><span class="line">                color: <span class="number">#fff</span></span><br><span class="line">                cursor: pointer</span><br><span class="line">        div:nth-child(<span class="number">3</span>)</span><br><span class="line">            float: right</span><br><span class="line">            button</span><br><span class="line">                border: <span class="number">0</span></span><br><span class="line">                padding: <span class="number">5px</span> <span class="number">10px</span></span><br><span class="line">            button:hover</span><br><span class="line">                background-color: <span class="number">#fe7345</span></span><br><span class="line">                color: <span class="number">#fff</span></span><br><span class="line">                cursor: pointer</span><br><span class="line"></span><br><span class="line">        div:last-child</span><br><span class="line">            float: right</span><br><span class="line">            button</span><br><span class="line">                color: <span class="number">#fff</span></span><br><span class="line">                background-color: <span class="number">#fe7345</span></span><br><span class="line">                border: <span class="number">1px</span> solid <span class="number">#fe7345</span></span><br><span class="line">                padding: <span class="number">5px</span> <span class="number">10px</span></span><br><span class="line">                border-radius: <span class="number">6px</span> <span class="number">5px</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Todolist父组件："><a href="#Todolist父组件：" class="headerlink" title="Todolist父组件："></a>Todolist父组件：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Todolist.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&#x27;./Input/Input&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Btn</span> <span class="keyword">from</span> <span class="string">&#x27;./Btn/Btn&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Lists</span> <span class="keyword">from</span> <span class="string">&#x27;./Lists/Lists&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Todolist</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todolist&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Input</span>&gt;</span><span class="tag">&lt;/<span class="name">Input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Lists</span>&gt;</span><span class="tag">&lt;/<span class="name">Lists</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Btn</span>&gt;</span><span class="tag">&lt;/<span class="name">Btn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Todolist-scss"><a href="#Todolist-scss" class="headerlink" title="Todolist.scss"></a>Todolist.scss</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;STXinwei&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#ffafbd</span>, <span class="number">#ffc3a0</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todolist</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">40px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">440px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box_header</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">3deg</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">98px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">55em</span> .<span class="number">8em</span> .<span class="number">15em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20%</span> <span class="number">5%</span> <span class="number">20%</span> <span class="number">5%</span>/<span class="number">5%</span> <span class="number">20%</span> <span class="number">25%</span> <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fe7345</span>;</span><br><span class="line">  user-select: none;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Api接口返回数据："><a href="#Api接口返回数据：" class="headerlink" title="Api接口返回数据："></a>Api接口返回数据：</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Api接口：http<span class="punctuation">:</span><span class="comment">//127.0.0.1:8090/todos/getlist  #本地接口，数据需要自己模拟</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;doname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;呵呵哒&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;done&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Todolist效果图："><a href="#Todolist效果图：" class="headerlink" title="Todolist效果图："></a>Todolist效果图：</h3><p><img src="/../../images/todolist.png" alt="todolist"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D-picture</title>
      <link href="/2022/06/26/test/3D-picture/"/>
      <url>/2022/06/26/test/3D-picture/</url>
      
        <content type="html"><![CDATA[<h3 id="html内容："><a href="#html内容：" class="headerlink" title="html内容："></a>html内容：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zf1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zf2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css内容"><a href="#css内容" class="headerlink" title="css内容:"></a>css内容:</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 图片自己修改即可</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            <span class="attribute">background-size</span>: cover;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">list-style</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf1</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">48.5%</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">48.5%</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">            <span class="attribute">animation</span>: move <span class="number">10s</span> linear infinite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">            <span class="number">0%</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="number">50%</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="number">100%</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf1</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf1</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/01.png&#x27;</span>) center center no-repeat;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf1</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/02.png&#x27;</span>) center center no-repeat;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">50px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf1</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/03.png&#x27;</span>) center center no-repeat;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf1</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/04.png&#x27;</span>) center center no-repeat;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf1</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/05.png&#x27;</span>) center center no-repeat;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf1</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/06.png&#x27;</span>) center center no-repeat;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">42%</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">45%</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">            <span class="attribute">animation</span>: move <span class="number">10s</span> linear infinite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">0.2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/07.png&#x27;</span>) center center no-repeat;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/08.png&#x27;</span>) center center no-repeat;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">100px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/09.png&#x27;</span>) center center no-repeat;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/10.png&#x27;</span>) center center no-repeat;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/11.png&#x27;</span>) center center no-repeat;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./imges/12.png&#x27;</span>) center center no-repeat;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 划过效果 */</span></span><br><span class="line">        <span class="selector-class">.zf2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">27%</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">40%</span>;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">            <span class="attribute">animation</span>: move2 <span class="number">5S</span> linear infinite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">@keyframes</span> move2 &#123;</span><br><span class="line">            <span class="number">0%</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="number">50%</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>) <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="number">100%</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">            <span class="attribute">background-size</span>: cover;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">200px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">200px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">200px</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">200px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">200px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.zf2</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">200px</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图:"></a>效果图:</h3><p><img src="/../../images/3D-picture.png" alt="3D-picture"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钟表、当前时间</title>
      <link href="/2022/06/25/test/watch/"/>
      <url>/2022/06/25/test/watch/</url>
      
        <content type="html"><![CDATA[<h1 id="react案例：钟表"><a href="#react案例：钟表" class="headerlink" title="react案例：钟表"></a>react案例：钟表</h1><h3 id="css样式："><a href="#css样式：" class="headerlink" title="css样式："></a>css样式：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        <span class="selector-class">.demo</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./img/watch.webp&#x27;</span>) center no-repeat;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">            <span class="attribute">background-size</span>: cover;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.second</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">3px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: brown;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">15%</span>;</span><br><span class="line">            <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.min</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">3px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: aqua;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">21%</span>;</span><br><span class="line">            <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.hour</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">3px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: black;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">31%</span>;</span><br><span class="line">            <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.datetime</span>&#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">top</span>: -<span class="number">10%</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">40%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">second</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">min</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">hour</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">timedate</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> s = <span class="number">6</span> * <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getSeconds</span>()</span><br><span class="line">                <span class="keyword">let</span> m = <span class="number">6</span> * <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getMinutes</span>() + s / <span class="number">60</span> * <span class="number">6</span> / <span class="number">6</span></span><br><span class="line">                <span class="keyword">let</span> h = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>() * <span class="number">30</span> + m / <span class="number">60</span> * <span class="number">5</span></span><br><span class="line">                <span class="keyword">let</span> timedate = <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getHours()&#125;</span>:<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getMinutes()&#125;</span>:<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getSeconds()&#125;</span>`</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                    <span class="attr">second</span>: s,</span><br><span class="line">                    <span class="attr">min</span>: m,</span><br><span class="line">                    <span class="attr">hour</span>: h,</span><br><span class="line">                    timedate</span><br><span class="line">                &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">className</span>=<span class="string">&#x27;datetime&#x27;</span>&gt;</span>时间：&#123;this.state.timedate&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;second&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">transform:</span> `<span class="attr">rotate</span>($&#123;<span class="attr">this.state.second</span>&#125;<span class="attr">deg</span>)`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;min&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">transform:</span> `<span class="attr">rotate</span>($&#123;<span class="attr">this.state.min</span>&#125;<span class="attr">deg</span>)`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;hour&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">transform:</span> `<span class="attr">rotate</span>($&#123;<span class="attr">this.state.hour</span>&#125;<span class="attr">deg</span>)`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &lt;/div &gt;</span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">    ReactDOM.render(<span class="tag">&lt;<span class="name">Circle</span> /&gt;</span>, document.getElementById(&#x27;app&#x27;))</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h4><p><img src="/../../images/watch.png" alt="watch"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>circle</title>
      <link href="/2022/06/24/test/circle/"/>
      <url>/2022/06/24/test/circle/</url>
      
        <content type="html"><![CDATA[<h1 id="react案例：小球转动"><a href="#react案例：小球转动" class="headerlink" title="react案例：小球转动"></a>react案例：小球转动</h1><h3 id="css样式："><a href="#css样式：" class="headerlink" title="css样式："></a>css样式：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        <span class="selector-tag">ul</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">list-style</span>: none;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">15%</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">margin-top</span>: -<span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.marquee-view</span> &#123;</span><br><span class="line">            <span class="attribute">animation</span>: move <span class="number">3s</span> linear <span class="number">5000</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">            <span class="number">0%</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="number">100%</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.demo</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#000000</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.btn</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">55px</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">8px</span>;</span><br><span class="line">            <span class="attribute">z-index</span>: <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.add</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">button</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">85px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: darkturquoise;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid darkturquoise;</span><br><span class="line">            <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">input</span>&#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">            <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.add</span> <span class="selector-tag">button</span>&#123;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">7px</span> <span class="number">7px</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">p</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>(p)</span><br><span class="line">        &#125;</span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">ls</span>: <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">ls</span>,</span><br><span class="line">            <span class="attr">gund</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        start = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 异步改变状态</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">gund</span>: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">gund</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        addys = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> val = <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">ipt</span>.<span class="property">value</span></span><br><span class="line">            <span class="keyword">let</span> &#123; ls &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">ls</span>.<span class="title function_">push</span>(val)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; ls &#125;)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">ls</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;add&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#x27;ipt&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addys&#125;</span>&gt;</span>添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;btn&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.start&#125;</span>&gt;</span>小球转动<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&#123;this.state.gund</span> ? &#x27;<span class="attr">marquee-view</span>&#x27; <span class="attr">:</span> &#x27;&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                            &#123;this.state.ls.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">transform:</span> `<span class="attr">rotate</span>($&#123;<span class="attr">index</span> * (<span class="attr">360</span> / <span class="attr">this.state.ls.length</span>)&#125;<span class="attr">deg</span>)`, <span class="attr">transformOrigin:</span> &#x27;<span class="attr">20px</span> <span class="attr">220px</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                &gt;</span></span></span><br><span class="line"><span class="language-xml">                                    &#123;item&#125;</span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Circle</span> <span class="attr">ls</span>=<span class="string">&#123;[</span>&#x27;金&#x27;, &#x27;木&#x27;, &#x27;水&#x27;, &#x27;火&#x27;, &#x27;土&#x27;]&#125; /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/../../images/circle.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-django ORM</title>
      <link href="/2022/05/15/study/python/python-djangoORM/"/>
      <url>/2022/05/15/study/python/python-djangoORM/</url>
      
        <content type="html"><![CDATA[<h1 id="Django-ORM常用操作介绍（新手必看）"><a href="#Django-ORM常用操作介绍（新手必看）" class="headerlink" title="Django ORM常用操作介绍（新手必看）"></a>Django ORM常用操作介绍（新手必看）</h1><p>Django开发过程中对表(model)的增删改查是最常用的功能之一，本文介绍笔者在使用model 操作过程中遇到的一些操作。</p><h1 id="model-update常规用法"><a href="#model-update常规用法" class="headerlink" title="model update常规用法"></a>model update常规用法</h1><p>假如我们的表结构是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class User(models.Model):    username = models.CharField(max_length=255, unique=True, verbose_name=&#x27;用户名&#x27;)    is_active = models.BooleanField(default=False, verbose_name=&#x27;激活状态&#x27;)</span><br></pre></td></tr></table></figure><p>那么我们修改用户名和状态可以使用如下两种方法：</p><p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.objects.filter(id=1).update(username=&#x27;nick&#x27;,is_active=True)</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = User.objects.get(id=1)_t.username=&#x27;nick&#x27;_t.is_active=True_t.save()</span><br></pre></td></tr></table></figure><p>方法一适合更新一批数据，类似于mysql语句<code>update user set username=&#39;nick&#39; where id = 1</code></p><p>方法二适合更新一条数据，也只能更新一条数据，当只有一条数据更新时推荐使用此方法，另外此方法还有一个好处，我们接着往下看</p><h1 id="具有auto-now属性字段的更新"><a href="#具有auto-now属性字段的更新" class="headerlink" title="具有auto_now属性字段的更新"></a>具有auto_now属性字段的更新</h1><p>我们通常会给表添加三个默认字段</p><ul><li>自增ID，这个django已经默认加了，就像上边的建表语句，虽然只写了username和is_active两个字段，但表建好后也会有一个默认的自增id字段</li><li>创建时间，用来标识这条记录的创建时间，具有<code>auto_now_add</code>属性，创建记录时会自动填充当前时间到此字段</li><li>修改时间，用来标识这条记录最后一次的修改时间，具有<code>auto_now</code>属性，当记录发生变化时填充当前时间到此字段</li></ul><p>就像下边这样的表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class User(models.Model):    create_time = models.DateTimeField(auto_now_add=True, verbose_name=&#x27;创建时间&#x27;)    update_time = models.DateTimeField(auto_now=True, verbose_name=&#x27;更新时间&#x27;)    username = models.CharField(max_length=255, unique=True, verbose_name=&#x27;用户名&#x27;)    is_active = models.BooleanField(default=False, verbose_name=&#x27;激活状态&#x27;)</span><br></pre></td></tr></table></figure><p><strong>当表有字段具有auto_now属性且你希望他能自动更新时，必须使用上边方法二的更新，不然auto_now字段不会更新</strong>，也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = User.objects.get(id=1)_t.username=&#x27;nick&#x27;_t.is_active=True_t.save()</span><br></pre></td></tr></table></figure><h1 id="json-dict类型数据更新字段"><a href="#json-dict类型数据更新字段" class="headerlink" title="json/dict类型数据更新字段"></a>json/dict类型数据更新字段</h1><p>目前主流的web开放方式都讲究前后端分离，分离之后前后端交互的数据格式大都用通用的json型，那么如何用最少的代码方便的更新json格式数据到数据库呢？同样可以使用如下两种方法：</p><p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;&#x27;username&#x27;:&#x27;nick&#x27;,&#x27;is_active&#x27;:&#x27;0&#x27;&#125;User.objects.filter(id=1).update(**data)</span><br></pre></td></tr></table></figure><ul><li>同样这种方法不能自动更新具有<code>auto_now</code>属性字段的值</li><li>通常我们再变量前加一个星号(*)表示这个变量是元组/列表，加两个星号表示这个参数是字典</li></ul><p>方法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;&#x27;username&#x27;:&#x27;nick&#x27;,&#x27;is_active&#x27;:&#x27;0&#x27;&#125;_t = User.objects.get(id=1)_t.__dict__.update(**data)_t.save()</span><br></pre></td></tr></table></figure><ul><li>方法二和方法一同样无法自动更新<code>auto_now</code>字段的值</li><li>注意这里使用到了一个<code>**dict**</code>方法</li></ul><p>方法三：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = User.objects.get(id=1)_t.role=Role.objects.get(id=3)_t.save()</span><br></pre></td></tr></table></figure><h1 id="ForeignKey字段更新"><a href="#ForeignKey字段更新" class="headerlink" title="ForeignKey字段更新"></a>ForeignKey字段更新</h1><p>假如我们的表中有Foreignkey外键时，该如何更新呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class User(models.Model):    create_time = models.DateTimeField(auto_now_add=True, verbose_name=&#x27;创建时间&#x27;)    update_time = models.DateTimeField(auto_now=True, verbose_name=&#x27;更新时间&#x27;)    username = models.CharField(max_length=255, unique=True, verbose_name=&#x27;用户名&#x27;)    is_active = models.BooleanField(default=False, verbose_name=&#x27;激活状态&#x27;)    role = models.ForeignKey(Role, on_delete=models.CASCADE, null=True, verbose_name=&#x27;角色&#x27;)</span><br></pre></td></tr></table></figure><p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.objects.filter(id=1).update(role=2)</span><br></pre></td></tr></table></figure><ul><li>最简单的方法，直接让给role字段设置为一个id即可</li><li>当然也可以用dict作为参数更新：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.objects.filter(id=1).update(**&#123;&#x27;username&#x27;:&#x27;nick&#x27;,&#x27;role&#x27;:3&#125;)</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_role = Role.objects.get(id=2)User.objects.filter(id=1).update(role=_role)</span><br></pre></td></tr></table></figure><ul><li>也可以赋值一个实例给role</li><li>当然也可以用dict作为参数更新：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_role = Role.objects.get(id=1)User.objects.filter(id=1).update(**&#123;&#x27;username&#x27;:&#x27;nick&#x27;,&#x27;role&#x27;:_role&#125;)</span><br></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = User.objects.get(id=1)_t.role=Role.objects.get(id=3)_t.save()</span><br></pre></td></tr></table></figure><ul><li>注意：<strong>这里的role必须赋值为一个对象，不能写id</strong>，不然会报错<code>&quot;User.role&quot; must be a &quot;Role&quot; instance</code></li><li>当使用dict作为参数更新时又有一点不同，如下代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = User.objects.get(id=1)_t.__dict__.update(**&#123;&#x27;username&#x27;:&#x27;nick&#x27;,&#x27;role_id&#x27;:2&#125;)_t.save()</span><br></pre></td></tr></table></figure><ul><li>**Foreignkey外键必须加上<code>_id</code>**，例如：{‘role_id’:3}</li><li>role_id后边必须跟一个id（int或str类型都可），不能跟role实例</li></ul><h1 id="ManyToManyField字段更新"><a href="#ManyToManyField字段更新" class="headerlink" title="ManyToManyField字段更新"></a>ManyToManyField字段更新</h1><p>假如我们的表中有ManyToManyField字段时更新又有什么影响呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class User(models.Model):    create_time = models.DateTimeField(auto_now_add=True, verbose_name=&#x27;创建时间&#x27;)    update_time = models.DateTimeField(auto_now=True, verbose_name=&#x27;更新时间&#x27;)    username = models.CharField(max_length=255, unique=True, verbose_name=&#x27;用户名&#x27;)    is_active = models.BooleanField(default=False, verbose_name=&#x27;激活状态&#x27;)    role = models.ForeignKey(Role, on_delete=models.CASCADE, null=True, verbose_name=&#x27;角色&#x27;)    groups = models.ManyToManyField(Group, null=True, verbose_name=&#x27;组&#x27;)</span><br></pre></td></tr></table></figure><p>m2m更新：m2m字段没有直接更新的方法，只能通过清空再添加的方法更新了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = User.objects.get(id=1)_t.groups.clear()_t.groups.add(*[1,3,5])_t.save()</span><br></pre></td></tr></table></figure><ul><li><p><code>add()</code>：m2m字段添加一个值，当有多个值的时候可用列表，参照上边例子</p></li><li><ul><li>_t.groups.add(2)</li><li>_t.groups.add(Group.objects.get(id=2))</li></ul></li><li><p><code>remove()</code>：m2m字段移除一个值，，当有多个值的时候可用列表，参照上边例子</p></li><li><ul><li>_t.groups.remove(2)</li><li>_t.groups.remove(Group.objects.get(id=2))</li></ul></li><li><p><code>clear()</code>：清空m2m字段的值</p></li></ul><h2 id="Django-model-select的各种用法详解"><a href="#Django-model-select的各种用法详解" class="headerlink" title="Django model select的各种用法详解"></a>Django model select的各种用法详解</h2><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 获取所有数据，对应SQL：select * from UserUser.objects.all()# 匹配，对应SQL：select * from User where name = &#x27;运维咖啡吧&#x27;User.objects.filter(name=&#x27;运维咖啡吧&#x27;)# 不匹配，对应SQL：select * from User where name != &#x27;运维咖啡吧&#x27;User.objects.exclude(name=&#x27;运维咖啡吧&#x27;)# 获取单条数据（有且仅有一条，id唯一），对应SQL：select * from User where id = 724User.objects.get(id=123)</span><br></pre></td></tr></table></figure><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 获取总数，对应SQL：select count(1) from UserUser.objects.count()</span><br><span class="line"># 获取总数，对应SQL：select count(1) from User where name = &#x27;运维咖啡吧&#x27;User.objects.filter(name=&#x27;运维咖啡吧&#x27;).count()</span><br><span class="line"># 大于，&gt;，对应SQL：select * from User where id &gt; 724User.objects.filter(id__gt=724)</span><br><span class="line"># 大于等于，&gt;=，对应SQL：select * from User where id &gt;= 724User.objects.filter(id__gte=724)</span><br><span class="line"># 小于，&lt;，对应SQL：select * from User where id &lt; 724User.objects.filter(id__lt=724)</span><br><span class="line"># 小于等于，&lt;=，对应SQL：select * from User where id &lt;= 724User.objects.filter(id__lte=724)</span><br><span class="line"># 同时大于和小于， 1 &lt; id &lt; 10，对应SQL：select * from User where id &gt; 1 and id &lt; 10User.objects.filter(id__gt=1, id__lt=10)</span><br><span class="line"># 包含，in，对应SQL：select * from User where id in (11,22,33)User.objects.filter(id__in=[11, 22, 33])</span><br><span class="line"># 不包含，not in，对应SQL：select * from User where id not in (11,22,33)User.objects.exclude(id__in=[11, 22, 33])</span><br><span class="line"># 为空：isnull=True，对应SQL：select * from User where pub_date is nullUser.objects.filter(pub_date__isnull=True)</span><br><span class="line"># 不为空：isnull=False，对应SQL：select * from User where pub_date is not nullUser.objects.filter(pub_date__isnull=True)</span><br><span class="line"># 匹配，like，大小写敏感，对应SQL：select * from User where name like &#x27;%sre%&#x27;，SQL中大小写不敏感User.objects.filter(name__contains=&quot;sre&quot;)</span><br></pre></td></tr></table></figure><h1 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># limit，对应SQL：select * from User limit 3;</span><br><span class="line">User.objects.all()[:3]</span><br><span class="line"></span><br><span class="line"># limit，取第三条以后的数据，没有对应的SQL，类似的如：select * from User limit 3,10000000，从第3条开始取数据，取10000000条（10000000大于表中数据条数）</span><br><span class="line">User.objects.all()[3:]</span><br><span class="line"></span><br><span class="line"># offset，取出结果的第10-20条数据（不包含10，包含20）,也没有对应SQL，参考上边的SQL写法</span><br><span class="line">User.objects.all()[10:20]</span><br><span class="line"></span><br><span class="line"># 分组，group by，对应SQL：select username,count(1) from User group by username;</span><br><span class="line">from django.db.models import Count</span><br><span class="line">User.objects.values_list(&#x27;username&#x27;).annotate(Count(&#x27;id&#x27;))</span><br><span class="line"></span><br><span class="line"># 去重distinct，对应SQL：select distinct(username) from User</span><br><span class="line">User.objects.values(&#x27;username&#x27;).distinct().count()</span><br><span class="line"></span><br><span class="line"># filter多列、查询多列，对应SQL：select username,fullname from accounts_user</span><br><span class="line">User.objects.values_list(&#x27;username&#x27;, &#x27;fullname&#x27;)</span><br><span class="line"></span><br><span class="line"># filter单列、查询单列，正常values_list给出的结果是个列表，里边里边的每条数据对应一个元组，当只查询一列时，可以使用flat标签去掉元组，将每条数据的结果以字符串的形式存储在列表中，从而避免解析元组的麻烦</span><br><span class="line">User.objects.values_list(&#x27;username&#x27;, flat=True)</span><br><span class="line"></span><br><span class="line"># int字段取最大值、最小值、综合、平均数</span><br><span class="line">from django.db.models import Sum,Count,Max,Min,Avg</span><br><span class="line"></span><br><span class="line">User.objects.aggregate(Count(‘id’))</span><br><span class="line">User.objects.aggregate(Sum(‘age’))</span><br></pre></td></tr></table></figure><h1 id="时间字段"><a href="#时间字段" class="headerlink" title="时间字段"></a>时间字段</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 匹配日期，date</span><br><span class="line">User.objects.filter(create_time__date=datetime.date(2018, 8, 1))</span><br><span class="line">User.objects.filter(create_time__date__gt=datetime.date(2018, 8, 2))</span><br><span class="line"></span><br><span class="line"># 匹配年，year</span><br><span class="line">User.objects.filter(create_time__year=2018)</span><br><span class="line">User.objects.filter(create_time__year__gte=2018)</span><br><span class="line"></span><br><span class="line"># 匹配月，month</span><br><span class="line">User.objects.filter(create_time__month__gt=7)</span><br><span class="line">User.objects.filter(create_time__month__gte=7)</span><br><span class="line"></span><br><span class="line"># 匹配日，day</span><br><span class="line">User.objects.filter(create_time__day=8)</span><br><span class="line">User.objects.filter(create_time__day__gte=8)</span><br><span class="line"></span><br><span class="line"># 匹配周，week_day</span><br><span class="line"> User.objects.filter(create_time__week_day=2)</span><br><span class="line">User.objects.filter(create_time__week_day__gte=2)</span><br><span class="line"></span><br><span class="line"># 匹配时，hour</span><br><span class="line">User.objects.filter(create_time__hour=9)</span><br><span class="line">User.objects.filter(create_time__hour__gte=9)</span><br><span class="line"></span><br><span class="line"># 匹配分，minute</span><br><span class="line">User.objects.filter(create_time__minute=15)</span><br><span class="line">User.objects.filter(create_time__minute_gt=15)</span><br><span class="line"></span><br><span class="line"># 匹配秒，second</span><br><span class="line">User.objects.filter(create_time__second=15)</span><br><span class="line">User.objects.filter(create_time__second__gte=15)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 按天统计归档</span><br><span class="line">today = datetime.date.today()</span><br><span class="line">select = &#123;&#x27;day&#x27;: connection.ops.date_trunc_sql(&#x27;day&#x27;, &#x27;create_time&#x27;)&#125;</span><br><span class="line">deploy_date_count = Task.objects.filter(</span><br><span class="line">    create_time__range=(today - datetime.timedelta(days=7), today)</span><br><span class="line">).extra(select=select).values(&#x27;day&#x27;).annotate(number=Count(&#x27;id&#x27;))</span><br></pre></td></tr></table></figure><h1 id="Q-的使用"><a href="#Q-的使用" class="headerlink" title="Q 的使用"></a>Q 的使用</h1><p>Q对象可以对关键字参数进行封装，从而更好的应用多个查询，可以组合&amp;(and)、|(or)、~(not)操作符。</p><p>例如下边的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.db.models import QUser.objects.filter(    Q(role__startswith=&#x27;sre_&#x27;),    Q(name=&#x27;公众号&#x27;) | Q(name=&#x27;运维咖啡吧&#x27;))</span><br></pre></td></tr></table></figure><p>转换成SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from User where role like &#x27;sre_%&#x27; and (name=&#x27;公众号&#x27; or name=&#x27;运维咖啡吧&#x27;)</span><br></pre></td></tr></table></figure><p>通常更多的时候我们用Q来做搜索逻辑，比如前台搜索框输入一个字符，后台去数据库中检索标题或内容中是否包含</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_s = request.GET.get(&#x27;search&#x27;)_t = Blog.objects.all()if _s:    _t = _t.filter(        Q(title__icontains=_s) |        Q(content__icontains=_s)    )return _t</span><br></pre></td></tr></table></figure><h1 id="外键：ForeignKey"><a href="#外键：ForeignKey" class="headerlink" title="外键：ForeignKey"></a>外键：ForeignKey</h1><ul><li>表结构：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Role(models.Model):    name = models.CharField(max_length=16, unique=True)class User(models.Model):    username = models.EmailField(max_length=255, unique=True)    role = models.ForeignKey(Role, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><ul><li>正向查询:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 查询用户的角色名_t = User.objects.get(username=&#x27;运维咖啡吧&#x27;)_t.role.name</span><br></pre></td></tr></table></figure><ul><li>反向查询：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 查询角色下包含的所有用户_t = Role.objects.get(name=&#x27;Role03&#x27;)_t.user_set.all()</span><br></pre></td></tr></table></figure><ul><li>另一种反向查询的方法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = Role.objects.get(name=&#x27;Role03&#x27;)# 这种方法比上一种_set的方法查询速度要快User.objects.filter(role=_t)</span><br></pre></td></tr></table></figure><ul><li>第三种反向查询的方法：</li></ul><p>如果外键字段有<code>related_name</code>属性，例如models如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class User(models.Model):    username = models.EmailField(max_length=255, unique=True)    role = models.ForeignKey(Role, on_delete=models.CASCADE,related_name=&#x27;roleUsers&#x27;)</span><br></pre></td></tr></table></figure><p>那么可以直接用<code>related_name</code>属性取到某角色的所有用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = Role.objects.get(name = &#x27;Role03&#x27;)_t.roleUsers.all()</span><br></pre></td></tr></table></figure><h1 id="M2M：ManyToManyField"><a href="#M2M：ManyToManyField" class="headerlink" title="M2M：ManyToManyField"></a>M2M：ManyToManyField</h1><ul><li>表结构：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Group(models.Model):    name = models.CharField(max_length=16, unique=True)class User(models.Model):    username = models.CharField(max_length=255, unique=True)    groups = models.ManyToManyField(Group, related_name=&#x27;groupUsers&#x27;)</span><br></pre></td></tr></table></figure><ul><li>正向查询:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 查询用户隶属组_t = User.objects.get(username = &#x27;运维咖啡吧&#x27;)_t.groups.all()</span><br></pre></td></tr></table></figure><ul><li>反向查询：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 查询组包含用户_t = Group.objects.get(name = &#x27;groupC&#x27;)_t.user_set.all()</span><br></pre></td></tr></table></figure><p>同样M2M字段如果有<code>related_name</code>属性，那么可以直接用下边的方式反查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = Group.objects.get(name = &#x27;groupC&#x27;)_t.groupUsers.all()</span><br></pre></td></tr></table></figure><h1 id="get-object-or-404"><a href="#get-object-or-404" class="headerlink" title="get_object_or_404"></a>get_object_or_404</h1><p>正常如果我们要去数据库里搜索某一条数据时，通常使用下边的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = User.objects.get(id=734)</span><br></pre></td></tr></table></figure><p>但当<code>id=724</code>的数据不存在时，程序将会抛出一个错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcer.models.DoesNotExist: User matching query does not exist.</span><br></pre></td></tr></table></figure><p>为了程序兼容和异常判断，我们可以使用下边两种方式:</p><ul><li>方式一：<code>get</code>改为<code>filter</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_t = User.objects.filter(id=724)# 取出_t之后再去判断_t是否存在</span><br></pre></td></tr></table></figure><ul><li>方式二：使用<code>get_object_or_404</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import get_object_or_404_t = get_object_or_404(User, id=724)# get_object_or_404方法，它会先调用django的get方法，如果查询的对象不存在的话，则抛出一个Http404的异常</span><br></pre></td></tr></table></figure><p>实现方法类似于下边这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.http import Http404try:    _t = User.objects.get(id=724)except User.DoesNotExist:    raise Http404</span><br></pre></td></tr></table></figure><h1 id="get-or-create"><a href="#get-or-create" class="headerlink" title="get_or_create"></a>get_or_create</h1><p>顾名思义，查找一个对象如果不存在则创建，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object, created = User.objects.get_or_create(username=&#x27;运维咖啡吧&#x27;)</span><br></pre></td></tr></table></figure><p>返回一个由object和created组成的元组，其中object就是一个查询到的或者是被创建的对象，created是一个表示是否创建了新对象的布尔值</p><p>实现方式类似于下边这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try:    object = User.objects.get(username=&#x27;运维咖啡吧&#x27;)    created = Falseexception User.DoesNoExist:    object = User(username=&#x27;运维咖啡吧&#x27;)    object.save()    created = Truereturen object, created</span><br></pre></td></tr></table></figure><h1 id="执行原生SQL"><a href="#执行原生SQL" class="headerlink" title="执行原生SQL"></a>执行原生SQL</h1><p>Django中能用ORM的就用它ORM吧，不建议执行原生SQL，可能会有一些安全问题，如果实在是SQL太复杂ORM实现不了，那就看看下边执行原生SQL的方法，跟直接使用pymysql基本一致了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.db import connectionwith connection.cursor() as cursor:    cursor.execute(&#x27;select * from accounts_User&#x27;)    row = cursor.fetchall()return row</span><br></pre></td></tr></table></figure><p>注意这里表名字要用<strong>app名+下划线+model名</strong>的方式</p><p>大家可以看下原网址：</p><p><a href="https://www.django.cn/course/show-54.html">https://www.django.cn/course/show-54.html</a></p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>proxy</title>
      <link href="/2022/05/13/study/js/es6Proxy/"/>
      <url>/2022/05/13/study/js/es6Proxy/</url>
      
        <content type="html"><![CDATA[<h3 id="Proxy代理"><a href="#Proxy代理" class="headerlink" title="Proxy代理"></a>Proxy代理</h3><blockquote><p>proxy在目标对象的外层搭建了一层拦截，外界对目标对象的某些操作，必须通过这层拦截</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure><blockquote><p><code>new Proxy()</code>表示生成一个Proxy实例，<code>target</code>参数表示所要拦截的目标对象，<code>handler</code>参数也是一个对象，用来定制拦截行为</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;poetries&#x27;</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">var</span> logHandler = &#123;</span><br><span class="line">   <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 被读取`</span>);</span><br><span class="line">     <span class="keyword">return</span> target[key];</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 被设置为 <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">     target[key] = value;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> targetWithLog = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, logHandler);</span><br><span class="line"> </span><br><span class="line"> targetWithLog.<span class="property">name</span>; <span class="comment">// 控制台输出：name 被读取</span></span><br><span class="line"> targetWithLog.<span class="property">name</span> = <span class="string">&#x27;others&#x27;</span>; <span class="comment">// 控制台输出：name 被设置为 others</span></span><br><span class="line"> </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">name</span>); <span class="comment">// 控制台输出: others</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><code>targetWithLog</code> 读取属性的值时，实际上执行的是 <code>logHandler.get</code> ：在控制台输出信息，并且读取被代理对象 <code>target</code> 的属性。</li><li>在 <code>targetWithLog</code> 设置属性值时，实际上执行的是 <code>logHandler.set</code> ：在控制台输出信息，并且设置被代理对象 <code>target</code> 的属性的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由于拦截函数总是返回35，所以访问任何属性都得到35</span></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">time</span> <span class="comment">// 35</span></span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// 35</span></span><br><span class="line">proxy.<span class="property">title</span> <span class="comment">// 35</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>Proxy 实例也可以作为其他对象的原型对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(proxy);</span><br><span class="line">obj.<span class="property">time</span> <span class="comment">// 35</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><blockquote><p><code>proxy</code>对象是<code>obj</code>对象的原型，<code>obj</code>对象本身并没有<code>time</code>属性，所以根据原型链，会在<code>proxy</code>对象上读取该属性，导致被拦截</p></blockquote><p><strong>Proxy的作用</strong></p><blockquote><p>对于代理模式 <code>Proxy</code> 的作用主要体现在三个方面</p></blockquote><ul><li>拦截和监视外部对对象的访问</li><li>降低函数或类的复杂度</li><li>在复杂操作前对操作进行校验或对所需资源进行管理</li></ul><p><strong>Proxy所能代理的范围–handler</strong></p><blockquote><p>实际上 handler 本身就是ES6所新设计的一个对象.它的作用就是用来 自定义代理对象的各种可代理操作 。它本身一共有13中方法,每种方法都可以代理一种操作.其13种方法如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在读取代理对象的原型时触发该操作，比如在执行 Object.getPrototypeOf(proxy) 时。</span></span><br><span class="line">handler.<span class="title function_">getPrototypeOf</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在设置代理对象的原型时触发该操作，比如在执行 Object.setPrototypeOf(proxy, null) 时。</span></span><br><span class="line">handler.<span class="title function_">setPrototypeOf</span>()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在判断一个代理对象是否是可扩展时触发该操作，比如在执行 Object.isExtensible(proxy) 时。</span></span><br><span class="line">handler.<span class="title function_">isExtensible</span>()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在让一个代理对象不可扩展时触发该操作，比如在执行 Object.preventExtensions(proxy) 时。</span></span><br><span class="line">handler.<span class="title function_">preventExtensions</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在获取代理对象某个属性的属性描述时触发该操作，比如在执行 Object.getOwnPropertyDescriptor(proxy, &quot;foo&quot;) 时。</span></span><br><span class="line">handler.<span class="title function_">getOwnPropertyDescriptor</span>()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在定义代理对象某个属性时的属性描述时触发该操作，比如在执行 Object.defineProperty(proxy, &quot;foo&quot;, &#123;&#125;) 时。</span></span><br><span class="line">andler.<span class="title function_">defineProperty</span>()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在判断代理对象是否拥有某个属性时触发该操作，比如在执行 &quot;foo&quot; in proxy 时。</span></span><br><span class="line">handler.<span class="title function_">has</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在读取代理对象的某个属性时触发该操作，比如在执行 proxy.foo 时。</span></span><br><span class="line">handler.<span class="title function_">get</span>()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在给代理对象的某个属性赋值时触发该操作，比如在执行 proxy.foo = 1 时。</span></span><br><span class="line">handler.<span class="title function_">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在删除代理对象的某个属性时触发该操作，比如在执行 delete proxy.foo 时。</span></span><br><span class="line">handler.<span class="title function_">deleteProperty</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在获取代理对象的所有属性键时触发该操作，比如在执行 Object.getOwnPropertyNames(proxy) 时。</span></span><br><span class="line">handler.<span class="title function_">ownKeys</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在调用一个目标对象为函数的代理对象时触发该操作，比如在执行 proxy() 时。</span></span><br><span class="line">handler.<span class="title function_">apply</span>()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在给一个目标对象为构造函数的代理对象构造实例时触发该操作，比如在执行new proxy() 时。</span></span><br><span class="line">handler.<span class="title function_">construct</span>()   </span><br></pre></td></tr></table></figure><p><strong>为何Proxy不能被Polyfill</strong></p><ul><li>如class可以用<code>function</code>模拟；<code>promise</code>可以用<code>callback</code>模拟</li><li>但是proxy不能用<code>Object.defineProperty</code>模拟</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-django项目结构</title>
      <link href="/2022/05/13/study/python/python-django%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/05/13/study/python/python-django%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="django4-0基础教程-如何理解Django项目的MVT结构？"><a href="#django4-0基础教程-如何理解Django项目的MVT结构？" class="headerlink" title="django4.0基础教程:如何理解Django项目的MVT结构？"></a>django4.0基础教程:如何理解Django项目的MVT结构？</h1><p>Django 基于<strong>MVT（模型-视图-模板）</strong>架构。MVT 是一种用于开发 Web 应用程序的软件设计模式。也可以认为这是一种文件管理形式。</p><p><strong>MVT结构有以下三个部分:</strong></p><p><strong>模型(models)：</strong>模型将充当数据的接口。它负责维护数据。它是整个应用程序背后的逻辑数据结构，以数据库（一般是MySql、Postgres等关系型数据库）为代表。模型处理与数据相关的所有事务： 如何存取、如何验证有效。</p><p><strong>视图(views)：</strong>视图是用户界面——渲染网站时在浏览器中看到的内容。它由 HTML/CSS/Javascript 和 Jinja 文件表示。视图包含存取模型及调取恰当模板的相关逻辑。 你可以把它看作模型与模板之间的桥梁。</p><p><strong>模板(templates)：</strong>模板由所需 HTML 输出的静态部分以及描述如何插入动态内容的一些特殊语法组成。模板处理与表现相关的决定，如何在页面或其他类型文档中进行显示。</p><p><img src="https://www.django.cn/media/upimg/20220306025538_20220306025557_702.png" alt="img"></p><p>如上图所示：应用目录下的models.py代表数据层M,应用目录下的views.py代表视图层V，项目目录里的的templates目录代表表现层的T。templates这个目录也可以放到对应的应用目录下，代表着这个templates目录只能用于对应项目。</p><p><strong>MTV的工作流程，大致是这样的：</strong>用户浏览器里输入URL，URL向服务器请求，然后调用Django项目中与URL绑定的视图，视图负责处理用户请求及返回响应的逻辑，然后通过模板显示出来，在浏览器里展现给出来给用户看。</p><p><strong>提示：</strong>Django Apps的主要特点是独立性，每个应用程序作为一个独立的单元来支持主项目。一个大的项目由一个或多个应用组成。</p><p>大家可以看下原网址：</p><p><a href="https://www.django.cn/course/show-54.html">https://www.django.cn/course/show-54.html</a></p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-django创建工具</title>
      <link href="/2022/05/12/study/python/python-django%E5%88%9B%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/05/12/study/python/python-django%E5%88%9B%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="django4-0基础教程-通过Pycharm创建项目和应用"><a href="#django4-0基础教程-通过Pycharm创建项目和应用" class="headerlink" title="django4.0基础教程:通过Pycharm创建项目和应用"></a>django4.0基础教程:通过Pycharm创建项目和应用</h1><p>这篇文章讲如何通过Pycharm创建项目和应用。之后的文章，都是使用Pycharm来编辑代码。<br><strong>一、使用Pycharm新建项目。</strong><br>点击Pycharm左上角“文件”然后“新建项目”，创建Django项目，具体参考下图：</p><p><img src="https://www.django.cn/media/upimg/20220306022750_20220306022954_631.png" alt="20220306022750.png"></p><p>点击右下角创建，开始创建项目。<br>创建成功之后，目录如下：</p><p><img src="https://www.django.cn/media/upimg/20220306023403_20220306023423_139.png" alt="20220306023403.png"></p><p><strong>2、打开终端进入虚拟环境</strong></p><p>点击Pycharm左下角的终端，然后进入虚拟环境。</p><p><img src="https://www.django.cn/media/upimg/20220306023802_20220306024046_119.png" alt="20220306023802.png"></p><p>使用下面的命令确认当前django版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p><img src="https://www.django.cn/media/upimg/0220306031150_20220306031314_974.png" alt="0220306031150.png"></p><p><strong>3、在终端输入指令创建一个名为Blog的Django应用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp blog</span><br></pre></td></tr></table></figure><p><img src="https://www.django.cn/media/upimg/20220306024327_20220306024353_630.png" alt="20220306024327.png"></p><p>最终目录如下图：<br><img src="https://www.django.cn/media/upimg/20220306025538_20220306025557_702.png" alt="20220306025538.png"><br><strong>4、把应用在配置文件里注册</strong></p><p>打开项目目录下的settings.py文件，找到INSTALLED_APPS 变量，我们在里面添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &#x27;django.contrib.admin&#x27;,</span><br><span class="line">    &#x27;django.contrib.auth&#x27;,</span><br><span class="line">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="line">    &#x27;django.contrib.messages&#x27;,</span><br><span class="line">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="line">    &#x27;blog.apps.BlogConfig&#x27;, #添加此行代码</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>5、项目目录和文件介绍</strong></p><p>项目根目录介绍：<br><img src="https://www.django.cn/media/upimg/20220306025729_20220306025750_661.png" alt="20220306025729.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.idea 这个目录是软件配置文件，与项目无关，可忽略</span><br><span class="line">-blog          项目应用目录</span><br><span class="line">-djangoPorject 项目配置文件目录</span><br><span class="line">-templates     模板文件目录</span><br><span class="line">-venv          虚拟环境目录，可忽略</span><br><span class="line">-manage.py     一个命令行工具，可以使你用多种方式对Django项目进行交互</span><br></pre></td></tr></table></figure><p><strong>项目配置文件介绍</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">djangoProject #项目目录</span><br><span class="line">    - init      #一个空文件，它告诉Python这个目录应该被看做一个Python包</span><br><span class="line">    - settings    # 项目主配置文件</span><br><span class="line">    - url       # URL文件（路由文件）</span><br><span class="line">    - wsgi       # 遵循WSGI规范</span><br><span class="line">    - asgi.py      #异步的WSGI网关</span><br></pre></td></tr></table></figure><p><strong>应用目录文件介绍：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">blog             #应用目录</span><br><span class="line">│  admin.py        #对应应用后台管理配置文件。</span><br><span class="line">│  apps.py        #对应应用的配置文件。</span><br><span class="line">│  models.py       #数据模块，数据库设计就在此文件中设计。后面重点讲解</span><br><span class="line">│  tests.py        #自动化测试模块，可在里面编写测试脚本自动化测试</span><br><span class="line">│  views.py        #视图文件，用来执行响应代码的。你在浏览器所见所得都是它处理的。</span><br><span class="line">│  __init__.py</span><br><span class="line">│</span><br><span class="line">├─migrations        #数据迁移、移植文目录，记录数据库操作记录，内容自动生成。</span><br><span class="line">│  │  __init__.py</span><br></pre></td></tr></table></figure><p><strong>6、项目目录和文件介绍</strong><br>点击右上角绿色的三角形，可运行项目。<br><img src="https://www.django.cn/media/upimg/20220306040746_20220306040905_246.png" alt="20220306040746.png"></p><p><img src="https://www.django.cn/media/upimg/20220306040929_20220306040952_652.png" alt="20220306040929.png"></p><p>浏览器输入地址： <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a> 即可访问项目。</p><p>至此，使用Pycharm创建项目和应用完成。</p><p>在使用两种方法创建项目和应用的时候，我们使用了一些指令，这些指令，我们都是通过项目根目录下的manage.py这个文件与项目进行交互的。更多的指令，大家可以查看下面的文章：<a href="https://www.django.cn/article/show-26.html">Django常用命令介绍，新手建议阅读</a></p><p>大家可以看下原网址：</p><p><a href="https://www.django.cn/course/show-54.html">https://www.django.cn/course/show-54.html</a></p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-django创建命令</title>
      <link href="/2022/05/10/study/python/python-django%E5%88%9B%E5%BB%BA/"/>
      <url>/2022/05/10/study/python/python-django%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="django4-0基础教程-通过指令创建django项目和应用"><a href="#django4-0基础教程-通过指令创建django项目和应用" class="headerlink" title="django4.0基础教程:通过指令创建django项目和应用"></a>django4.0基础教程:通过指令创建django项目和应用</h1><p>Django开发中，我们要先创建项目，然后再创建应用APP。一个Django项目是由多个APP组成的，Django里的APP，大家可以把它当成一个功能模块，不同类型的功能放到不同的APP中。也可以把APP理解为一个独立的小型项目，我们把这些小的项目组合起来，就是一个完整的项目。比如一个大的门户网站，它包含了新闻、图片、论坛等功能模块，每添加一个功能模板，我们就创建一个APP，然后把这些功能模块代码写到APP里。<br>Django中创建项目和应用，一般有两个方法：通过Django独有指令创建和通过代码编辑软件创建。</p><p>我们先讲通过指令方式来创建Django的项目和应用。<br>（注：本教程都是在Win10+Python3.9环境下操作，之后的不做特别提示）<br><strong>一、创建一个文件夹，用来存放项目源码。</strong><br>在电脑里创建一个mysite的文件夹，打开文件夹，在对话框左上角，点击文件—&gt;打开Windows PowerShell。（有些操作系统是命令行工具，一样的操作）如下图：<br><img src="https://www.django.cn/media/upimg/20220228234020_20220301020817_284.jpg" alt="django创建项目.jpg"></p><p><strong>二、使用下面命令在当前的目录下创建一个名为venv的拟环境</strong>（具体使用方法参考前面的文章：开发前的准备）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure><p><img src="https://www.django.cn/media/upimg/20220301021439_20220301021506_788.jpg" alt="20220301021439.jpg"><br>执行成功后，就会在当前的目录下多一个名为venv的目录。<br><strong>三、进入虚拟环境</strong><br>从PowerShell进入虚拟环境下的Scripts目录下激活虚拟环境。激活成功后，会在命令行前出现虚拟环境名，如下图：<br><img src="https://www.django.cn/media/upimg/33333333_20220301022259_467.jpg" alt="33333333.jpg"><br>提示：之后的操作一定要进入虚拟环境操作。</p><p><strong>四、使用下面的命令安装Django</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django</span><br><span class="line">pip install django==4.0 #如需要指定版本用这个命令</span><br></pre></td></tr></table></figure><p>安装成功后，用下面的命令查看安装的软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p>昭图：<br><img src="https://www.django.cn/media/upimg/444_20220301022733_967.jpg" alt="444.jpg"></p><p><strong>五、创建Django项目。</strong><br>从PowerShell中进入到mysite目录下。（提示：一定要进入这个文件夹，不然你就找不到创建的项目）<br>使用下面的命令创建django项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p><img src="https://www.django.cn/media/upimg/555_20220301023427_835.jpg" alt="555.jpg"><br>创建成功之后会在文件夹目录下多出一个mysite目录，如图：<br><img src="https://www.django.cn/media/upimg/66_20220301023536_928.jpg" alt="66.jpg"><br>这个mysite目录就是我们的Django项目目录（这个目录是项目的根目录），如图：<br><img src="https://www.django.cn/media/upimg/7_20220301024124_770.jpg" alt="7.jpg"></p><p><strong>六、创建一个blog应用</strong><br>项目创建好了之后 ，如果我们想要开发一个个人网站，那么我们应该先创建一个APP应用，应用名为Blog，我们的网站代码，都写在这个Blog应用里。<br>从PowerShell进入项目mysite文件目录里，使用下面的命令创建名为blog的应用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp blog</span><br></pre></td></tr></table></figure><p><img src="https://www.django.cn/media/upimg/8_20220301024242_212.jpg" alt="8.jpg"><br>这时目录里就会多出一个名为blog的目录，如图：<br><img src="https://www.django.cn/media/upimg/10_20220301024823_866.jpg" alt="10.jpg"></p><p><strong>七、注册Blog应用到项目。</strong><br>我们创建了Blog应用，我们学不能立即使用这个应用，我们需要把这个应用注册到项目里才能使用。<br>首先，我们进入mysite目录里，用编辑软件打开setting.py这个文件。找到INSTALLED_APPS 变量，我们在里面添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;blog.apps.BlogConfig&#x27;,</span><br></pre></td></tr></table></figure><p>如图：<br><img src="https://www.django.cn/media/upimg/112_20220301025707_365.jpg" alt="112.jpg"><br>添加成功之后，就相当于把应用注册到项目里了，后期如果要添加其它应用，也需要做此操作。</p><p><strong>八、启动Django项目</strong><br>进入项目根目录，使用下面的命令启动Django项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p><img src="https://www.django.cn/media/upimg/113_20220301031959_570.jpg" alt="113.jpg"><br>启动成功之后，我们在浏览器里访问网址：<a href="http://127.0.0.1:8000,就可以查看/">http://127.0.0.1:8000</a> 就可以查看到我们的项目。<br>如图：<br><img src="https://www.django.cn/media/upimg/1114_20220301032202_928.jpg" alt="1114.jpg"></p><p>至此，使用指令创建项目和应用完毕。</p><p>大家可以看下原网址：</p><p><a href="https://www.django.cn/course/show-54.html">https://www.django.cn/course/show-54.html</a></p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-django简介</title>
      <link href="/2022/05/08/study/python/python-django/"/>
      <url>/2022/05/08/study/python/python-django/</url>
      
        <content type="html"><![CDATA[<h2 id="Django简介"><a href="#Django简介" class="headerlink" title="Django简介"></a>Django简介</h2><p>可参考下面这个网址，一些django内容非常详细</p><p><a href="https://m.runoob.com/django/django-intro.html">https://m.runoob.com/django/django-intro.html</a></p><p>搞Python开发时，总会遇到需要同时运行多个不同软件版本项目的时候。每个项目的依赖需求也不一样，那咋整？这个时候我们就需要用到Virtualenv了。</p><p>那么什么是Virtualenv呢？Virtualenv是一个能创建隔绝的独立的Python虚拟环境工具。通过它可以防止各个项目之间因为Python版本不同或第三方库版本不同引起冲突，它能够建立多个相互独立，互不影响的Python工作环境。</p><p>Virtualenv的安装很简单，一行命令就能搞定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><p>Virtualenv安装好之后，就是给自己的项目创建一个虚拟环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv pyweb  #pyweb  为虚拟环境目录名，目录名自定义.</span><br></pre></td></tr></table></figure><p>当然你也可以使用下面的命令创建指定Python版本的虚拟环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virtualenv 环境名称 --python=/usr/bin/python3.6 pyweb    #指定创建一个版本为python3.6的虚拟环境</span><br><span class="line">virtualenv  环境名称 --python=&#x27;C:\python\python3.8.exe&#x27;</span><br></pre></td></tr></table></figure><p>在哪个目录下创建，就会在该目录下生成一个名为pyweb的文件夹。</p><p>至于启动虚拟环境，Windows下和Linux下，略有不同。</p><p><strong>Linux下：</strong></p><p><img src="https://www.django.cn/media/upimg/1_20180710223628_171.jpg" alt="1.jpg"></p><p>我们进入创建的虚拟环境的bin目录下，然后使用如下命令启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate</span><br></pre></td></tr></table></figure><p>启动成功之后就会在命令行前出现一个pyweb</p><p><img src="https://www.django.cn/media/upimg/2_20180710224039_224.jpg" alt="2.jpg"></p><p>这就说明虚拟环境启动成功。我们就可以在这个虚拟环境下做自己想要做的事了。</p><p><strong>Windows下：</strong></p><p>进入pyweb目录下的Scripts目录下。</p><p><img src="https://www.django.cn/media/upimg/1_20180710224943_102.jpg" alt="1.jpg"></p><p>然后输入：activate 回车，就能启动虚拟环境。</p><p><img src="https://www.django.cn/media/upimg/3_20180710225048_180.jpg" alt="3.jpg"></p><p>至于退出虚拟环境，使用如下命令即可！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Linux下任意目录</span><br><span class="line">&gt;&gt;&gt;deactivate </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;windows cd 进入虚拟环境Scripts目录</span><br><span class="line">&gt;&gt;&gt;deactivate.exe</span><br></pre></td></tr></table></figure><p>安装virtualenv以后，我们不同的项目只需要安装不同的虚拟环境，在不同的环境下工作，就不再相互影响到。妈妈再也不用担心我们出现各种莫名其妙的坑了。</p><p>大家可以看下原网址：</p><p><a href="https://www.django.cn/article/show-5.html">https://www.django.cn/article/show-5.html</a></p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python类和对象</title>
      <link href="/2022/05/04/study/python/python%E7%B1%BB%E5%B1%9E%E6%80%A7%E3%80%81%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/05/04/study/python/python%E7%B1%BB%E5%B1%9E%E6%80%A7%E3%80%81%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="实例属性、类属性"><a href="#实例属性、类属性" class="headerlink" title="实例属性、类属性"></a>实例属性、类属性</h2><p>在面向对象开发中，使用类创建出来的实例是一个对象，那么，类是否是一个对象呢？</p><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><p>通过类创建的对象被称为 <strong>实例对象</strong>，对象属性又称为实例属性，记录对象各自的数据，不同对象的同名实例属性，记录的数据各自独立，互不干扰。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        <span class="comment"># 这里的name和age都属于是实例属性，每个实例在创建时，都有自己的属性</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每创建一个对象，这个对象就有自己的name和age属性</span></span><br><span class="line">p1 = Person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">p2 = Person(<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>类属性就是类对象所拥有的属性，它被该类的所有实例对象所共有，类属性可以通过类对象或者实例对象访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;狗&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">dog1 = Dog()</span><br><span class="line">dog2 = Dog()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不管是dog1、dog2还是Dog类，都可以访问到type属性</span></span><br><span class="line"><span class="built_in">print</span>(Dog.<span class="built_in">type</span>)  <span class="comment"># 结果：狗</span></span><br><span class="line"><span class="built_in">print</span>(dog1.<span class="built_in">type</span>)  <span class="comment"># 结果：狗</span></span><br><span class="line"><span class="built_in">print</span>(dog2.<span class="built_in">type</span>)  <span class="comment"># 结果：狗</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ol><li>类的实例记录的某项数据始终保持一致时，则定义类属性。</li><li>/实例属性要求每个对象为其单独开辟一份内存空间来记录数据，而类属性为全类所共有 ，仅占用一份内存，更加节省内存空间。</li></ol><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><p>1&gt; <strong>尽量避免类属性和实例属性同名</strong>。如果有同名实例属性，<strong>实例对象会优先访问实例属性</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;狗&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.<span class="built_in">type</span> = <span class="string">&quot;dog&quot;</span>  <span class="comment"># 对象属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">dog1 = Dog()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dog1.<span class="built_in">type</span>)     <span class="comment"># 结果为 “dog”   类属性和实例属性同名，使用 实例对象 访问的是 实例属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2&gt; <strong>类属性只能通过类对象修改，不能通过实例对象修改</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lass Dog(<span class="built_in">object</span>):</span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&quot;狗&quot;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">dog1 = Dog()</span><br><span class="line">dog1.<span class="built_in">type</span> = <span class="string">&quot;dog&quot;</span>   <span class="comment"># 使用 实例对象 创建了对象属性type</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dog1.<span class="built_in">type</span>)     <span class="comment"># 结果为 “dog”   类属性和实例属性同名，访问的是实例属性</span></span><br><span class="line"><span class="built_in">print</span>(Dog.<span class="built_in">type</span>)      <span class="comment"># 结果为 &quot;狗&quot;   访问类属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有使用类名才能修改类属性</span></span><br><span class="line">Dog.<span class="built_in">type</span> = <span class="string">&quot;土狗&quot;</span></span><br><span class="line"><span class="built_in">print</span>(Dog.<span class="built_in">type</span>)  <span class="comment"># 土狗</span></span><br><span class="line">dog2 = Dog()</span><br><span class="line"><span class="built_in">print</span>(dog2.<span class="built_in">type</span>)  <span class="comment"># 土狗</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>类属性也可以设置为私有</strong>，前边添加两个下划线。 如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    count = <span class="number">0</span>  <span class="comment"># 公有的类属性</span></span><br><span class="line">    __<span class="built_in">type</span> = <span class="string">&quot;狗&quot;</span>  <span class="comment"># 私有的类属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Dog.count)       <span class="comment"># 正确</span></span><br><span class="line"><span class="built_in">print</span>(Dog.__<span class="built_in">type</span>)      <span class="comment"># 错误,私有属性，外部无法访问。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python魔法方法</title>
      <link href="/2022/04/30/study/python/python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/"/>
      <url>/2022/04/30/study/python/python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h2><p>Python 里有一种方法，叫做魔法方法。Python 的类里提供的，两个下划线开始，两个下划线结束的方法，就是魔法方法，魔法方法在恰当的时候就会被激活，自动执行。 魔法方法的两个特点：</p><ul><li>两侧各有两个下划线；</li><li>“咒语”名字已经由 Python 官方定义好，我们不能乱写。</li></ul><h3 id="1-init-方法"><a href="#1-init-方法" class="headerlink" title="1.__init__方法"></a>1.__init__方法</h3><p><code>__init__()</code>方法，在创建一个对象时默认被调用，不需要手动调用。在开发中，如果希望在创建对象的同时，就设置对象的属性，可以对 <code>__init__</code> 方法进行改造。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个猫类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):  <span class="comment"># 重写了 __init__ 魔法方法</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s爱吃鱼&quot;</span>%self.name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s爱喝水&#x27;</span>%self.name</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        tom = Cat()</span></span><br><span class="line"><span class="string">        TypeError: __init__() missing 1 required positional argument: &#x27;name&#x27;</span></span><br><span class="line"><span class="string">        这种写法在运行时会直接报错！因为 __init__ 方法里要求在创建对象时，必须要传递 name 属性，如果不传入会直接报错！</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">tom = Cat(<span class="string">&quot;Tom&quot;</span>)  <span class="comment"># 创建对象时，必须要指定name属性的值</span></span><br><span class="line">tom.eat()   <span class="comment"># tom爱吃鱼</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><code>__init__()</code>方法在创建对象时，会默认被调用，不需要手动的调用这个方法。</li><li><code>__init__()</code>方法里的self参数，在创建对象时不需要传递参数，python解释器会把创建好的对象引用直接赋值给self</li><li>在类的内部，可以使用self来使用属性和调用方法；在类的外部，需要使用对象名来使用属性和调用方法。</li><li>如果有多个对象，每个对象的属性是各自保存的，都有各自独立的地址。</li><li>方法是所有对象共享的，只占用一份内存空间，方法被调用时会通过self来判断是哪个对象调用了实例方法。</li></ol><h3 id="2-del-方法"><a href="#2-del-方法" class="headerlink" title="2.__del__方法"></a>2.__del__方法</h3><p>创建对象后，python解释器默认调用<code>__init__()</code>方法；</p><p>而当删除对象时，python解释器也会默认调用一个方法，这个方法为<code>__del__()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,score</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__init__方法被调用了&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__del__方法被调用了&#x27;</span>)</span><br><span class="line">s = Student(<span class="string">&#x27;lisi&#x27;</span>,<span class="number">95</span>)</span><br><span class="line"><span class="keyword">del</span> s</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&#x27;请输入内容&#x27;</span>)</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h3 id="3-str-方法"><a href="#3-str-方法" class="headerlink" title="3.__str__方法"></a>3.__str__方法</h3><p><code>__str__</code>方法返回对象的描述信息，使用<code>print()</code>函数打印对象时，其实调用的就是这个对象的<code>__str__</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,color</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">tom = Cat(<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 print 方法打印对象时，会调用对象的 __str__ 方法，默认会打印类名和对象的地址名</span></span><br><span class="line"><span class="built_in">print</span>(tom)   <span class="comment"># &lt;__main__.Cat object at 0x0000021BE3B9C940&gt;</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>如果想要修改对象的输出的结果，可以重写 <code>__str__</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;哈哈&#x27;</span></span><br><span class="line"></span><br><span class="line">p  = Person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(p)   <span class="comment"># 哈哈  打印对象时，会自动调用对象的 __str__ 方法</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>一般情况下，我们在打印一个对象时，可能需要列出这个对象的所有属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,score</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;姓名是:&#123;&#125;,成绩是&#123;&#125;分&#x27;</span>.<span class="built_in">format</span>(self.name,self.score)</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&#x27;lisi&#x27;</span>,<span class="number">95</span>)</span><br><span class="line"><span class="built_in">print</span>(s)   <span class="comment"># 姓名是:lisi,成绩是95分</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h3 id="4-repr-方法"><a href="#4-repr-方法" class="headerlink" title="4. __repr__方法"></a>4. __repr__方法</h3><p><code>__repr__</code>方法和<code>__str__</code>方法功能类似，都是用来修改一个对象的默认打印内容。在打印一个对象时，如果没有重写<code>__str__</code>方法，它会自动来查找<code>__repr__</code>方法。如果这两个方法都没有，会直接打印这个对象的内存地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;helllo&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hi&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;good&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&#x27;lisi&#x27;</span>, <span class="number">95</span>)</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># hello</span></span><br><span class="line"></span><br><span class="line">p = Person()</span><br><span class="line"><span class="built_in">print</span>(p)  <span class="comment"># good</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h3 id="5-call-方法"><a href="#5-call-方法" class="headerlink" title="5. __call__方法"></a>5. __call__方法</h3><p>对象后面加括号，触发执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__call__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()  <span class="comment"># 执行 __init__</span></span><br><span class="line">obj()  <span class="comment"># 执行 __call__</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>当创建一个对象时，会自动调用<code>__init__</code>方法，当删除一个对象时，会自动调用<code>__del__</code>方法。</li><li>使用<code>__str__</code>和<code>__repr__</code>方法，都会修改一个对象转换成为字符串的结果。一般来说，<code>__str__</code>方法的结果更加在意可读性，而<code>__repr__</code>方法的结果更加在意正确性(例如:datetime模块里的datetime类)</li></ol>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python类和对象</title>
      <link href="/2022/04/28/study/python/python%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/04/28/study/python/python%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p><strong>类</strong>和<strong>对象</strong>是面向对象编程的两个核心概念。</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类是对一群具有相同特征或者行为 的事物的一个统称，是抽象的，不能直接使用</p><ul><li>特征其实就是一个变量，在类里我们称之为属性。</li><li>行为其实就是一个函数，在类里我们称之为方法。</li><li>类其实就是由 <strong>属性</strong> 和 <strong>方法</strong> 组成的一个抽象概念。</li></ul><p>类就相当于制造飞机时的图纸，是一个模板。这个模板只规定了飞机的某些特征(例如大小，颜色，型号等等)和行为(例如起飞，降落，飞行等等)，它并不是一个具体的飞机，而是对飞机的一个抽象概念。它出现的目的，是为了让我们的创建飞机对象。</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象是由类创建出来的一个具体存在，可以直接使用。由哪一个类创建出来的 对象，就拥有在哪一个类中定义的属性和方法。 <strong>对象</strong> 就相当于用图纸制造的飞机。在开发中，应该先有类，在类里定义好属性和行为，再根据类来创建对象。</p><h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><ul><li>类是模板，对象是根据类这个模板创建出来的，应该先有类，再有对象。</li><li>使用同一个类，能够创建出很多对象。</li><li>类中定义了什么属性和方法，对象中就有什么属性和方法。</li><li>不同对象对应的属性值也会不同。</li></ul><h3 id="定义简单的类（只包含方法）"><a href="#定义简单的类（只包含方法）" class="headerlink" title="定义简单的类（只包含方法）"></a>定义简单的类（只包含方法）</h3><blockquote><p>面向对象是更大的封装，在一个类中封装多个方法，这样通过这个类创建出来的对象，就可以直接调用这些方法了！</p></blockquote><h4 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h4><p>在Python中要定义一个只包含方法的类，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">方法1</span>(<span class="params">self,参数列表</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">方法2</span>(<span class="params">self,参数列表</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><blockquote><ol><li>方法的定义格式和之前学习过的函数一样</li><li>方法里的<strong>第一个参数必须是self</strong>，大家暂时先记住，稍后介绍 self.</li><li>类名要遵守大驼峰命名法。</li></ol></blockquote><h4 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h4><p>当一个类定义完成之后，要使用这个类来创建对象，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象变量名 = 类名()</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="第一个面向对象代码"><a href="#第一个面向对象代码" class="headerlink" title="第一个面向对象代码"></a>第一个面向对象代码</h4><p>需求</p><ul><li>小猫 爱 吃 鱼，小猫 要 喝 水</li></ul><p>分析</p><ul><li>定义一个猫类 Cat</li><li>定义两个方法 eat 和 drink</li><li>按照需求 —— 不需要定义属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是个猫类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫在吃东西&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫在喝水&quot;</span>)</span><br><span class="line"></span><br><span class="line">tom = Cat()  <span class="comment"># 创建了一个Cat对象</span></span><br><span class="line">tom.eat()</span><br><span class="line">tom.drink()</span><br><span class="line"></span><br><span class="line">hello_kitty = Cat()  <span class="comment"># 又创建了一个新的Cat对象</span></span><br><span class="line">hello_kitty.eat()</span><br><span class="line">hello_kitty.drink()</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>思考：<code>tom</code> 和 <code>hello_kitty</code> 是同一个对象吗？</p><h3 id="self的使用"><a href="#self的使用" class="headerlink" title="self的使用"></a>self的使用</h3><h4 id="给对象添加属性"><a href="#给对象添加属性" class="headerlink" title="给对象添加属性"></a>给对象添加属性</h4><p>python支持动态属性，当一个对象创建好了以后，直接使用 <code>对象.属性名 = 属性值</code> 就可以很方便的给对象添加一个属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tom = Cat()</span><br><span class="line">tom.name = <span class="string">&#x27;Tom&#x27;</span>  <span class="comment"># 可以直接给 tom 对象添加一个 name 属性</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>这种方法很方便，但是，不建议使用这种方式给对象添加属性。</p><h4 id="self的概念"><a href="#self的概念" class="headerlink" title="self的概念"></a>self的概念</h4><p>哪个对象调用了方法，方法里的<code>self</code>指的就是谁。 通过 <code>self.属性名</code> 可以访问到这个对象的属性；通过 <code>self.方法名()</code> 可以调用这个对象的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s爱吃鱼&quot;</span> %self.name)</span><br><span class="line"></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.name = <span class="string">&#x27;Tom&#x27;</span>  <span class="comment"># 给 tom 对象添加了一个name属性</span></span><br><span class="line">tom.eat()  <span class="comment"># Tom爱吃鱼</span></span><br><span class="line"></span><br><span class="line">lazy_cat = Cat()</span><br><span class="line">lazy_cat.name = <span class="string">&quot;大懒猫&quot;</span></span><br><span class="line">lazy_cat.eat() <span class="comment"># 大懒猫爱吃鱼</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="直接给对象添加属性的缺点"><a href="#直接给对象添加属性的缺点" class="headerlink" title="直接给对象添加属性的缺点"></a>直接给对象添加属性的缺点</h4><p>上述代码中，我们是先创建对象，然后再给对象添加 <code>name</code> 属性，但是这样做会有问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tom = Cat()</span><br><span class="line">tom.eat()</span><br><span class="line">tom.anme = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>程序运行时会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: <span class="string">&#x27;Cat&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;name&#x27;</span></span><br><span class="line">错误提示：<span class="string">&#x27;Cat&#x27;</span>对象没有 <span class="string">&#x27;name&#x27;</span> 属性</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>不推荐在类的外部直接给对象添加属性这种方式。对象应该具有哪些属性，我们应该封装在类的内部。</p><h2 id="私有属性和方法"><a href="#私有属性和方法" class="headerlink" title="私有属性和方法"></a>私有属性和方法</h2><p>在实际开发中，对象的某些属性或者方法可能只希望在对象的内部别使用，而不希望在外部被访问到，这时就可以定义私有属性和私有方法。</p><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p>在定义属性或方法时，在属性名或者方法名前增加两个下划线<code>__</code>，定义的就是私有属性或方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__money = <span class="number">2000</span>  <span class="comment"># 使用 __ 修饰的属性，是私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__shopping</span>(<span class="params">self, cost</span>):</span><br><span class="line">        self.__money -= cost  <span class="comment"># __money 只能在对象内部使用</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;还剩下%d元&#x27;</span>%self.__money)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        self.__shopping(<span class="number">200</span>)  <span class="comment"># __shopping 方法也只能在对象内部使用</span></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="comment"># print(p.__money)   这里会报错，不能直接访问对象内部的私有属性</span></span><br><span class="line">p.test()</span><br><span class="line"><span class="comment"># p.__shopping()  这里会报错，__shopping 只能在对象内部使用，外部无法访问</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h3 id="访问私有属性和方法"><a href="#访问私有属性和方法" class="headerlink" title="访问私有属性和方法"></a>访问私有属性和方法</h3><p>私有属性不能直接使用，私有方法不能直接调用。但是，通过一些代码，我们也可以在外部访问一个对象的私有属性和方法。</p><h4 id="直接访问"><a href="#直接访问" class="headerlink" title="直接访问"></a>直接访问</h4><p>使用方式:在私有属性名或方法名前添加 <code>_类名</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__money = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__shopping</span>(<span class="params">self, cost</span>):</span><br><span class="line">        self.__money -= cost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;李四&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(p._Person__money)  <span class="comment"># 使用对象名._类名__私有属性名 可以直接访问对象的私有属性</span></span><br><span class="line">p._Person__shopping(<span class="number">100</span>)  <span class="comment"># 使用对象名._类名__函数名 可以直接调用对象的私有方法</span></span><br><span class="line"><span class="built_in">print</span>(p._Person__money)</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>注意：在开发中，我们强烈不建议使用 <code>对象名._类名__私有属性名</code> 的方式来访问对象的私有属性！</p><h4 id="定义方法访问私有变量"><a href="#定义方法访问私有变量" class="headerlink" title="定义方法访问私有变量"></a>定义方法访问私有变量</h4><p>在实际开发中，如果对象的变量使用了<code>__</code> 来修饰，就说明它是一个私有变量，不建议外部直接使用和修改。如果硬要修改这个属性，可以使用定义<code>get</code>和<code>set</code>方法这种方式来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__money = <span class="number">2000</span>  <span class="comment"># __money 是私有变量，外部无法访问</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_money</span>(<span class="params">self</span>):  <span class="comment"># 定义了get_money 方法，在这个方法里获取到 __money</span></span><br><span class="line">        <span class="keyword">return</span> self.__money  <span class="comment"># 内部可以访问 __money 变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_money</span>(<span class="params">self,money</span>): <span class="comment"># 定义了set_money 方法，在这个方法里，可以修改 __money</span></span><br><span class="line">        self.__money = money</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;王五&#x27;</span>,<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外部通过调用 get_money 和 set_money 这两个公开方法获取和修改私有变量</span></span><br><span class="line"><span class="built_in">print</span>(p.get_money())</span><br><span class="line">p.set_money(<span class="number">8000</span>)</span><br><span class="line"><span class="built_in">print</span>(p.get_money())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python函数高级</title>
      <link href="/2022/04/26/study/python/python%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
      <url>/2022/04/26/study/python/python%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="函数高级"><a href="#函数高级" class="headerlink" title="函数高级"></a>函数高级</h2><p>函数高级主要介绍以下内容：</p><ul><li>局部变量和全局变量</li><li>不定长参数的使用</li><li>多个返回值</li><li>缺省参数</li><li>可变类型和不可变类型的使用</li></ul><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ul><li>局部变量，就是在函数内部定义的变量</li><li>其作用范围是这个函数内部，即只能在这个函数中使用，在函数的外部是不能使用的</li><li>因为其作用范围只是在自己的函数内部，所以不同的函数可以定义相同名字的局部变量（打个比方，把你、我是当做成函数，把局部变量理解为每个人手里的手机，你可有个iPhone8，我当然也可以有个iPhone8了， 互不相关）</li><li>局部变量的作用，为了临时保存数据需要在函数中定义变量来进行存储</li><li>当函数调用时，局部变量被创建，当函数调用完成后这个变量就不能够使用了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义局部变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">test1()  <span class="comment"># 100</span></span><br><span class="line">test2()  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>如果一个变量，既能在一个函数中使用，也能在其他的函数中使用，这样的变量就是全局变量</p><p>打个比方：有2个兄弟 各自都有手机，各自有自己的小秘密在手机里，不让另外一方使用（可以理解为局部变量）；但是家里的电话是2个兄弟都可以随便使用的（可以理解为全局变量）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 虽然没有定义变量a但是依然可以获取其数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 虽然没有定义变量a但是依然可以获取其数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">test1()  <span class="comment"># 100</span></span><br><span class="line">test2()  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><ul><li><p>当函数内出现局部变量和全局变量相同名字时，函数内部中的 <code>变量名 = 数据</code> 此时理解为定义了一个局部变量，而不是修改全局变量的值</p></li><li><p>如果在函数中出现<code>global 全局变量的名字</code> 那么这个函数中即使出现和全局变量名相同的<code>变量名 = 数据</code> 也理解为对全局变量进行修改，而不是定义局部变量</p></li><li><p>如果在一个函数中需要对多个全局变量进行修改，那么可以一次性全部声明，也可以分开声明</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以使用一次global对多个全局变量进行声明</span></span><br><span class="line"><span class="keyword">global</span> a, b</span><br><span class="line"><span class="comment"># 还可以用多次global声明都是可以的</span></span><br><span class="line"><span class="comment"># global a</span></span><br><span class="line"><span class="comment"># global b</span></span><br></pre></td></tr></table></figure><h3 id="函数返回值问题"><a href="#函数返回值问题" class="headerlink" title="函数返回值问题"></a>函数返回值问题</h3><ul><li><p>一个函数中可以有多个return语句，但是只要有一个return语句被执行到，那么这个函数就会结束了，因此后面的return没有什么用处</p></li><li><p>如果程序设计为如下，是可以的因为不同的场景下执行不同的return</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_nums</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---1---&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">100</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---2---&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> num+<span class="number">1</span>  <span class="comment"># 函数中下面的代码不会被执行，因为return除了能够将数据返回之外，还有一个隐藏的功能：结束函数</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---3---&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> num+<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---4---&quot;</span>)</span><br><span class="line">  </span><br><span class="line">result1 = create_nums(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(result1)  <span class="comment"># 打印101</span></span><br><span class="line">result2 = create_nums(<span class="number">200</span>)</span><br><span class="line"><span class="built_in">print</span>(result2)  <span class="comment"># 打印202</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数参数详解"><a href="#函数参数详解" class="headerlink" title="函数参数详解"></a>函数参数详解</h3><h4 id="一、缺省参数"><a href="#一、缺省参数" class="headerlink" title="一、缺省参数"></a>一、缺省参数</h4><p>调用函数时，缺省参数的值如果没有传入，则取默认值。</p><p>下例会打印默认的age，如果age没有被传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">name, age=<span class="number">35</span></span>):</span><br><span class="line">   <span class="comment"># 打印任何传入的字符串</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;name: %s&quot;</span> % name)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;age %d&quot;</span> % age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用printinfo函数</span></span><br><span class="line">printinfo(name=<span class="string">&quot;miki&quot;</span>)  <span class="comment"># 在函数执行过程中 age取默认值35</span></span><br><span class="line">printinfo(age=<span class="number">9</span> ,name=<span class="string">&quot;miki&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name: miki</span><br><span class="line">age: <span class="number">35</span></span><br><span class="line">name: miki</span><br><span class="line">age: <span class="number">9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li><p>在形参中默认有值的参数，称之为缺省参数</p></li><li><p>注意：带有默认值的参数一定要位于参数列表的最后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params">name, age=<span class="number">35</span>, sex</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> name</span><br><span class="line">...</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: non-default argument follows default argument</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h4 id="二、不定长参数"><a href="#二、不定长参数" class="headerlink" title="二、不定长参数"></a>二、不定长参数</h4><p>有时可能需要一个函数能处理比当初声明时更多的参数, 这些参数叫做不定长参数，声明时不会命名。</p><p>基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">[formal_args,] *args, **kwargs</span>):</span><br><span class="line">   <span class="string">&quot;&quot;&quot;函数_文档字符串&quot;&quot;&quot;</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>加了星号（*）的变量args会存放所有未命名的变量参数，args为元组</li><li>而加**的变量kwargs会存放命名参数，即形如key=value的参数， kwargs为字典.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a, b, *args, **kwargs</span>):</span><br><span class="line">      <span class="string">&quot;函数在声明时，需要两个参数&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a=&#123;&#125;,b=&#123;&#125;,args=&#123;&#125;,kwargs=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a,b,args,kwargs))</span><br><span class="line"></span><br><span class="line">test(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;你好&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>, <span class="string">&#x27;how do you do&#x27;</span>, name=<span class="string">&quot;zhangsan&quot;</span>, age=<span class="number">18</span>)</span><br><span class="line"><span class="comment"># a=2,b=3,args=(&#x27;你好&#x27;, &#x27;hi&#x27;, &#x27;how do you do&#x27;),kwargs=&#123;&#x27;name&#x27;: &#x27;zhangsan&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = (<span class="string">&#x27;hi&#x27;</span>, <span class="string">&#x27;大家好&#x27;</span>, <span class="string">&#x27;今天天气真好&#x27;</span>)</span><br><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">19</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意，在传入参数时的星号问题。</span></span><br><span class="line">test(<span class="number">10</span>, <span class="number">20</span>, *b, **d) </span><br><span class="line"><span class="comment"># a=10,b=20,args=(&#x27;hi&#x27;, &#x27;大家好&#x27;, &#x27;今天天气真好&#x27;),kwargs=&#123;&#x27;name&#x27;: &#x27;zhangsan&#x27;, &#x27;age&#x27;: 19&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果在传值时，不使用星号，会把后面的参数当做 args</span></span><br><span class="line">test(<span class="number">10</span>,<span class="number">20</span>,b,d)</span><br><span class="line"><span class="comment"># a=10,b=20,args=((&#x27;hi&#x27;, &#x27;大家好&#x27;, &#x27;今天天气真好&#x27;), &#123;&#x27;name&#x27;: &#x27;zhangsan&#x27;, &#x27;age&#x27;: 19&#125;),kwargs=&#123;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三、缺省参数在-args后面"><a href="#三、缺省参数在-args后面" class="headerlink" title="三、缺省参数在*args后面"></a>三、缺省参数在*args后面</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_nums_3</span>(<span class="params">a, *args, b=<span class="number">22</span>, c=<span class="number">33</span>, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">sum_nums_3(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>, <span class="number">700</span>, b=<span class="number">1</span>, c=<span class="number">2</span>, mm=<span class="number">800</span>, nn=<span class="number">900</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ul><li>如果很多个值都是不定长参数，那么这种情况下，可以将缺省参数放到 <em>args的后面， 但如果有*kwargs的话，</em>kwargs必须是最后的</li></ul><h3 id="可变、不可变类型"><a href="#可变、不可变类型" class="headerlink" title="可变、不可变类型"></a>可变、不可变类型</h3><ul><li>所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变</li><li>可变类型(修改数据，内存地址不会发生变化)有： 列表、字典、集合</li><li>不可变类型(修改数据，内存地址必定发生变化)有： 数字、字符串、元组</li></ul>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python函数</title>
      <link href="/2022/04/23/study/python/python%E5%87%BD%E6%95%B0/"/>
      <url>/2022/04/23/study/python/python%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="函数定义和调用"><a href="#函数定义和调用" class="headerlink" title="函数定义和调用"></a>函数定义和调用</h2><h3 id="一、定义函数"><a href="#一、定义函数" class="headerlink" title="一、定义函数"></a>一、定义函数</h3><p>定义函数的格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">    代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数，能够完成打印信息的功能</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printInfo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;         test&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、调用函数"><a href="#二、调用函数" class="headerlink" title="二、调用函数"></a>二、调用函数</h3><p>定义了函数之后，就相当于有了一个具有某些功能的代码，想要让这些代码能够执行，需要调用它</p><p>调用函数很简单的，通过 <strong>函数名()</strong> 即可完成调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义完函数后，函数是不会自动执行的，需要调用它才可以</span></span><br><span class="line">printInfo()</span><br></pre></td></tr></table></figure><h3 id="三、注意"><a href="#三、注意" class="headerlink" title="三、注意:"></a>三、注意:</h3><ul><li>函数定义好以后，函数体里的代码并不会执行，如果想要执行函数体里的内容，需要手动的调用函数。</li><li>每次调用函数时，函数都会从头开始执行，当这个函数中的代码执行完毕后，意味着调用结束了。</li><li>当然了如果函数中执行到了return也会结束函数。</li></ul><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>定义一个add2num(a, b)函数，来计算任意两个数字之和:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add2num</span>(<span class="params">a, b</span>):</span><br><span class="line">    c = a+b</span><br><span class="line">    <span class="built_in">print</span> c</span><br><span class="line"></span><br><span class="line">add2num(<span class="number">11</span>, <span class="number">22</span>) <span class="comment"># 调用带有参数的函数时，需要在小括号中，传递数据</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>在定义函数的时候，小括号里写等待赋值的变量名</li><li>在调用函数的时候，小括号里写真正要进行运算的数据</li></ul><h3 id="调用函数时参数的顺序"><a href="#调用函数时参数的顺序" class="headerlink" title="调用函数时参数的顺序"></a>调用函数时参数的顺序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a,b</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment"># 位置参数</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(b=<span class="number">1</span>,a=<span class="number">2</span>)  <span class="comment"># 关键字参数</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(b=<span class="number">1</span>,<span class="number">2</span>)  <span class="comment"># 关键字参数写在位置参数之前会导致出错</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br></pre></td></tr></table></figure><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><ul><li>所谓“返回值”，就是程序中函数完成一件事情后，最后给调用者的结果</li><li><strong>使用返回值的前提需求就是函数调用者想要在函数外使用计算结果</strong></li></ul><h3 id="带有返回值的函数"><a href="#带有返回值的函数" class="headerlink" title="带有返回值的函数"></a>带有返回值的函数</h3><p>想要在函数中把结果返回给调用者，需要在函数中使用return</p><p>如下示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add2num</span>(<span class="params">a, b</span>):</span><br><span class="line">    c = a+b</span><br><span class="line">    <span class="keyword">return</span> c  <span class="comment"># return 后可以写变量名</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add2num</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b  <span class="comment"># return 后可以写计算表达式</span></span><br></pre></td></tr></table></figure><h3 id="保存函数的返回值"><a href="#保存函数的返回值" class="headerlink" title="保存函数的返回值"></a>保存函数的返回值</h3><p>保存函数的返回值示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add2num</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数，顺便保存函数的返回值</span></span><br><span class="line">result = add2num(<span class="number">100</span>,<span class="number">98</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为result已经保存了add2num的返回值，所以接下来就可以使用了</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">198</span></span><br></pre></td></tr></table></figure><h2 id="函数的文档说明"><a href="#函数的文档说明" class="headerlink" title="函数的文档说明"></a>函数的文档说明</h2><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a,b</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="string">&quot;用来完成对2个数求和&quot;</span>  <span class="comment"># 函数第一行写一个字符串作为函数文档</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span>%(a+b))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">11</span>,<span class="number">22</span>)  <span class="comment"># 函数可以正常调用</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(test)  <span class="comment"># 使用 help 查看test函数的文档说明</span></span><br><span class="line">Help on function test <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">test(a, b)</span><br><span class="line">    用来完成对<span class="number">2</span>个数求和</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-高级使用"><a href="#2-高级使用" class="headerlink" title="2.高级使用"></a>2.高级使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_info</span>(<span class="params">name: <span class="built_in">str</span>, age: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    接收用户的名字和年龄，拼接一个字符串并返回</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: 接收一个名字</span></span><br><span class="line"><span class="string">    :param age: 接收用户的年龄，必须是 0-200 间的一个整数</span></span><br><span class="line"><span class="string">    :return: 返回拼接好的字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我的名字叫 %s，今年是 %d 岁&quot;</span> % (name, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_info(<span class="string">&quot;吴彦祖&quot;</span>, <span class="number">19</span>)</span><br><span class="line">get_info(<span class="number">520</span>, <span class="number">19</span>)  <span class="comment"># 注意，形参上标注的类型只是提高代码的可读性，并不会限制实参的类型</span></span><br><span class="line"><span class="built_in">help</span>(get_info)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">testB</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testB start----&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这里是testB函数执行的代码...(省略)...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testB end----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testA</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testA start----&#x27;</span>)</span><br><span class="line">    testB()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testA end----&#x27;</span>)</span><br><span class="line"></span><br><span class="line">testA()</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---- testA start----</span><br><span class="line">---- testB start----</span><br><span class="line">这里是testB函数执行的代码...(省略)...</span><br><span class="line">---- testB end----</span><br><span class="line">---- testA end----</span><br></pre></td></tr></table></figure><ul><li>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次 函数A执行的位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python赋值运算符</title>
      <link href="/2022/04/20/study/python/python%E9%9B%86%E5%90%88/"/>
      <url>/2022/04/20/study/python/python%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="set的使用"><a href="#set的使用" class="headerlink" title="set的使用"></a>set的使用</h1><p>集合（set）是一个<strong>无序的不重复元素</strong>序列，可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合。</p><p><strong>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</strong></p><p>创建格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">set</span>(value)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><p><strong>语法格式如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;thisset = <span class="built_in">set</span>((<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Taobao&quot;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thisset.add(<span class="string">&quot;Facebook&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(thisset)</span><br><span class="line">&#123;<span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.update( x )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>x 可以有多个，用逗号分开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;thisset = <span class="built_in">set</span>((<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Taobao&quot;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thisset.update(&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(thisset)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thisset.update([<span class="number">1</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>])  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(thisset)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><p>语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.remove( x )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;thisset = <span class="built_in">set</span>((<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Taobao&quot;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thisset.remove(<span class="string">&quot;Taobao&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(thisset)</span><br><span class="line">&#123;<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thisset.remove(<span class="string">&quot;Facebook&quot;</span>)   <span class="comment"># 不存在会发生错误</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;Facebook&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s.discard( x )</span><br><span class="line">Copy</span><br><span class="line">&gt;&gt;&gt;thisset = <span class="built_in">set</span>((<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Taobao&quot;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thisset.discard(<span class="string">&quot;Facebook&quot;</span>)  <span class="comment"># 不存在不会发生错误</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(thisset)</span><br><span class="line">&#123;<span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们也可以设置随机删除集合中的一个元素，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s.pop()</span><br><span class="line"></span><br><span class="line">thisset = <span class="built_in">set</span>((<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Taobao&quot;</span>, <span class="string">&quot;Facebook&quot;</span>))</span><br><span class="line">x = thisset.pop()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="set常见方法列表"><a href="#set常见方法列表" class="headerlink" title="set常见方法列表"></a>set常见方法列表</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>为集合添加元素</td></tr><tr><td>clear()</td><td>移除集合中的所有元素</td></tr><tr><td>copy()</td><td>拷贝一个集合</td></tr><tr><td>pop()</td><td>随机移除元素</td></tr><tr><td>remove()</td><td>移除指定元素</td></tr><tr><td>union</td><td>返回两个集合的并集</td></tr><tr><td>update()</td><td>给集合添加元素</td></tr><tr><td>difference()</td><td>返回多个集合的差集</td></tr><tr><td>difference_update()</td><td>移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td>discard()</td><td>删除集合中指定的元素</td></tr><tr><td>intersection()</td><td>返回集合的交集</td></tr><tr><td>intersection_update()</td><td>删除集合中的元素，该元素在指定的集合中不存在。</td></tr><tr><td>isdisjoint()</td><td>判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td>issubset()</td><td>判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td>issuperset()</td><td>判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td>symmetric_difference()</td><td>返回两个集合中不重复的元素集合。</td></tr><tr><td>symmetric_difference_update()</td><td>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python字典</title>
      <link href="/2022/04/18/study/python/python%E5%AD%97%E5%85%B8/"/>
      <url>/2022/04/18/study/python/python%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="字典介绍"><a href="#字典介绍" class="headerlink" title="字典介绍"></a>字典介绍</h1><h2 id="一、列表的缺点"><a href="#一、列表的缺点" class="headerlink" title="一、列表的缺点"></a>一、列表的缺点</h2><p>当存储的数据要动态添加、删除的时候，我们一般使用列表，但是列表有时会遇到一些麻烦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个列表保存，姓名、性别、职业</span></span><br><span class="line">nameList = [<span class="string">&#x27;xiaoZhang&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;木匠&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当修改职业的时候，需要记忆元素的下标</span></span><br><span class="line">nameList[<span class="number">2</span>] = <span class="string">&#x27;铁匠&#x27;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果列表的顺序发生了变化，添加年龄</span></span><br><span class="line">nameList = [<span class="string">&#x27;xiaoWang&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>,  <span class="string">&#x27;铁匠&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时就需要记忆新的下标，才能完成名字的修改</span></span><br><span class="line">nameList[<span class="number">3</span>] = <span class="string">&#x27;xiaoxiaoWang&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、字典的使用"><a href="#二、字典的使用" class="headerlink" title="二、字典的使用"></a>二、字典的使用</h2><p>定义字典的格式：**{键1:值1, 键2:值2, 键3:值3, …, 键n:值n}**</p><p>变量info为字典类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;班长&#x27;</span>, <span class="string">&#x27;id&#x27;</span>:<span class="number">100</span>, <span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;address&#x27;</span>:<span class="string">&#x27;地球亚洲中国上海&#x27;</span>&#125;</span><br><span class="line">info[<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 字典使用键来获取对应的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>字典和列表一样，也能够存储多个数据</li><li>列表中找某个元素时，是根据下标进行的；字典中找某个元素时，是根据’名字’（就是冒号:前面的那个值，例如上面代码中的’name’、’id’、’sex’）</li><li>字典的每个元素由2部分组成，键:值。例如 ‘name’:’班长’ ,’name’为键，’班长’为值</li><li>键可以使用数字、布尔值、布尔值、元组等<strong>不可变数据类型</strong>，但是一般习惯使用字符串</li><li><strong>每个字典里的key都是唯一的，如果出现了多个key,后面的value会覆盖前一个key对应的value.</strong></li></ul><p>在习惯上：</p><ul><li>列表更适合保存多个商品、多个姓名、多个时间，这样的相似数据；</li><li>字典更适合保存一个商品的不同信息、一个人的不同信息，这样的不同数据。</li></ul><h3 id="一、查看元素"><a href="#一、查看元素" class="headerlink" title="一、查看元素"></a>一、查看元素</h3><p>除了使用key查找数据，还可以使用get来获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;班长&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(info[<span class="string">&#x27;age&#x27;</span>]) <span class="comment"># 获取年龄</span></span><br><span class="line"><span class="comment"># print(info[&#x27;sex&#x27;]) # 获取不存在的key，会发生异常</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(info.get(<span class="string">&#x27;sex&#x27;</span>)) <span class="comment"># 获取不存在的key，获取到空的内容，不会出现异常</span></span><br><span class="line"><span class="built_in">print</span>(info.get(<span class="string">&#x27;sex&#x27;</span>， <span class="string">&#x27;男&#x27;</span>))  <span class="comment"># 获取不存在的key, 可以提供一个默认值。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，获取默认值不会修改字典内容。</p><h3 id="二、修改元素"><a href="#二、修改元素" class="headerlink" title="二、修改元素"></a>二、修改元素</h3><p>字典的每个元素中的数据是可以修改的，只要通过key找到，即可修改</p><p>demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;班长&#x27;</span>, <span class="string">&#x27;id&#x27;</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改之前的字典为 %s:&#x27;</span> % info)</span><br><span class="line"></span><br><span class="line">info[<span class="string">&#x27;id&#x27;</span>] = <span class="number">200</span>  <span class="comment"># 为已存在的键赋值就是修改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改之后的字典为 %s:&#x27;</span> % info)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改之前的字典为 &#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 100&#125;</span><br><span class="line">修改之后的字典为 &#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 200&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、添加元素"><a href="#三、添加元素" class="headerlink" title="三、添加元素"></a>三、添加元素</h3><p>如果在使用 <strong>变量名[‘键’] = 数据</strong> 时，这个“键”在字典中，不存在，那么就会新增这个元素</p><p>demo:添加新的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;班长&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;添加之前的字典为:%s&#x27;</span> % info)</span><br><span class="line"></span><br><span class="line">info[<span class="string">&#x27;id&#x27;</span>] = <span class="number">100</span>  <span class="comment"># 为不存在的键赋值就是添加元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;添加之后的字典为:%s&#x27;</span> % info)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加之前的字典为:&#123;&#x27;name&#x27;: &#x27;班长&#x27;&#125;</span><br><span class="line">添加之后的字典为:&#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 100&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、删除元素"><a href="#四、删除元素" class="headerlink" title="四、删除元素"></a>四、删除元素</h3><p>对字典进行删除操作，有一下几种：</p><ul><li>del</li><li>clear()</li></ul><p>demo:del删除指定的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;班长&#x27;</span>, <span class="string">&#x27;id&#x27;</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除前,%s&#x27;</span> % info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> info[<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># del 可以通过键删除字典里的指定元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除后,%s&#x27;</span> % info)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">删除前,&#123;&#x27;name&#x27;: &#x27;班长&#x27;, &#x27;id&#x27;: 100&#125;</span><br><span class="line">删除后,&#123;&#x27;id&#x27;: 100&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>del删除整个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除前,%s&#x27;</span>%info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> info  <span class="comment"># del 也可以直接删除变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除后,%s&#x27;</span>%info)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除前,&#123;&#x27;name&#x27;: &#x27;monitor&#x27;, &#x27;id&#x27;: 100&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &#x27;info&#x27; is not defined</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>clear清空整个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;monitor&#x27;</span>, <span class="string">&#x27;id&#x27;</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;清空前,%s&#x27;</span>%info)</span><br><span class="line"></span><br><span class="line">info.clear()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;清空后,%s&#x27;</span>%info)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">清空前,&#123;&#x27;name&#x27;: &#x27;monitor&#x27;, &#x27;id&#x27;: 100&#125;</span><br><span class="line">清空后,&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="字典遍历"><a href="#字典遍历" class="headerlink" title="字典遍历"></a>字典遍历</h2><h4 id="lt-1-gt-遍历字典的key（键）"><a href="#lt-1-gt-遍历字典的key（键）" class="headerlink" title="&lt;1&gt; 遍历字典的key（键）"></a>&lt;1&gt; 遍历字典的key（键）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> a:</span><br><span class="line">       <span class="built_in">print</span>(key+<span class="string">&#x27;:&#x27;</span>+a[key])</span><br><span class="line"> </span><br><span class="line">a:<span class="number">1</span></span><br><span class="line">b:<span class="number">2</span></span><br><span class="line">c:<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> a.keys():</span><br><span class="line">       <span class="built_in">print</span>(key+<span class="string">&#x27;:&#x27;</span>+a[key])</span><br><span class="line"> </span><br><span class="line">a:<span class="number">1</span></span><br><span class="line">b:<span class="number">2</span></span><br><span class="line">c:<span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="lt-2-gt-遍历字典的value（值）"><a href="#lt-2-gt-遍历字典的value（值）" class="headerlink" title="&lt;2&gt; 遍历字典的value（值）"></a>&lt;2&gt; 遍历字典的value（值）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> value <span class="keyword">in</span> a.values():</span><br><span class="line">       <span class="built_in">print</span>(value)</span><br><span class="line"> </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="lt-3-gt-遍历字典的项（元素）"><a href="#lt-3-gt-遍历字典的项（元素）" class="headerlink" title="&lt;3&gt; 遍历字典的项（元素）"></a>&lt;3&gt; 遍历字典的项（元素）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for kv in a.items():</span><br><span class="line">       print(kv)</span><br><span class="line">(&#x27;a&#x27;, &#x27;1&#x27;)</span><br><span class="line">(&#x27;b&#x27;, &#x27;2&#x27;)</span><br><span class="line">(&#x27;c&#x27;, &#x27;3&#x27;)</span><br></pre></td></tr></table></figure><h4 id="lt-4-gt-遍历字典的key-value（键值对）"><a href="#lt-4-gt-遍历字典的key-value（键值对）" class="headerlink" title="&lt;4&gt; 遍历字典的key-value（键值对）"></a>&lt;4&gt; 遍历字典的key-value（键值对）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for key,value in a.items():</span><br><span class="line">       print(key+&#x27;:&#x27;+value)</span><br><span class="line"> </span><br><span class="line">a:1</span><br><span class="line">b:2</span><br><span class="line">c:3</span><br><span class="line">&gt;&gt;&gt; for (key,value) in a.items():</span><br><span class="line">       print(key+&#x27;:&#x27;+value)</span><br><span class="line"> </span><br><span class="line">a:1</span><br><span class="line">b:2</span><br><span class="line">c:3</span><br></pre></td></tr></table></figure><h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用代码，将字典的key和value互换</span></span><br><span class="line">dict1 = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">100</span>, <span class="string">&quot;b&quot;</span>: <span class="number">200</span>, <span class="string">&quot;c&quot;</span>: <span class="number">300</span>&#125;</span><br><span class="line">dict2 = &#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> dict1.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br><span class="line">&#123;<span class="number">100</span>:<span class="string">&quot;a&quot;</span>,<span class="number">200</span>:<span class="string">&quot;b&quot;</span>,<span class="number">300</span>:<span class="string">&quot;c&quot;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python列表</title>
      <link href="/2022/04/12/study/python/python%E5%88%97%E8%A1%A8/"/>
      <url>/2022/04/12/study/python/python%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="列表的介绍"><a href="#列表的介绍" class="headerlink" title="列表的介绍"></a>列表的介绍</h2><h3 id="一、列表的格式"><a href="#一、列表的格式" class="headerlink" title="一、列表的格式"></a>一、列表的格式</h3><p>定义列的格式：<code>[元素1, 元素2, 元素3, ..., 元素n]</code></p><p>变量tmp的类型为列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmp = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="number">180</span>, <span class="number">65.0</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>列表中的元素可以是不同类型的</strong></p><h3 id="二、使用下标获取列表元素"><a href="#二、使用下标获取列表元素" class="headerlink" title="二、使用下标获取列表元素"></a>二、使用下标获取列表元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">namesList = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="string">&#x27;xiaoZhang&#x27;</span>,<span class="string">&#x27;xiaoHua&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(namesList[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(namesList[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(namesList[<span class="number">2</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xiaoWang</span><br><span class="line">xiaoZhang</span><br><span class="line">xiaoHua</span><br></pre></td></tr></table></figure><h2 id="列表的数据操作"><a href="#列表的数据操作" class="headerlink" title="列表的数据操作"></a>列表的数据操作</h2><p>我们对于可变数据（例如，列表，数据库等）的操作，一般包含增、删、改、查四个方面。</p><h3 id="一、添加元素"><a href="#一、添加元素" class="headerlink" title="一、添加元素"></a>一、添加元素</h3><p>添加元素有一下几个方法:</p><ul><li>append 在末尾添加元素</li><li>insert 在指定位置插入元素</li><li>extend 合并两个列表</li></ul><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p>append会把新元素添加到列表末尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量A，默认有3个元素</span></span><br><span class="line">A = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="string">&#x27;xiaoZhang&#x27;</span>,<span class="string">&#x27;xiaoHua&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----添加之前，列表A的数据-----A=%s&quot;</span> % A)</span><br><span class="line"></span><br><span class="line"><span class="comment">#提示、并添加元素</span></span><br><span class="line">temp = <span class="built_in">input</span>(<span class="string">&#x27;请输入要添加的学生姓名:&#x27;</span>)</span><br><span class="line">A.append(temp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----添加之后，列表A的数据-----A=%s&quot;</span> % A)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p>insert(index, object) 在指定位置index前插入元素object</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strs = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">strs.insert(<span class="number">3</span>,<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(strs)  <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;h&#x27;, &#x27;s&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h4><p>通过extend可以将另一个集合中的元素逐一添加到列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">b = [<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;] 将 b 添加到 a 里</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;] b的内容不变</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、修改元素"><a href="#二、修改元素" class="headerlink" title="二、修改元素"></a>二、修改元素</h3><p>我们是通过指定下标来访问列表元素，因此修改元素的时候，为指定的列表下标赋值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量A，默认有3个元素</span></span><br><span class="line">A = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="string">&#x27;xiaoZhang&#x27;</span>,<span class="string">&#x27;xiaoHua&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----修改之前，列表A的数据-----A=%s&quot;</span> % A)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改元素</span></span><br><span class="line">A[<span class="number">1</span>] = <span class="string">&#x27;xiaoLu&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----修改之后，列表A的数据-----A=%s&quot;</span> % A)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、查找元素"><a href="#三、查找元素" class="headerlink" title="三、查找元素"></a>三、查找元素</h3><p>所谓的查找，就是看看指定的元素是否存在，以及查看元素所在的位置，主要包含一下几个方法：</p><ul><li>in 和 not in</li><li>index 和 count</li></ul><h4 id="in-not-in"><a href="#in-not-in" class="headerlink" title="in, not in"></a>in, not in</h4><p>python中查找的常用方法为：</p><ul><li>in（存在）,如果存在那么结果为true，否则为false</li><li>not in（不存在），如果不存在那么结果为true，否则false</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#待查找的列表</span></span><br><span class="line">nameList = [<span class="string">&#x27;xiaoWang&#x27;</span>,<span class="string">&#x27;xiaoZhang&#x27;</span>,<span class="string">&#x27;xiaoHua&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取用户要查找的名字</span></span><br><span class="line">findName = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查找的姓名:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找是否存在</span></span><br><span class="line"><span class="keyword">if</span> findName <span class="keyword">in</span> nameList:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;在列表中找到了相同的名字&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没有找到&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果1：(找到)</p><p>结果2：(没有找到)</p><p>说明：</p><blockquote><p>in的方法只要会用了，那么not in也是同样的用法，只不过not in判断的是不存在</p></blockquote><h4 id="index-count"><a href="#index-count" class="headerlink" title="index, count"></a>index, count</h4><p>index用来查找元素所在的位置，如果未找到则会报错；count用来计算某个元素出现的次数。它们的使用和字符串里的使用效果一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">3</span>) <span class="comment"># 注意是左闭右开区间</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="string">&#x27;a&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、删除元素"><a href="#四、删除元素" class="headerlink" title="四、删除元素"></a>四、删除元素</h3><p>类比现实生活中，如果某位同学调班了，那么就应该把这个条走后的学生的姓名删除掉；在开发中经常会用到删除这种功能。</p><p>列表元素的常用删除方法有：</p><ul><li>del：根据下标进行删除</li><li>pop：删除最后一个元素</li><li>remove：根据元素的值进行删除</li></ul><h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">movieName = [<span class="string">&#x27;加勒比海盗&#x27;</span>,<span class="string">&#x27;骇客帝国&#x27;</span>,<span class="string">&#x27;第一滴血&#x27;</span>,<span class="string">&#x27;指环王&#x27;</span>,<span class="string">&#x27;霍比特人&#x27;</span>,<span class="string">&#x27;速度与激情&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------删除之前------movieName=%s&#x27;</span> % movieName)</span><br><span class="line"><span class="keyword">del</span> movieName[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------删除之后------movieName=%s&#x27;</span> % movieName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">movieName = [<span class="string">&#x27;加勒比海盗&#x27;</span>,<span class="string">&#x27;骇客帝国&#x27;</span>,<span class="string">&#x27;第一滴血&#x27;</span>,<span class="string">&#x27;指环王&#x27;</span>,<span class="string">&#x27;霍比特人&#x27;</span>,<span class="string">&#x27;速度与激情&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------删除之前------movieName=%s&#x27;</span> % movieName)</span><br><span class="line">movieName.pop()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------删除之后------movieName=%s&#x27;</span> % movieName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">movieName = [<span class="string">&#x27;加勒比海盗&#x27;</span>,<span class="string">&#x27;骇客帝国&#x27;</span>,<span class="string">&#x27;第一滴血&#x27;</span>,<span class="string">&#x27;指环王&#x27;</span>,<span class="string">&#x27;霍比特人&#x27;</span>,<span class="string">&#x27;速度与激情&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------删除之前------movieName=%s&#x27;</span> % movieName)</span><br><span class="line">movieName.remove(<span class="string">&#x27;指环王&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------删除之后------movieName=%s&#x27;</span> % movieName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五、排序-sort-reverse"><a href="#五、排序-sort-reverse" class="headerlink" title="五、排序(sort, reverse)"></a>五、排序(sort, reverse)</h3><p>sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改为倒序，由大到小。</p><p>reverse方法是将list逆置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.reverse()  <span class="comment"># 逆置，不排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()  <span class="comment"># 默认从小到大排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort(reverse=<span class="literal">True</span>)  <span class="comment"># 从大到小排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>所谓的列表推导式，就是指的轻量级循环创建列表</p><h3 id="1-基本的方式"><a href="#1-基本的方式" class="headerlink" title="1. 基本的方式"></a>1. 基本的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line">In [<span class="number">11</span>]: a</span><br><span class="line">out[<span class="number">11</span>]: [<span class="number">4</span>，<span class="number">6</span>，<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>!=<span class="number">0</span>]</span><br><span class="line">In [<span class="number">13</span>]: a</span><br><span class="line">out[<span class="number">13</span>]: [<span class="number">3</span>, <span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>)]</span><br><span class="line">In [<span class="number">15</span>]: a</span><br><span class="line">out[<span class="number">15j</span>: [<span class="number">3</span>, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h3 id="2-在循环的过程中使用if"><a href="#2-在循环的过程中使用if" class="headerlink" title="2. 在循环的过程中使用if"></a>2. 在循环的过程中使用if</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line">In [<span class="number">11</span>]: a</span><br><span class="line">out[<span class="number">11</span>]: [<span class="number">4</span>，<span class="number">6</span>，<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>!=<span class="number">0</span>]</span><br><span class="line">In [<span class="number">13</span>]: a</span><br><span class="line">out[<span class="number">13</span>]: [<span class="number">3</span>,<span class="number">5</span>, <span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">    </span><br><span class="line">In [<span class="number">14</span>]: a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>)]</span><br><span class="line">In [<span class="number">15</span>]: a</span><br><span class="line">out[<span class="number">15</span>]: [<span class="number">3</span>,<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>,<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h3 id="4-2个for循环"><a href="#4-2个for循环" class="headerlink" title="4. 2个for循环"></a>4. 2个for循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: a = [(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">In [<span class="number">30</span>]: a</span><br><span class="line">Out[<span class="number">30</span>]: [(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>， <span class="number">1</span>),(<span class="number">1</span>, <span class="number">2</span>)， (<span class="number">2</span>, <span class="number">0</span>)，(<span class="number">2</span>，<span class="number">1</span>)， (<span class="number">2</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><h2 id="列表的复制"><a href="#列表的复制" class="headerlink" title="列表的复制"></a>列表的复制</h2><p>查看以下代码，说出打印的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line">b = a</span><br><span class="line">b = <span class="number">13</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>]</span><br><span class="line">nums2 = nums1</span><br><span class="line">nums2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(nums2)</span><br><span class="line"><span class="built_in">print</span>(nums1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>为什么修改了 nums2里的数据，nums1的数据也会改变？</li></ol><blockquote><p>Python中的赋值运算都是引用(即内存地址)的传递。对于可变类型来说，修改原数据的值，会改变赋值对象的值。</p></blockquote><ol><li>怎样nums1和nums2变成两个相互独立不受影响的列表？</li></ol><blockquote><p>使用列表的 copy 方法，或者 copy 模块就可以赋值一个列表。</p></blockquote><h3 id="列表的copy方法"><a href="#列表的copy方法" class="headerlink" title="列表的copy方法"></a>列表的copy方法</h3><p>使用列表的copy方法，可以直接将原来的列表进行复制，变成一个新的列表，这种复制方式是浅复制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>]</span><br><span class="line">nums2 = nums1.copy()  <span class="comment"># 调用列表的copy方法，可以复制出一个新的列表</span></span><br><span class="line"></span><br><span class="line">nums2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改新列表里的数据，不会影响到原有列表里的数据</span></span><br><span class="line"><span class="built_in">print</span>(nums2)</span><br><span class="line"><span class="built_in">print</span>(nums1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="copy模块的使用"><a href="#copy模块的使用" class="headerlink" title="copy模块的使用"></a>copy模块的使用</h3><p>除了使用列表的copy方法以外，Python还提供了copy模块来复制一个对象。copy模块提供了浅复制和深复制两种方式，它们的使用方式相同，但是执行的效果有一定的差异。</p><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>浅拷贝是对于一个对象的顶层拷贝，通俗的理解是：拷贝了引用，并没有拷贝内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">words1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;good&#x27;</span>, [<span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>], <span class="string">&#x27;bad&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅拷贝只会拷贝最外层的对象，里面的数据不会拷贝，而是直接指向</span></span><br><span class="line">words2 = copy.copy(words1)</span><br><span class="line"></span><br><span class="line">words2[<span class="number">0</span>] = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">words2[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;no&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(words1)  <span class="comment"># [&#x27;hello&#x27;, &#x27;good&#x27;, [&#x27;no&#x27;, &#x27;ok&#x27;], &#x27;bad&#x27;]</span></span><br><span class="line"><span class="comment"># wrods2 里的 yes 被修改成了 no</span></span><br><span class="line"><span class="built_in">print</span>(words2)  <span class="comment"># [&#x27;你好&#x27;, &#x27;good&#x27;, [&#x27;no&#x27;, &#x27;ok&#x27;], &#x27;bad&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>深拷贝是对于一个对象所有层次的递归拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">words1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;good&#x27;</span>, [<span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>], <span class="string">&#x27;bad&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝会将对象里的所有数据都进行拷贝</span></span><br><span class="line">words2 = copy.deepcopy(words1)</span><br><span class="line"></span><br><span class="line">words2[<span class="number">0</span>] = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">words2[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;no&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(words1)  <span class="comment"># [&#x27;hello&#x27;, &#x27;good&#x27;, [&#x27;yes&#x27;, &#x27;ok&#x27;], &#x27;bad&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(words2)  <span class="comment"># [&#x27;你好&#x27;, &#x27;good&#x27;, [&#x27;no&#x27;, &#x27;ok&#x27;], &#x27;bad&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>列表和字符串一样，也支持切片，切片其实就是一种浅拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">words1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;good&#x27;</span>, [<span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>], <span class="string">&#x27;bad&#x27;</span>]</span><br><span class="line">words2 = words1[:]</span><br><span class="line">words2[<span class="number">0</span>] = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">words2[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;no&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(words1)  <span class="comment"># [&#x27;hello&#x27;, &#x27;good&#x27;, [&#x27;no&#x27;, &#x27;ok&#x27;], &#x27;bad&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(words2) <span class="comment"># [&#x27;你好&#x27;, &#x27;good&#x27;, [&#x27;no&#x27;, &#x27;ok&#x27;], &#x27;bad&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="列表嵌套、列表遍历"><a href="#列表嵌套、列表遍历" class="headerlink" title="列表嵌套、列表遍历"></a>列表嵌套、列表遍历</h2><p>列表嵌套、列表遍历其实和字符串差不多，就不做详细介绍了</p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python字符串格式化</title>
      <link href="/2022/04/08/study/python/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>/2022/04/08/study/python/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串的format方法"><a href="#字符串的format方法" class="headerlink" title="字符串的format方法"></a>字符串的format方法</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念:"></a>1. 概念:</h2><ul><li><code>str.format()</code> 方法通过字符串中的大括号<code>&#123;&#125;</code> 来识别替换字段 <code>replacement field</code>，从而完成字符串的格式化。</li><li><code>替换字段</code> 由字段名 <code>field name</code> 和转换字段 <code>conversion field</code> 以及格式说明符 <code>format specifier</code> 组成，即一般形式为 {字段名!转换字段:格式说明符}。</li><li>字段名分为简单字段名 <code>simple field name</code> 和复合字段名 <code>compound field name</code>。而转换字段和格式说明符都是可选的。</li></ul><h2 id="2-字段名"><a href="#2-字段名" class="headerlink" title="2. 字段名"></a>2. 字段名</h2><p>form的完整格式是{字段名!转换字符:格式说明符}。其中字段名师必须的，而且可以分为简单字段名和复合字段名。</p><h3 id="2-1-简单字段名"><a href="#2-1-简单字段名" class="headerlink" title="2.1 简单字段名"></a>2.1 简单字段名</h3><p>简单字段名由三中写法:</p><ul><li>省略字段名:<code>&#123;&#125;</code></li><li>使用非负十进制整数<code>&#123;0&#125;</code></li><li>变量名{name}</li></ul><h4 id="2-1-1-省略字段名"><a href="#2-1-1-省略字段名" class="headerlink" title="2.1.1 省略字段名"></a>2.1.1 省略字段名</h4><p>大括号内省略字段名，传递<strong>位置参数</strong>。</p><ul><li>替换字段形式： <code>&#123;&#125;</code></li><li>注意：大括号个数可以少于位置参数的个数，反之不然。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 省略字段名传递位置参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫&#123;&#125;，今年&#123;&#125;岁。&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我叫小明，今年18岁。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大括号个数可以少于位置参数的个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我爱吃&#123;&#125;和&#123;&#125;。&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;大鸭梨&#x27;</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我爱吃香蕉和苹果。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大括号个数多于位置参数的个数则会报错</span></span><br><span class="line"><span class="comment"># print(&#x27;我还吃&#123;&#125;和&#123;&#125;。&#x27;.format(&#x27;西红柿&#x27;))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">IndexError: tuple index out of range</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-数字字段名"><a href="#2-1-2-数字字段名" class="headerlink" title="2.1.2 数字字段名"></a>2.1.2 数字字段名</h4><p>可以通过数字形式的简单字段名传递位置参数。</p><ul><li>数字必须是大于等于 0 的整数。</li><li>带数字的替换字段可以重复使用。</li><li>数字形式的简单字段名相当于把 format 中的所有位置参数整体当作一个元组，通过字段名中的数字进行取值。即 {0} 等价于 tuple[0]，所以大括号内的数字不能越界。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过数字形式的简单字段名传递位置参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;身高&#123;0&#125;，家住&#123;1&#125;。&#x27;</span>.<span class="built_in">format</span>(<span class="number">1.8</span>, <span class="string">&#x27;铜锣湾&#x27;</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">身高1.8，家住铜锣湾</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字形式的简单字段名可以重复使用。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我爱&#123;0&#125;。\n她今年&#123;1&#125;。\n我也爱&#123;0&#125;。&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;阿香&#x27;</span>, <span class="number">17</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我爱阿香。</span></span><br><span class="line"><span class="string">她今年17。</span></span><br><span class="line"><span class="string">我也爱阿香。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 体会把所有位置参数整体当成元组来取值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;阿香爱吃&#123;1&#125;、&#123;3&#125;和&#123;0&#125;。&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    <span class="string">&#x27;榴莲&#x27;</span>, <span class="string">&#x27;臭豆腐&#x27;</span>, <span class="string">&#x27;皮蛋&#x27;</span>, <span class="string">&#x27;鲱鱼罐头&#x27;</span>, <span class="string">&#x27;螺狮粉&#x27;</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">阿香爱吃臭豆腐、鲱鱼罐头和榴莲。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试一下越界错误</span></span><br><span class="line"><span class="comment"># print(&#x27;&#123;1&#125;&#x27;.format(&#x27;错误用法&#x27;))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">IndexError: tuple index out of range</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-变量字段名"><a href="#2-1-3-变量字段名" class="headerlink" title="2.1.3 变量字段名"></a>2.1.3 变量字段名</h4><p>使用<strong>变量名形式</strong>的简单字段名传递<strong>关键字参数</strong>。</p><ul><li>关键字参数的位置可以随意调换。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用变量名形式的简单字段名传递关键字参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我大哥是&#123;name&#125;，今年&#123;age&#125;岁。&#x27;</span>.<span class="built_in">format</span>(name=<span class="string">&#x27;阿飞&#x27;</span>, age=<span class="number">20</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我大哥是阿飞，今年20岁。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字参数的顺序可以随意调换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我大哥是&#123;name&#125;，今年&#123;age&#125;岁。&#x27;</span>.<span class="built_in">format</span>(age=<span class="number">20</span>, name=<span class="string">&#x27;阿飞&#x27;</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我大哥是阿飞，今年20岁。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-4-简单字段名的混合使用"><a href="#2-1-4-简单字段名的混合使用" class="headerlink" title="2.1.4 简单字段名的混合使用"></a>2.1.4 简单字段名的混合使用</h4><ul><li>混合使用数字形式和变量名形式的字段名，可以同时传递位置参数和关键字参数。</li><li>关键字参数必须位于位置参数之后。</li><li>混合使用时可以省略数字。</li><li>省略字段名 <code>&#123;&#125;</code> 不能和数字形式的字段名 <code>&#123;非负整数&#125;</code> 同时使用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 混合使用数字形式和变量名形式的字段名</span></span><br><span class="line"><span class="comment"># 可以同时传递位置参数和关键字参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;这是一个关于&#123;0&#125;、&#123;1&#125;和&#123;girl&#125;的故事。&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;阿飞&#x27;</span>, girl=<span class="string">&#x27;阿香&#x27;</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是一个关于小明、阿飞和阿香的故事。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是关键字参数必须位于位置参数之后</span></span><br><span class="line"><span class="comment"># print(&#x27;这是一个关于&#123;0&#125;、&#123;1&#125;和&#123;girl&#125;的故事。&#x27;.format(</span></span><br><span class="line">    <span class="comment"># &#x27;小明&#x27;, girl=&#x27;阿香&#x27; , &#x27;阿飞&#x27;))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SyntaxError: positional argument follows keyword argument</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字也可以省略</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;这是一个关于&#123;&#125;、&#123;&#125;和&#123;girl&#125;的故事。&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;阿飞&#x27;</span>, girl=<span class="string">&#x27;阿香&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是省略字段名不能和数字形式的字段名同时出现</span></span><br><span class="line"><span class="comment"># print(&#x27;这是一个关于&#123;&#125;、&#123;1&#125;和&#123;girl&#125;的故事。&#x27;.format(</span></span><br><span class="line"><span class="comment">#     &#x27;小明&#x27;, &#x27;阿飞&#x27;, girl=&#x27;阿香&#x27;))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ValueError: cannot switch from automatic field numbering to manual field specification</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-5-使用元组和字典传参"><a href="#2-1-5-使用元组和字典传参" class="headerlink" title="2.1.5 使用元组和字典传参"></a>2.1.5 使用元组和字典传参</h4><p><code>str.format()</code> 方法还可以使用 <code>*元组</code> 和 <code>**字典</code> 的形式传参，两者可以混合使用。 位置参数、关键字参数、<code>*元组</code> 和 <code>**字典</code> 也可以同时使用，但是要注意，位置参数要在关键字参数前面，<code>*元组</code> 要在 <code>**字典</code> 前面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用元组传参</span></span><br><span class="line">infos = <span class="string">&#x27;钢铁侠&#x27;</span>, <span class="number">66</span>, <span class="string">&#x27;小辣椒&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是&#123;&#125;，身价&#123;&#125;亿。&#x27;</span>.<span class="built_in">format</span>(*infos))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是钢铁侠，身家66亿。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是&#123;2&#125;，身价&#123;1&#125;亿。&#x27;</span>.<span class="built_in">format</span>(*infos))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是小辣椒，身家66亿。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字典传参</span></span><br><span class="line">venom = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;毒液&#x27;</span>, <span class="string">&#x27;weakness&#x27;</span>: <span class="string">&#x27;火&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是&#123;name&#125;，我怕&#123;weakness&#125;。&#x27;</span>.<span class="built_in">format</span>(**venom))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是毒液，我怕火。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时使用元组和字典传参</span></span><br><span class="line">hulk = <span class="string">&#x27;绿巨人&#x27;</span>, <span class="string">&#x27;拳头&#x27;</span></span><br><span class="line">captain = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;美国队长&#x27;</span>, <span class="string">&#x27;weapon&#x27;</span>: <span class="string">&#x27;盾&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是&#123;&#125;, 我怕&#123;weapon&#125;。&#x27;</span>.<span class="built_in">format</span>(*hulk, **captain))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是&#123;name&#125;, 我怕&#123;1&#125;。&#x27;</span>.<span class="built_in">format</span>(*hulk, **captain))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是绿巨人, 我怕盾。</span></span><br><span class="line"><span class="string">我是美国队长, 我怕拳头。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时使用位置参数、元组、关键字参数、字典传参</span></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line"><span class="comment"># 位置参数要在关键字参数前面</span></span><br><span class="line"><span class="comment"># *元组要在**字典前面</span></span><br><span class="line">tup = <span class="string">&#x27;鹰眼&#x27;</span>,</span><br><span class="line">dic = &#123;<span class="string">&#x27;weapon&#x27;</span>: <span class="string">&#x27;箭&#x27;</span>&#125;</span><br><span class="line">text = <span class="string">&#x27;我是&#123;1&#125;，我怕&#123;weakness&#125;。我是&#123;0&#125;，我用&#123;weapon&#125;。&#x27;</span></span><br><span class="line">text = text.<span class="built_in">format</span>(</span><br><span class="line">    *tup, <span class="string">&#x27;黑寡妇&#x27;</span>, weakness=<span class="string">&#x27;男人&#x27;</span>, **dic)</span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是黑寡妇，我怕男人。我是鹰眼，我用箭。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-复合字段名"><a href="#2-2-复合字段名" class="headerlink" title="2.2 复合字段名"></a>2.2 复合字段名</h3><ul><li><p>同时使用了数字和变量名两种形式的字段名就是<strong>复合字段名</strong>。</p></li><li><p>复合字段名</p><p>支持两种操作符：</p><ul><li><code>.</code> 点号</li><li><code>[]</code> 中括号</li></ul></li></ul><h4 id="2-2-1-使用-点号"><a href="#2-2-1-使用-点号" class="headerlink" title="2.2.1 使用. 点号"></a>2.2.1 使用<code>.</code> 点号</h4><p><strong>传递位置参数</strong></p><ul><li>替换字段形式：<code>&#123;数字.属性名&#125;</code></li><li>只有一个替换字段的时候可以省略数字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,gender</span>):</span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line">    self.gender = gender</span><br><span class="line">p = Person(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;姓名是&#123;0.name&#125;,年龄是&#123;0.age&#125;,性别是&#123;0.gender&#125;&#x27;</span>.<span class="built_in">format</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;姓名是&#123;.name&#125;&#x27;</span>.<span class="built_in">format</span>(p))  <span class="comment"># 只有一个替换字段时，可以省略数字</span></span><br></pre></td></tr></table></figure><h4 id="2-2-使用-中括号"><a href="#2-2-使用-中括号" class="headerlink" title="2.2. 使用[]中括号"></a>2.2. 使用<code>[]</code>中括号</h4><ul><li>用列表传递位置参数</li><li>用元组传递位置参数</li><li>用字典传递位置参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 中括号用法：用列表传递位置参数</span></span><br><span class="line">infos = [<span class="string">&#x27;阿星&#x27;</span>, <span class="number">9527</span>]</span><br><span class="line">food = [<span class="string">&#x27;霸王花&#x27;</span>, <span class="string">&#x27;爆米花&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫&#123;0[0]&#125;，警号&#123;0[1]&#125;，爱吃&#123;1[0]&#125;。&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    infos, food))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我叫阿星，警号9527，爱吃霸王花。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中括号用法：用元组传递位置参数</span></span><br><span class="line">food = (<span class="string">&#x27;僵尸&#x27;</span>, <span class="string">&#x27;脑子&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫&#123;0[0]&#125;，年龄&#123;1&#125;，爱吃&#123;0[1]&#125;。&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    food, <span class="number">66</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我叫僵尸，年龄66，爱吃脑子。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中括号用法：用字典传递位置参数</span></span><br><span class="line">dic = <span class="built_in">dict</span>(name=<span class="string">&#x27;阿星&#x27;</span>, pid=<span class="number">9527</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是&#123;[name]&#125;！&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    dic))</span><br><span class="line"><span class="comment"># 多个替换字段，不能省略数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是&#123;0[name]&#125;，警号&#123;0[pid]&#125;。&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    dic))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是阿星！</span></span><br><span class="line"><span class="string">我是阿星，警号9527。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-转换字段"><a href="#3-转换字段" class="headerlink" title="3. 转换字段"></a>3. 转换字段</h2><p><strong>转换字段</strong> <code>conversion field</code> 的取值有三种，前面要加 <code>!</code>：</p><ul><li><code>s</code>：传递参数之前先对参数调用 <code>str()</code></li><li><code>r</code>：传递参数之前先对参数调用 <code>repr()</code></li><li><code>a</code>：传递参数之前先对参数调用 <code>ascii()</code></li></ul><blockquote><p><code>ascii()</code> 函数类似 <code>repr()</code> 函数，返回一个可以表示对象的字符串。 但是对于非 <code>ASCII</code> 字符，使用 <code>\x</code>，<code>\u</code> 或者 <code>\U</code> 转义。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换字段</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I am &#123;!s&#125;!&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Bruce Lee 李小龙&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I am &#123;!r&#125;!&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Bruce Lee 李小龙&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I am &#123;!a&#125;!&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Bruce Lee 李小龙&#x27;</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">I am Bruce Lee 李小龙!</span></span><br><span class="line"><span class="string">I am &#x27;Bruce Lee 李小龙&#x27;!</span></span><br><span class="line"><span class="string">I am &#x27;Bruce Lee \u674e\u5c0f\u9f99&#x27;!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python字符串操作</title>
      <link href="/2022/04/06/study/python/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/04/06/study/python/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串常见操作"><a href="#字符串常见操作" class="headerlink" title="字符串常见操作"></a>字符串常见操作</h2><p>字符串的常见操作包括：</p><ul><li><a href="#tag01">获取长度</a>:len</li><li><a href="#tag02">查找内容</a>:find,index,rfind,rindex</li><li><a href="#tag03">判断</a>:startswith,endswith,isalpha,isdigit,isalnum,isspace</li><li><a href="#tag04">计算出现次数</a>:count</li><li><a href="#tag05">替换内容</a>:replace</li><li><a href="#tag06">切割字符串</a>:split,rsplit,splitlines,partition,rpartition</li><li><a href="#tag07">修改大小写</a>:capitalize,title,upper,lower</li><li><a href="#tag08">空格处理</a>:ljust,rjust,center,lstrip,rstrip,strip</li><li><a href="#tag09">字符串拼接</a>:join</li></ul><p>注意：在Python中，字符串是不可变的！所有的字符串相关方法，都不会改变原有的字符串，都是返回一个结果，在这个新的返回值里，保留了执行后的结果！</p><h3 id="一、-len"><a href="#一、-len" class="headerlink" title="一、 len"></a>一、 len</h3><p>len函数可以获取字符串的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(mystr))  <span class="comment"># 17 获取字符串的长度</span></span><br></pre></td></tr></table></figure><h3 id="二、-查找"><a href="#二、-查找" class="headerlink" title="二、 查找"></a>二、 查找</h3><p>查找相关的方法，使用方式大致相同，但是略有区别。</p><h4 id="1-find"><a href="#1-find" class="headerlink" title="1. find"></a>1. find</h4><p>查找指定内容在字符串中是否存在，如果存在就返回该内容在字符串中第一次出现的开始位置索引值，如果不存在，则返回-1.</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S.find(sub[, start[, end]]) -&gt; <span class="built_in">int</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;好风光&#x27;</span>))  <span class="comment"># 10 &#x27;好风光&#x27;第一次出现时，&#x27;好&#x27;所在的位置</span></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;你好&#x27;</span>))  <span class="comment"># -1  &#x27;你好&#x27;不存在，返回 -1</span></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;风&#x27;</span>, <span class="number">12</span>))  <span class="comment"># 15 从下标12开始查找&#x27;风&#x27;,找到风所在的位置试15</span></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;风光&#x27;</span>,<span class="number">1</span>,<span class="number">10</span>)) <span class="comment"># -1 从下标1开始到12查找&quot;风光&quot;,未找到，返回 -1</span></span><br></pre></td></tr></table></figure><h4 id="2-rfind"><a href="#2-rfind" class="headerlink" title="2. rfind"></a>2. rfind</h4><p>类似于 find()函数，不过是从右边开始查找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.rfind(<span class="string">&#x27;好&#x27;</span>)) <span class="comment"># 14</span></span><br></pre></td></tr></table></figure><h4 id="3-index"><a href="#3-index" class="headerlink" title="3.index"></a>3.index</h4><p>跟find()方法一样，只不过，find方法未找到时，返回-1,而str未找到时，会报一个异常。</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S.index(sub[, start[, end]]) -&gt; <span class="built_in">int</span></span><br></pre></td></tr></table></figure><h4 id="4-rindex"><a href="#4-rindex" class="headerlink" title="4.rindex"></a>4.rindex</h4><p>类似于 index()，不过是从右边开始。</p><h2 id="三、判断"><a href="#三、判断" class="headerlink" title="三、判断"></a>三、判断</h2><p>python提供了非常丰富的方法，可以用来对一个字符串进行判断。</p><h4 id="1-startswith"><a href="#1-startswith" class="headerlink" title="1. startswith"></a>1. startswith</h4><p>判断字符串是否以指定内容开始。 语法格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S.startswith(prefix[, start[, end]]) -&gt; <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.startswith(<span class="string">&#x27;今&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(mystr.startswith(<span class="string">&#x27;今日&#x27;</span>)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h4 id="2-endswith"><a href="#2-endswith" class="headerlink" title="2. endswith"></a>2. endswith</h4><p>判断字符串是否以指定内容结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;好风光&#x27;</span>)) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;好日子&#x27;</span>)) <span class="comment">#False</span></span><br></pre></td></tr></table></figure><h4 id="3-isalpha"><a href="#3-isalpha" class="headerlink" title="3. isalpha"></a>3. isalpha</h4><p>判断字符串是否是纯字母。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isalpha())  <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isalpha()) <span class="comment"># False 因为中间有空格</span></span><br></pre></td></tr></table></figure><h4 id="4-isdigit"><a href="#4-isdigit" class="headerlink" title="4. isdigit"></a>4. isdigit</h4><p>判断一个字符串是否是纯数字，只要出现非0~9的数字，结果就是False.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isdigit()) <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">&#x27;123.4&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isdigit()) <span class="comment"># False</span></span><br><span class="line">mystr = <span class="string">&#x27;-1234&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isdigit()) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h4 id="5-isalnum"><a href="#5-isalnum" class="headerlink" title="5. isalnum"></a>5. isalnum</h4><p>判断是否由数字和字母组成。只要出现了非数字和字母，就返回False.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isalnum())  <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isalnum()) <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">&#x27;abcd1234&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isalnum()) <span class="comment"># True</span></span><br><span class="line">mystr = <span class="string">&#x27;abcd1234_&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isalnum()) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h4 id="6-isspace"><a href="#6-isspace" class="headerlink" title="6. isspace"></a>6. isspace</h4><p>如果 mystr 中只包含空格，则返回 True，否则返回 False.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isspace()) <span class="comment"># False mystr是一个空字符串</span></span><br><span class="line">mystr = <span class="string">&#x27;  &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isspace()) <span class="comment"># True 只有空格</span></span><br><span class="line">mystr = <span class="string">&#x27; d&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.isspace()) <span class="comment"># False 除了空格外还有其他内容</span></span><br></pre></td></tr></table></figure><h3 id="四、count"><a href="#四、count" class="headerlink" title="四、count"></a>四、count</h3><p>返回 str在start和end之间 在 mystr里面出现的次数。</p><p>语法格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S.count(sub[, start[, end]]) -&gt; <span class="built_in">int</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;好&#x27;</span>))  <span class="comment"># 3. &#x27;好&#x27;字出现三次</span></span><br></pre></td></tr></table></figure><h3 id="五、替换"><a href="#五、替换" class="headerlink" title="五、替换"></a>五、替换</h3><p>替换字符串中指定的内容，如果指定次数count，则替换不会超过count次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line">newstr = mystr.replace(<span class="string">&#x27;好&#x27;</span>, <span class="string">&#x27;坏&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(mystr)  <span class="comment"># 今天天气好晴朗，处处好风光呀好风光  原字符串未改变！</span></span><br><span class="line"><span class="built_in">print</span>(newstr)  <span class="comment"># 今天天气坏晴朗，处处坏风光呀坏风光 得到的新字符串里，&#x27;好&#x27;被修改成了&#x27;坏&#x27;</span></span><br><span class="line"></span><br><span class="line">newstr = mystr.replace(<span class="string">&#x27;好&#x27;</span>,<span class="string">&#x27;坏&#x27;</span>,<span class="number">2</span>)  <span class="comment"># 指定了替换的次数</span></span><br><span class="line"><span class="built_in">print</span>(newstr) <span class="comment"># 今天天气坏晴朗，处处坏风光呀好风光 只有两处的&#x27;好&#x27;被替换成了&#x27;坏&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="六、内容分隔"><a href="#六、内容分隔" class="headerlink" title="六、内容分隔"></a>六、内容分隔</h3><p>内容分隔主要涉及到split,splitlines,partition和rpartition四个方法。</p><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><p>以指定字符串为分隔符切片，如果 maxsplit有指定值，则仅分隔 maxsplit+1 个子字符串。<strong>返回的结果是一个列表。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line">result = mystr.split() <span class="comment"># 没有指定分隔符，默认使用空格，换行等空白字符进行分隔</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment">#[&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;] 没有空白字符，所以，字符串未被分隔</span></span><br><span class="line"></span><br><span class="line">result = mystr.split(<span class="string">&#x27;好&#x27;</span>)  <span class="comment"># 以 &#x27;好&#x27; 为分隔符</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># [&#x27;今天天气&#x27;, &#x27;晴朗，处处&#x27;,&#x27;风光呀,&#x27;风光&#x27;]</span></span><br><span class="line"></span><br><span class="line">result = mystr.split(<span class="string">&quot;好&quot;</span>,<span class="number">2</span>) <span class="comment"># 以 &#x27;好&#x27; 为分隔符，最多切割成3份</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># [&#x27;今天天气&#x27;, &#x27;晴朗，处处&#x27;, &#x27;风光呀好风光&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="rsplit"><a href="#rsplit" class="headerlink" title="rsplit"></a>rsplit</h4><p>用法和split基本一致，只不过是从右往左分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.rsplit(<span class="string">&#x27;好&#x27;</span>,<span class="number">1</span>))  <span class="comment">#[&#x27;今天天气好晴朗，处处好风光呀&#x27;, &#x27;风光&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="splitlines"><a href="#splitlines" class="headerlink" title="splitlines"></a>splitlines</h4><p>按照行分隔，返回一个包含各行作为元素的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;hello \nworld&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.splitlines())</span><br></pre></td></tr></table></figure><h3 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h3><p>把mystr以str分割成三部分,str前，str和str后，三部分组成一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.partition(<span class="string">&#x27;好&#x27;</span>))  <span class="comment"># (&#x27;今天天气&#x27;, &#x27;好&#x27;, &#x27;晴朗，处处好风光呀好风光&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="rpartition"><a href="#rpartition" class="headerlink" title="rpartition"></a>rpartition</h4><p>类似于 partition()函数,不过是从右边开始.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;今天天气好晴朗，处处好风光呀好风光&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.rpartition(<span class="string">&#x27;好&#x27;</span>))   <span class="comment"># (&#x27;今天天气好晴朗，处处好风光呀&#x27;, &#x27;好&#x27;, &#x27;风光&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="七、修改大小写"><a href="#七、修改大小写" class="headerlink" title="七、修改大小写"></a>七、修改大小写</h2><p>修改大小写的功能只对英文有效，主要包括，首字母大写capitalize,每个单词的首字母大写title,全小写lower,全大写upper.</p><h3 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a>capitalize</h3><p>第一个单词的首字母大写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.capitalize()) <span class="comment"># Hello world</span></span><br></pre></td></tr></table></figure><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>每个单词的首字母大写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.title()) <span class="comment"># Hello World</span></span><br></pre></td></tr></table></figure><h3 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h3><p>所有都变成小写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;hElLo WorLD&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.lower()) <span class="comment"># hello world</span></span><br></pre></td></tr></table></figure><h3 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h3><p>所有都变成大写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.upper())  <span class="comment">#HELLO WORLD</span></span><br></pre></td></tr></table></figure><h3 id="八、空格处理"><a href="#八、空格处理" class="headerlink" title="八、空格处理"></a>八、空格处理</h3><p>Python为我们提供了各种操作字符串里表格的方法。</p><h4 id="1-ljust"><a href="#1-ljust" class="headerlink" title="1. ljust"></a>1. ljust</h4><p>返回指定长度的字符串，并在右侧使用空白字符补全(左对齐)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.ljust(<span class="number">10</span>))  <span class="comment"># hello     在右边补了五个空格</span></span><br></pre></td></tr></table></figure><h4 id="2-rjust"><a href="#2-rjust" class="headerlink" title="2. rjust"></a>2. rjust</h4><p>返回指定长度的字符串，并在左侧使用空白字符补全(右对齐)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.rjust(<span class="number">10</span>))  <span class="comment">#      hello在左边补了五个空格</span></span><br></pre></td></tr></table></figure><h4 id="3-center"><a href="#3-center" class="headerlink" title="3. center"></a>3. center</h4><p>返回指定长度的字符串，并在两端使用空白字符补全(居中对齐)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.center(<span class="number">10</span>))  <span class="comment">#  hello   两端加空格，让内容居中</span></span><br></pre></td></tr></table></figure><h4 id="4-lstrip"><a href="#4-lstrip" class="headerlink" title="4. lstrip"></a>4. lstrip</h4><p>删除 mystr 左边的空白字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;    he   llo      &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.lstrip())  <span class="comment">#he   llo      只去掉了左边的空格，中间和右边的空格被保留</span></span><br></pre></td></tr></table></figure><h4 id="5-rstrip"><a href="#5-rstrip" class="headerlink" title="5. rstrip"></a>5. rstrip</h4><p>删除 mystr 右边的空白字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;    he   llo      &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.rstrip())  <span class="comment">#    he   llo右边的空格被删除</span></span><br></pre></td></tr></table></figure><h4 id="6-strip"><a href="#6-strip" class="headerlink" title="6. strip"></a>6. strip</h4><p>删除两断的空白字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;    he   llo      &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.strip())  <span class="comment">#he   llo</span></span><br></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>把参数进行遍历，取出参数里的每一项，然后再在后面加上mystr</p><p>语法格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S.join(iterable)</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(mystr.join(<span class="string">&#x27;hxmdq&#x27;</span>))  <span class="comment">#haxamadaq  把hxmd一个个取出，并在后面添加字符a. 最后的 q 保留，没有加 a</span></span><br><span class="line"><span class="built_in">print</span>(mystr.join([<span class="string">&#x27;hi&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;good&#x27;</span>]))  <span class="comment">#hiahelloagood</span></span><br></pre></td></tr></table></figure><p>作用：可以把列表或者元组快速的转变成为字符串，并且以指定的字符分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="string">&#x27;_&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(txt.join([<span class="string">&#x27;hi&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;good&#x27;</span>])) <span class="comment">#hi_hello_good</span></span><br><span class="line"><span class="built_in">print</span>(txt.join((<span class="string">&#x27;good&#x27;</span>,<span class="string">&#x27;hi&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>))) <span class="comment">#good_hi_hello</span></span><br></pre></td></tr></table></figure><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><ol><li>字符串和字符串之间能够使用加法运算符，作用是将两个字符串拼接成为一个字符串。例如:<code>&#39;hello&#39; + &#39;world&#39;</code>的结果是 <code>&#39;helloworld&#39;</code></li><li>字符串和数字之间可以做乘法运算，结果是将指定的字符串重复多次。例如:<code>&#39;hello&#39;*2</code>的结果是<code>hellohello</code></li><li>字符串和字符串之间，如果使用比较运算符进行计算，会获取字符对应的编码，然后进行比较。</li><li>除上述几种运算符以外，字符串默认不支持其他运算符。</li></ol>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python成员运算符</title>
      <link href="/2022/04/06/study/python/python%E6%88%90%E5%91%98%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/04/06/study/python/python%E6%88%90%E5%91%98%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p>成员运算符 (in 和 not in) 可以用来快速的判断元素是否在指定的可迭代对象里，语法格式 <code>要判断的元素 in 可迭代对象</code>。</p><h3 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h3><p>思考：怎样判断一个字符是否在指定的字符串里？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">char = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个字符:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字符串的 find 方法可以判断字符是否存在</span></span><br><span class="line"><span class="keyword">if</span> msg.find(char) != -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;您输入的字符存在&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;您输入的字符不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 in 运算符可以更加方便的查看字符是否存在</span></span><br><span class="line"><span class="keyword">if</span> char <span class="keyword">in</span> msg:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;您输入的字符存在&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;您输入的字符不存在&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="not-in-运算符"><a href="#not-in-运算符" class="headerlink" title="not in 运算符"></a>not in 运算符</h3><p>和 in 运算符的使用方式一致，只不过 not in 用来判断元素是否 不在 指定的字符串里。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>不是所有的数据都能使用身份运算符，身份运算符后面只能是一个可迭代对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="string">&#x27;zhangsan&#x27;</span> <span class="keyword">in</span> [<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;henry&#x27;</span>,<span class="string">&#x27;merry&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> <span class="number">123</span> <span class="comment"># 报错，数字 123 不是一个可迭代对象</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python字符串</title>
      <link href="/2022/04/02/study/python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/04/02/study/python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串介绍"><a href="#字符串介绍" class="headerlink" title="字符串介绍"></a>字符串介绍</h2><p>字符串可以理解为一段普通的文本内容，在python里，使用引号来表示一个字符串，不同的引号表示的效果会有区别。</p><h3 id="字符串表示方式"><a href="#字符串表示方式" class="headerlink" title="字符串表示方式"></a>字符串表示方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;I&#x27;m Tom&quot;</span>  <span class="comment"># 一对双引号 </span></span><br><span class="line">b = <span class="string">&#x27;Tom said:&quot;I am Tom&quot;&#x27;</span>  <span class="comment"># 一对单引号</span></span><br><span class="line">c = <span class="string">&#x27;Tom said:&quot;I\&#x27;m Tom&quot;&#x27;</span>  <span class="comment"># 转义字符</span></span><br><span class="line">d = <span class="string">&#x27;&#x27;&#x27;Tom said:&quot;I&#x27;m Tom&quot;&#x27;&#x27;&#x27;</span>  <span class="comment"># 三个单引号</span></span><br><span class="line">e = <span class="string">&quot;&quot;&quot;Tom said:&quot;I&#x27;m Tom&quot; &quot;&quot;&quot;</span>  <span class="comment"># 三个双引号</span></span><br></pre></td></tr></table></figure><p>小总结：</p><ul><li>双引号或者单引号中的数据，就是字符串</li><li>如果使用一对引号来定义字符串，当出现符号冲突时可以使用转义字符</li><li>使用三个单引号、双引号定义的字符串可以包裹任意文本</li></ul><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>转义字符是很多程序语言、数据格式和通信协议的形式文法的一部分，使用<code>\</code>来表示一个转义字符。常见的转义字符以及它所代表的含义如下表:</p><table><thead><tr><th align="center">转义字符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">\r</td><td align="center">将当前位置移到本行开头</td></tr><tr><td align="center">\n</td><td align="center">将当前位置移到下一行开头</td></tr><tr><td align="center">\t</td><td align="center">用来表示一个制表符</td></tr><tr><td align="center"><code>\\</code></td><td align="center">代表一个反斜线字符<code>\</code></td></tr><tr><td align="center">&#39;</td><td align="center">用来显示一个单引号</td></tr><tr><td align="center">&quot;</td><td align="center">用来显示一个双引号</td></tr></tbody></table><h2 id="下标和切片"><a href="#下标和切片" class="headerlink" title="下标和切片"></a>下标和切片</h2><p>如果想取出部分字符，那么可以通过<code>下标</code>的方法，（注意在计算机中，下标从 0 开始）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>所谓遍历，可以理解为按照一定的规则(一般情况下就是数据的下标)，访问每一个数据。不是所有的数据都能够被遍历，字符串是可迭代对象，能够进行遍历。</p><p>可以使用while和for语句，对字符串里的元素进行遍历。</p><p>while语句遍历:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(msg):</span><br><span class="line">    <span class="built_in">print</span>(msg[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>for语句遍历:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> msg:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p><p><strong>切片的语法：[起始:结束:步长]，也可以简化使用 [起始:结束]</strong></p><p><strong>注意：选取的区间从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身)，步长表示选取间隔。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引是通过下标取某一个元素</span></span><br><span class="line"><span class="comment"># 切片是通过下标去某一段元素</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">4</span>])  <span class="comment"># o 字符串里的第4个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>:<span class="number">7</span>])  <span class="comment"># lo W 包含下标 3，不含下标 7</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[:]) <span class="comment"># Hello World! 取出所有元素（没有起始位和结束位之分），默认步长为1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:]) <span class="comment"># ello World! 从下标为1开始，取出 后面所有的元素（没有结束位）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">4</span>])  <span class="comment"># Hell 从起始位置开始，取到 下标为4的前一个元素（不包括结束位本身）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[:-<span class="number">1</span>]) <span class="comment"># Hello World 从起始位置开始，取到 倒数第一个元素（不包括结束位本身）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">4</span>:-<span class="number">1</span>]) <span class="comment"># rld 从倒数第4个元素开始，取到 倒数第1个元素（不包括结束位本身）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>]) <span class="comment"># el 从下标为1开始，取到下标为5的前一个元素，步长为2（不包括结束位本身）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">7</span>:<span class="number">2</span>:-<span class="number">1</span>]) <span class="comment"># ow ol 从下标为7的元素开始(包含下标为7的元素)，倒着取到下标为2的元素(不包括下标为2的元素) </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python 字符串快速逆置</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])  <span class="comment"># !dlroW olleH 从后向前，按步长为1进行取值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css预编译语言</title>
      <link href="/2022/03/20/study/css/css%E9%A2%84%E7%BC%96%E8%AF%91%E8%AF%AD%E8%A8%80/"/>
      <url>/2022/03/20/study/css/css%E9%A2%84%E7%BC%96%E8%AF%91%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="css预编译语言"><a href="#css预编译语言" class="headerlink" title="css预编译语言"></a>css预编译语言</h2><h3 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h3><p>2007 年诞生，最早也是最成熟的 <code>Css</code>预处理器，拥有 Ruby 社区的支持和 <code>Compass</code> 这一最强大的 <code>Css</code>框架，目前受 <code>LESS</code> 影响，已经进化到了全面兼容 <code>Css</code> 的 <code>Scss</code></p><p>文件后缀名为<code>.sass</code>与<code>scss</code>，可以严格按照 sass 的缩进方式省去大括号和分号</p><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>2009年出现，受<code>SASS</code>的影响较大，但又使用 <code>Css</code> 的语法，让大部分开发者和设计师更容易上手，在 <code>Ruby</code>社区之外支持者远超过 <code>SASS</code></p><p>其缺点是比起 <code>SASS</code>来，可编程功能不够，不过优点是简单和兼容 <code>Css</code>，反过来也影响了 <code>SASS</code>演变到了<code>Scss</code> 的时代</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>虽然各种预处理器功能强大，但使用最多的，还是以下特性：</p><ul><li>变量（variables）</li><li>作用域（scope）</li><li>代码混合（ mixins）</li><li>嵌套（nested rules）</li><li>代码模块化（Modules）</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>less和scss</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sass</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span></span><br><span class="line">  <span class="attribute">display</span>: block</span><br></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>嵌套语法都是一致的，甚至连引用父级选择器的标记 &amp; 也相同</p><p>区别只是 Sass可以用没有大括号的方式书写</p><p>less</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  &amp;<span class="selector-class">.b</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量无疑为 Css 增加了一种有效的复用方式，减少了原来在 Css 中无法避免的重复「硬编码」</p><p><code>less</code>声明的变量必须以<code>@</code>开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号<code>:</code>分隔开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@red</span>: #c00;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: @red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sass</code>声明的变量跟<code>less</code>十分的相似，只是变量名前面使用<code>@</code>开头</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$red: <span class="number">#c00</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: $red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p><code>Css</code> 预编译器把变量赋予作用域，也就是存在生命周期。就像 <code>js</code>一样，它会先从局部作用域查找变量，依次向上级作用域查找</p><p><code>sass</code>中不存在全局变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$<span class="attribute">color</span>: black;</span><br><span class="line"><span class="selector-class">.scoped</span> &#123;</span><br><span class="line">  $bg: blue;</span><br><span class="line">  $<span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: $color;</span><br><span class="line">  <span class="attribute">background-color</span>:$bg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.unscoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:$color;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:white;<span class="comment">/*是白色*/</span></span><br><span class="line">  <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.unscoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:white;<span class="comment">/*白色（无全局变量概念）*/</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>所以，在<code>sass</code>中最好不要定义相同的变量名</p><p><code>less</code>首先会查找局部定义的变量，如果没有找到，会像冒泡一样，一级一级往下查找，直到根为止</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@color</span>: black;</span><br><span class="line"><span class="selector-class">.scoped</span> &#123;</span><br><span class="line">  <span class="keyword">@bg</span>: blue;</span><br><span class="line">  <span class="keyword">@color</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: @color;</span><br><span class="line">  <span class="attribute">background-color</span>:@bg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.unscoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:@color;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:white;<span class="comment">/*白色（调用了局部变量）*/</span></span><br><span class="line">  <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.unscoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:black;<span class="comment">/*黑色（调用了全局变量）*/</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><p>混入（mixin）应该说是预处理器最精髓的功能之一了，简单点来说，<code>Mixins</code>可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用</p><p>可以在<code>Mixins</code>中定义变量或者默认参数</p><p>在<code>less</code>中，混合的用法是指将定义好的<code>ClassA</code>中引入另一个已经定义的<code>Class</code>，也能使用够传递参数，参数变量为<code>@</code>声明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.highlight</span>(<span class="keyword">@color</span>: red) &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: @color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.heads-up</span> &#123;</span><br><span class="line">  <span class="selector-class">.alert</span>;</span><br><span class="line">  <span class="selector-class">.highlight</span>(red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.heads-up</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Sass</code>声明<code>mixins</code>时需要使用<code>@mixinn</code>，后面紧跟<code>mixin</code>的名，也可以设置参数，参数名为变量<code>$</code>声明的形式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> large-text &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: Arial;</span><br><span class="line">    size: <span class="number">20px</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> large-text;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码模块化"><a href="#代码模块化" class="headerlink" title="代码模块化"></a>代码模块化</h3><p>模块化就是将<code>Css</code>代码分成一个个模块</p><p><code>scss</code>、<code>less</code>使用方法如下所示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./common&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./github-markdown&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./mixin&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./variables&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python循环</title>
      <link href="/2022/01/11/study/python/python%E5%BE%AA%E7%8E%AF/"/>
      <url>/2022/01/11/study/python/python%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="循环的使用场景"><a href="#循环的使用场景" class="headerlink" title="循环的使用场景"></a>循环的使用场景</h2><p>打印一万遍”hello world”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">...(还有<span class="number">99997</span>遍)...</span><br></pre></td></tr></table></figure><p>使用循环语句一句话搞定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>当一段代码需要重复执行多次的时候，我们可以使用循环语句来完成。在Python中，有一下两种循环语句可以使用：</p><ul><li>while 循环</li><li>for 循环</li></ul><h2 id="while-语法"><a href="#while-语法" class="headerlink" title="while 语法"></a>while 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>我们发现，while循环的语法结构和if语句的结构很相像，那么这两个之间有什么区别呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>区别在于，if语句只会执行一次判断条件，条件成立以后，只会执行一次代码块；而while语句，会先执行一次判断条件，如果条件成立，会执行一次代码块，代码块执行完成以后，会再次判断条件语句，如果还成立，将会再执行代码语句… 直到最后条件不成立。</p><p>输出十遍hello world</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span> <span class="comment"># 一定要记得让 i += 1, 否则会造成死循环</span></span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>除了while循环以外，for可以完成循环的功能。 在Python中 for循环可以遍历任何序列的项目，如一个列表或者一个字符串等。</p><h2 id="for循环的格式"><a href="#for循环的格式" class="headerlink" title="for循环的格式"></a>for循环的格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 列表或者字符串等可迭代对象:</span><br><span class="line">    循环满足条件时执行的代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="for循环的使用"><a href="#for循环的使用" class="headerlink" title="for循环的使用"></a>for循环的使用</h2><ul><li>遍历字符串:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">&quot;hello&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h</span><br><span class="line">e</span><br><span class="line">l</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>打印数字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><p>break和continue都用在循环语句里，用来控制循环。</p><h2 id="break的使用"><a href="#break的使用" class="headerlink" title="break的使用"></a>break的使用</h2><p>结束整个循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果是:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="continue的使用"><a href="#continue的使用" class="headerlink" title="continue的使用"></a>continue的使用</h2><p>结束本次循环，开始下一轮循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果是:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><p>前面学习过if的嵌套了，想一想if嵌套是什么样子的？ 类似if的嵌套，while嵌套就是：while里面还有while</p><h2 id="while嵌套的格式"><a href="#while嵌套的格式" class="headerlink" title="while嵌套的格式"></a>while嵌套的格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">        外循环代码块</span><br><span class="line">        <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">            内循环代码块</span><br></pre></td></tr></table></figure><p><strong>内循环一旦开始，则要执行到条件2不满足，才会继续执行外循环的代码。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span>  <span class="comment"># 内外循环的控制变量不能一样</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line"></span><br><span class="line">    j = <span class="number">0</span>  <span class="comment"># 内循环的控制变量必须要在外循环里初始化</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;j= %d&#x27;</span> % j)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;i= %d&#x27;</span> % i)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>在Python中，循环语句还可以和else语句联合使用。</p><p>语法结构:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件:</span><br><span class="line">  条件成立时，循环体代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  条件不成立时，执行的代码</span><br></pre></td></tr></table></figure><p>我们可以看出，在非死循环中，正常情况下else里的语句都是会被执行的。那这个else语句到底有什么作用呢？一般情况下，循环语句和else共同出现时，在循环语句里都会配合break语句来使用。</p><p>查看下面的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环条件不成立时执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python条件判断</title>
      <link href="/2022/01/09/study/python/python%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
      <url>/2022/01/09/study/python/python%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="if语句的使用"><a href="#if语句的使用" class="headerlink" title="if语句的使用"></a>if语句的使用</h2><h3 id="一、if判断语句介绍"><a href="#一、if判断语句介绍" class="headerlink" title="一、if判断语句介绍"></a>一、if判断语句介绍</h3><ul><li>if语句是用来进行判断的，其使用格式如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件:</span><br><span class="line">    条件成立时，要做的事情</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------if判断开始------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我已经成年了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------if判断结束------&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>运行结果:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------<span class="keyword">if</span>判断开始------</span><br><span class="line">我已经成年了</span><br><span class="line">------<span class="keyword">if</span>判断结束------</span><br></pre></td></tr></table></figure><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><blockquote><p>想一想：在使用if的时候，它只能做到满足条件时要做的事情。那万一需要在不满足条件的时候，做某些事，该怎么办呢？</p><p>答：使用 if-else</p></blockquote><h3 id="一、if-else的使用格式"><a href="#一、if-else的使用格式" class="headerlink" title="一、if-else的使用格式"></a>一、if-else的使用格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    满足条件时的操作</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    不满足条件时的操作</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ticket = <span class="number">1</span> <span class="comment"># 用1代表有车票，0代表没有车票</span></span><br><span class="line"><span class="keyword">if</span> ticket == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;有车票，可以上火车&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;终于可以见到Ta了，美滋滋~~~&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有车票，不能上车&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;亲爱的，那就下次见了&quot;</span>）</span><br></pre></td></tr></table></figure><p>结果1：有车票的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有车票，可以上火车</span><br><span class="line">终于可以见到Ta了，美滋滋~~~</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果2：没有车票的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">没有车票，不能上车</span><br><span class="line">亲爱的，那就下次见了</span><br></pre></td></tr></table></figure><h2 id="elif"><a href="#elif" class="headerlink" title="elif"></a>elif</h2><h3 id="一、-elif的功能"><a href="#一、-elif的功能" class="headerlink" title="一、 elif的功能"></a>一、 elif的功能</h3><p>elif的使用格式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> xxx1:</span><br><span class="line">    事情<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> xxx2:</span><br><span class="line">    事情<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> xxx3:</span><br><span class="line">    事情<span class="number">3</span></span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>当xxx1满足时，执行事情1，然后整个if结束</li><li>当xxx1不满足时，那么判断xxx2，如果xxx2满足，则执行事情2，然后整个if结束</li><li>当xxx1不满足时，xxx2也不满足，如果xxx3满足，则执行事情3，然后整个if结束</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">77</span></span><br><span class="line"> <span class="keyword">if</span> score&gt;=<span class="number">90</span> <span class="keyword">and</span> score&lt;=<span class="number">100</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&#x27;挑战成功，等级为A&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> score&gt;=<span class="number">80</span> <span class="keyword">and</span> score&lt;<span class="number">90</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&#x27;挑战成功，等级为B&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> score&gt;=<span class="number">70</span> <span class="keyword">and</span> score&lt;<span class="number">80</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&#x27;挑战成功，等级为C&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> score&gt;=<span class="number">60</span> <span class="keyword">and</span> score&lt;<span class="number">70</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&#x27;挑战失败，等级为D&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> score&gt;=<span class="number">0</span> <span class="keyword">and</span> score&lt;<span class="number">60</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&#x27;挑战失败，等级为E&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>可以和else一起使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 性别为男性:</span><br><span class="line">    输出男性的体重</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> 性别为女性:</span><br><span class="line">    输出女性的体重</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    第三种性别的体重</span><br><span class="line">    ...</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>当 “性别为男性” 满足时，执行 “输出男性的体重”的相关代码</li><li>当 “性别为男性” 不满足时，如果 “性别为女性”满足，则执行 “输出女性的体重”的相关代码</li><li>当 “性别为男性” 不满足，“性别为女性”也不满足，那么久默认执行else后面的代码，即 “第三种性别的体重”相关代码</li></ul></li></ul><blockquote><p>elif必须和if一起使用，否则出错 else 一般用在最后，即所有条件都不满足时使用</p></blockquote><h2 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h2><p>通过学习if的基本用法，已经知道了</p><ul><li>当需要满足条件去做事情的这种情况需要使用if</li><li>当满足条件时做事情A，不满足条件做事情B的这种情况使用if-else</li></ul><p>想一想：</p><blockquote><p>坐火车或者地铁的实际情况是：先进行安检如果安检通过才会判断是否有车票，或者是先检查是否有车票之后才会进行安检，即实际的情况某个判断是再另外一个判断成立的基础上进行的，这样的情况该怎样解决呢？</p></blockquote><p>答：</p><blockquote><p>if嵌套</p></blockquote><h3 id="if嵌套的格式"><a href="#if嵌套的格式" class="headerlink" title="if嵌套的格式"></a>if嵌套的格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">    满足条件<span class="number">1</span> 做的事情<span class="number">1</span></span><br><span class="line">    满足条件<span class="number">1</span> 做的事情<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>:</span><br><span class="line">        满足条件<span class="number">2</span> 做的事情<span class="number">1</span></span><br><span class="line">        满足条件<span class="number">2</span> 做的事情<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>说明<ul><li>外层的if判断，也可以是if-else</li><li>内层的if判断，也可以是if-else</li><li>根据实际开发的情况，进行选择</li></ul></li></ul><h3 id="if嵌套的应用"><a href="#if嵌套的应用" class="headerlink" title="if嵌套的应用"></a>if嵌套的应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ticket = <span class="number">1</span>     <span class="comment"># 用1代表有车票，0代表没有车票</span></span><br><span class="line">knife_length = <span class="number">9</span>     <span class="comment"># 刀子的长度，单位为cm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ticket == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;有车票，可以进站&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> knife_length &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;通过安检&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;终于可以见到Ta了，美滋滋~~~&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有通过安检&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;刀子的长度超过规定，等待警察处理...&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有车票，不能进站&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;亲爱的，那就下次见了&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果1：ticket = 1;knife_length = 9</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有车票，可以进站</span><br><span class="line">通过安检</span><br><span class="line">终于可以见到Ta了，美滋滋~~~</span><br></pre></td></tr></table></figure><p>结果2：ticket = 1;knife_length = 20</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有车票，可以进站</span><br><span class="line">没有通过安检</span><br><span class="line">刀子的长度超过规定，等待警察处理...</span><br></pre></td></tr></table></figure><p>结果3：ticket = 0;knife_length = 9</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">没有车票，不能进站</span><br><span class="line">亲爱的，那就下次见了</span><br></pre></td></tr></table></figure><p>结果4：ticket = 0;knife_length = 20</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">没有车票，不能进站</span><br><span class="line">亲爱的，那就下次见了</span><br></pre></td></tr></table></figure><h2 id="区间比较"><a href="#区间比较" class="headerlink" title="区间比较:"></a>区间比较:</h2><p>在Python中允许类似于 <code>5&lt;a&lt;10</code> 的写法，这种写法在很多编程语言里都是不允许的，需要使用逻辑与运算符进行连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="number">1</span>&lt;a&lt;<span class="number">20</span>  <span class="comment"># True</span></span><br><span class="line"><span class="number">11</span>&lt;a&lt;<span class="number">20</span>  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符:"></a>三元运算符:</h2><p>格式： <code>变量 = 值1 if 条件 else 值2</code> 当条件成立时把 值1 赋值给变量，条件不成立时把 值2 赋值给变量，其实就是对if…else 语句的一种简写。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    c = a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    c = b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a和b两个数的较大值是%d&#x27;</span>%c)</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>以上的 <code>if...else</code> 代码可以简写成以下格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line">c = a <span class="keyword">if</span> a&gt;b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a和b两个数的较大值是%d&#x27;</span>%c)</span><br></pre></td></tr></table></figure><h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><p>if 语句需要一个判断条件，这个判断条件的结果需要一个布尔值。如果此时输入的判断条件不是一个布尔值，在代码执行的过程中，会将这个值自动转换成为一个布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span>&lt;<span class="number">2</span>: <span class="comment"># if语句的判断条件需要一个布尔值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1小于2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;hello&quot;</span>: <span class="comment"># if 判断条件后没有传入布尔值，会自动把它转换成为布尔值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这段代码是否会输出呢？&quot;</span>)</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>提示：在Python中，转换成为布尔值时，只有 <code>0,&quot;&quot;,&#39;&#39;,None,(),&#123;&#125;,[]</code> 会被转换成为False,其他都会被转换成为True</p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python运算符优先级</title>
      <link href="/2022/01/08/study/python/python%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2022/01/08/study/python/python%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>当多种运算符做混合运算时，就会涉及到先运算哪个，后运算哪个问题。以下表格列出了从最高到最低优先级的所有运算符：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not&gt;and&gt;or</td><td>逻辑运算符</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span> <span class="keyword">and</span> <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">or</span> <span class="keyword">not</span> <span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a ** <span class="number">3</span> &gt; <span class="number">5</span> <span class="keyword">and</span> a + <span class="number">2</span> &gt; <span class="number">3</span> <span class="keyword">or</span> a * <span class="number">4</span> + <span class="number">8</span> == <span class="number">16</span> <span class="keyword">and</span> <span class="keyword">not</span> a == <span class="literal">True</span> <span class="keyword">and</span> -a &lt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>在实际开发中，如果有多种运算符进行混合运算时，<strong>强烈建议使用小括号来手动的控制运算符的优先级！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>    <span class="comment"># bad </span></span><br><span class="line">c = <span class="literal">True</span> <span class="keyword">or</span> (<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>)  <span class="comment"># good</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python位运算符</title>
      <link href="/2022/01/07/study/python/python%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/01/07/study/python/python%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>按位运算符是把数字看作是二进制来进行计算的。 下表中变量 a 为 60，b 为 13，二进制格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = 0011 1100  # 60的二进制</span><br><span class="line">b = 0000 1101  # 13的二进制</span><br><span class="line">-----------------</span><br><span class="line">a&amp;b = 0000 1100</span><br><span class="line">a|b = 0011 1101</span><br><span class="line">a^b = 0011 0001</span><br><span class="line">~a  = 1100 0011</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><table><thead><tr><th>位运算</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td>|</td><td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td>(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td>^</td><td>按位异或运算符：当两对应的二进位相异时，结果为1</td><td>a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td>~</td><td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1</td><td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补0。</td><td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，**&gt;&gt;** 右边的数字指定了移动的位数</td><td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python逻辑运算符</title>
      <link href="/2022/01/03/study/python/python%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/01/03/study/python/python%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>只要有一个运算数是False，结果就是False; 只有所有的运算数都为True时，结果才是True 做取值运算时，取第一个为False的值，如果所有的值都为True,取最后一个值。</td><td>True and True and False–&gt;结果为False True and True and True–&gt;结果为True 1 and 0 and 2–&gt;结果是0;1 and 2 and 3–&gt;结果是3</td></tr><tr><td>or</td><td>x or y</td><td>只要有一个运算数是True，结果就是True; 只有所有的运算数都为False时，结果才是False 做取值运算时，取第一个为True的值，如果所有的值都为False,取最后一个值。</td><td>False or False or True–&gt;结果为True False or False or False–&gt;结果为False 1 or 0 or 2–&gt;结果是1;0 or None or () or ‘’ or {} –&gt;结果是{}</td></tr><tr><td>not</td><td>not x</td><td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not(a and b) 返回 False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">34</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((a &gt; b) <span class="keyword">and</span> (b &gt; <span class="number">10</span>) <span class="keyword">and</span> (a &gt; <span class="number">30</span>) <span class="keyword">and</span> (a &gt; <span class="number">50</span>)) </span><br><span class="line"><span class="built_in">print</span>((a &gt; b) <span class="keyword">and</span> (b &gt; <span class="number">10</span>) <span class="keyword">and</span> (a &gt; <span class="number">30</span>) <span class="keyword">and</span> (a &lt; <span class="number">50</span>)) </span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b <span class="keyword">and</span> <span class="string">&#x27;hello&#x27;</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b <span class="keyword">and</span> <span class="string">&#x27;hello&#x27;</span> <span class="keyword">and</span> <span class="number">123</span> <span class="keyword">and</span> <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((a &gt; <span class="number">50</span>) <span class="keyword">or</span> (b &lt; <span class="number">10</span>) <span class="keyword">or</span> a &gt; b <span class="keyword">or</span> (a == b))</span><br><span class="line"><span class="built_in">print</span>((a &gt; <span class="number">50</span>) <span class="keyword">or</span> (b &lt; <span class="number">10</span>) <span class="keyword">or</span> a &lt; b <span class="keyword">or</span> (a == b))</span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">or</span> <span class="literal">None</span> <span class="keyword">or</span> a <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">or</span> <span class="string">&quot;&quot;</span> <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>以下代码的输出结果是什么，为什么会有这样的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">34</span></span><br><span class="line"></span><br><span class="line">a &gt; <span class="number">10</span> <span class="keyword">and</span> <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">a &lt; <span class="number">10</span> <span class="keyword">and</span> <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a &gt;<span class="number">10</span> <span class="keyword">or</span> <span class="built_in">print</span>(<span class="string">&#x27;你好世界&#x27;</span>)</span><br><span class="line">a &lt;<span class="number">10</span> <span class="keyword">or</span> <span class="built_in">print</span>(<span class="string">&#x27;你好世界&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="？"><a href="#？" class="headerlink" title="？"></a>？</h2><ol><li>逻辑运算的短路问题</li><li>逻辑与运算和逻辑或运算取值时为什么是那种规则。</li></ol>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python赋值运算符</title>
      <link href="/2022/01/01/study/python/python%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/01/01/study/python/python%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ul><li>基本赋值运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>赋值运算符</td><td>把 = 号右边的结果 赋给 左边的变量，如 num = 1 + 2 * 3，结果num的值为7</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个变量赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时为多个变量赋值(使用等号连接)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = b = <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个变量赋值(使用逗号分隔)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num1, f1, str1 = <span class="number">100</span>, <span class="number">3.14</span>, <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num1</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1</span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法错误，值的个数超过变量的个数，赋值失败</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num1,num2=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: too many values to unpack (expected <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法错误，变量的个数超过值得个数，赋值失败</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num1,num2,num3,num4=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="keyword">not</span> enough values to unpack (expected <span class="number">4</span>, got <span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li>复合赋值运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c **= a 等效于 c = c ** a</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：+=</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a += <span class="number">1</span>  <span class="comment"># 相当于执行 a = a + 1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">101</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：*=</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a *= <span class="number">2</span>  <span class="comment"># 相当于执行 a = a * 2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：*=，运算时，符号右侧的表达式先计算出结果，再与左边变量的值运算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a *= <span class="number">1</span> + <span class="number">2</span>  <span class="comment"># 相当于执行 a = a * (1+2)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">300</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：赋值运算符是从右往左运算，将等号右边的值赋值给等号左边，所以，<strong>等号的左边一定不能是常量或者表达式。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python比较运算符</title>
      <link href="/2021/12/31/study/python/python%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2021/12/31/study/python/python%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>等于 - 比较对象是否相等</td><td>(a == b) 返回 False.</td></tr><tr><td>!=</td><td>不等于 - 比较两个对象是否不相等</td><td>(a != b) 返回 true.</td></tr><tr><td>&lt;&gt;</td><td>不等于 - 比较两个对象是否不相等</td><td>(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</td></tr><tr><td>&gt;</td><td>大于 - 返回x是否大于y</td><td>(a &gt; b) 返回 False。</td></tr><tr><td>&lt;</td><td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td>(a &lt; b) 返回 true。</td></tr><tr><td>&gt;=</td><td>大于等于 - 返回x是否大于等于y。</td><td>(a &gt;= b) 返回 False。</td></tr><tr><td>&lt;=</td><td>小于等于 - 返回x是否小于等于y。</td><td>(a &lt;= b) 返回 true。</td></tr></tbody></table><h2 id="字符串使用比较运算符"><a href="#字符串使用比较运算符" class="headerlink" title="字符串使用比较运算符"></a>字符串使用比较运算符</h2><ul><li>数字和字符串做<code>==</code>运算结果是false,除了 <code>==</code> 以外的逻辑运算时，会直接报错。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [3]: str1==a</span><br><span class="line">Out[3]: False</span><br><span class="line">In [4]: str1&gt;a</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line"> in </span><br><span class="line"><span class="meta prompt_">----&gt; </span><span class="language-bash">1 str1&gt;a</span></span><br><span class="line"></span><br><span class="line">TypeError: &#x27;&gt;&#x27; not supported between instances of &#x27;str&#x27; and &#x27;int&#x27;</span><br><span class="line"></span><br><span class="line">In [5]: str1 in </span><br><span class="line"><span class="meta prompt_">----&gt; </span><span class="language-bash">1 str1Copy</span></span><br></pre></td></tr></table></figure><ul><li>如果是两个字符串进行比较，会将每个字符都转换成对应的编码，然后逐一进行对比。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [1]: str1=&#x27;a&#x27; </span><br><span class="line">In [2]: str2=&#x27;ABC&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将字符转换成为对应的编码  a对应的编码是97,A对应的编码是65</span></span><br><span class="line">In [3]: str1 &gt; str2</span><br><span class="line">Out[3]: True</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python算数运算符</title>
      <link href="/2021/12/27/study/python/python%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2021/12/27/study/python/python%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>下面以a=10 ,b=20为例进行计算。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>两个对象相加 a + b 输出结果 30</td></tr><tr><td>-</td><td>减</td><td>得到负数或是一个数减去另一个数 a - b 输出结果 -10</td></tr><tr><td>*</td><td>乘</td><td>两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200</td></tr><tr><td>/</td><td>除</td><td>b / a 输出结果 2</td></tr><tr><td>//</td><td>取整除</td><td>返回商的整数部分 9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</td></tr><tr><td>%</td><td>取余</td><td>返回除法的余数 b % a 输出结果 0</td></tr><tr><td>**</td><td>指数</td><td>a**b 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td>()</td><td>小括号</td><td>提高运算优先级，比如: (1+2) * 3</td></tr></tbody></table><blockquote><p>注意：混合运算时，优先级顺序为： <code>**</code> 高于 <code>* / % //</code> 高于 <code>+ -</code> ，为了避免歧义，建议使用 () 来处理运算符优先级。 并且，不同类型的数字在进行混合运算时，整数将会转换成浮点数进行运算。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> + <span class="number">5.5</span> * <span class="number">2</span></span><br><span class="line"><span class="number">21.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">10</span> + <span class="number">5.5</span>) * <span class="number">2</span></span><br><span class="line"><span class="number">31.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="算数运算符在字符串里的使用"><a href="#算数运算符在字符串里的使用" class="headerlink" title="算数运算符在字符串里的使用"></a>算数运算符在字符串里的使用</h2><ul><li>如果是两个字符串做加法运算，会直接把这两个字符串拼接成一个字符串。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [1]: str1 =&#x27;hello&#x27;</span><br><span class="line"></span><br><span class="line">In [2]: str2 = &#x27;world&#x27;</span><br><span class="line"></span><br><span class="line">In [3]: str1+str2</span><br><span class="line">Out[3]: &#x27;helloworld&#x27;</span><br><span class="line"></span><br><span class="line">In [4]:</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果是数字和字符串做加法运算，会直接报错。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [1]: str1 = &#x27;hello&#x27;</span><br><span class="line"></span><br><span class="line">In [2]: a = 2</span><br><span class="line"></span><br><span class="line">In [3]: a+str1</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line"> in </span><br><span class="line"><span class="meta prompt_">----&gt; </span><span class="language-bash">1 a+str1</span></span><br><span class="line"></span><br><span class="line">TypeError: unsupported operand type(s) for +: &#x27;int&#x27; and &#x27;str&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果是数字和字符串做乘法运算，会将这个字符串重复多次。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [4]: str1 = &#x27;hello&#x27;</span><br><span class="line"></span><br><span class="line">In [5]: str1*10</span><br><span class="line">Out[5]: &#x27;hellohellohellohellohellohellohellohellohellohello&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python类型转换</title>
      <link href="/2021/12/25/study/python/python%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2021/12/25/study/python/python%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>int(x [,base ])</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换为一个浮点数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>bool(x)</td><td>将对象x转换成为布尔值</td></tr></tbody></table><ul><li>转换成为整数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;123&quot;</span>))  <span class="comment"># 123 将字符串转换成为整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">123.78</span>))  <span class="comment"># 123 将浮点数转换成为整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">True</span>))  <span class="comment"># 1 布尔值True转换成为整数是 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">False</span>)) <span class="comment"># 0 布尔值False转换成为整数是 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种情况将会转换失败</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">123.456 和 12ab 字符串，都包含非法字符，不能被转换成为整数，会报错</span></span><br><span class="line"><span class="string">print(int(&quot;123.456&quot;))</span></span><br><span class="line"><span class="string">print(int(&quot;12ab&quot;))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用int()函数进行类型转换时，还可以传入两个参数，第二个参数用来表示进制。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;21&quot;</span>,<span class="number">8</span>))  <span class="comment"># 输出的结果是17.八进制的21,对应的十进制数字是17</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;F0&quot;</span>,<span class="number">16</span>)) <span class="comment"># 输出的结果是240.十六进制的F0,对应的十进制数字是240</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">以下写法会报错。八进制里允许的最大值是7,所以 29 不是一个合法的八进制数</span></span><br><span class="line"><span class="string">print(int(&quot;29&quot;,8))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>转换成为浮点数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="built_in">float</span>(<span class="string">&quot;12.34&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f1)   <span class="comment"># 12.34</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f1)) <span class="comment"># float 将字符串的 &quot;12.34&quot; 转换成为浮点数 12.34</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="built_in">float</span>(<span class="number">23</span>)</span><br><span class="line"><span class="built_in">print</span>(f2)  <span class="comment"># 23.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f2)) <span class="comment"># float 将整数转换成为了浮点数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>转换成为字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="built_in">str</span>(<span class="number">45</span>)</span><br><span class="line">str2 = <span class="built_in">str</span>(<span class="number">34.56</span>)</span><br><span class="line">str3 = <span class="built_in">str</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str1),<span class="built_in">type</span>(str2),<span class="built_in">type</span>(str3))</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>转换成为布尔值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(&#123;&#125;))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([])）</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(())）</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="literal">None</span>)）</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><strong>在python中，只有空字符串<code>&#39;&#39;,&quot;&quot;</code>，数字0,空字典{},空列表[],空元组(),和空数据None会被转换成为False,其他的都会被转换成为True</strong></p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python类型操作</title>
      <link href="/2021/12/23/study/python/python%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/12/23/study/python/python%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>现代的计算机和依赖计算机的设备里都用到二进制(即0和1)来保存和表示数据，一个二进制表示一个比特(Bit)。</p><p>在二进制的基础上，计算机还支持八进制和十六进制这两种进制。</p><p>除了计算机里的进制以外，我们生活中经常用到的是十进制。</p><p>Python语言支持二进制、八进制、十六进制以及十进制的数字表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span> <span class="comment"># 默认数字是十进制</span></span><br><span class="line"><span class="built_in">print</span>(a + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">b = <span class="number">0b11101</span>   <span class="comment"># 以0b开头的数字是二进制</span></span><br><span class="line"><span class="built_in">print</span>(b + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="number">0o12</span>  <span class="comment"># 以 0o 开头的数字是八进制</span></span><br><span class="line"><span class="built_in">print</span>(c + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = <span class="number">0x1A</span>  <span class="comment"># 以 0x 开头的数字是十六进制</span></span><br><span class="line"><span class="built_in">print</span>(d + <span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>不同进制的数字之间可以通过一定的计算规则相互转换。</p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python输入</title>
      <link href="/2021/12/21/study/python/python%E8%BE%93%E5%85%A5/"/>
      <url>/2021/12/21/study/python/python%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="python输入"><a href="#python输入" class="headerlink" title="python输入"></a>python输入</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>在Python中，获取键盘输入的数据的方法是采用 input 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;您刚刚输入的密码是:%s&#x27;</span> % password)</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>input()的小括号中放入的是提示信息，用来在获取数据之前给用户的一个简单提示</li><li>input()在从键盘获取了数据以后，会存放到等号右边的变量中</li><li>input()会把用户输入的任何值都作为字符串来对待</li></ul>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python输出</title>
      <link href="/2021/12/20/study/python/python%E8%BE%93%E5%87%BA/"/>
      <url>/2021/12/20/study/python/python%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="python中变量的输出"><a href="#python中变量的输出" class="headerlink" title="python中变量的输出"></a>python中变量的输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我今年%d岁&quot;</span> % age)</span><br><span class="line"></span><br><span class="line">age += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我今年%d岁&quot;</span> % age)</span><br><span class="line"></span><br><span class="line">age += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我今年%d岁&quot;</span> % age)</span><br></pre></td></tr></table></figure><p>在程序中，看到了%这样的操作符，这就是Python中格式化输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">name = <span class="string">&quot;xiaohua&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的姓名是%s, 年龄是%d&quot;</span> % (name, age))</span><br></pre></td></tr></table></figure><h2 id="常用的格式符号"><a href="#常用的格式符号" class="headerlink" title="常用的格式符号"></a>常用的格式符号</h2><p>下面是完整的，它可以与％符号使用列表:</p><table><thead><tr><th>格式符号</th><th>转换</th></tr></thead><tbody><tr><td>%%</td><td>输出 % 号</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>有符号十进制整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%c</td><td>字符</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%x</td><td>十六进制整数（小写字母0x）</td></tr><tr><td>%X</td><td>十六进制整数（大写字母0X）</td></tr><tr><td>%e</td><td>科学计数法（小写’e’）</td></tr><tr><td>%E</td><td>科学计数法（大写“E”）</td></tr><tr><td>%g</td><td>％f和％e 的简写</td></tr><tr><td>%G</td><td>％f和％E的简写</td></tr></tbody></table><h2 id="换行输出"><a href="#换行输出" class="headerlink" title="换行输出"></a>换行输出</h2><p>在输出的时候，如果有\n那么，此时\n后的内容会在另外一行显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1234567890-------&quot;</span>) <span class="comment"># 会在一行显示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1234567890\n-------&quot;</span>) <span class="comment"># 一行显示1234567890，另外一行显示-------</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python标识符、关键字</title>
      <link href="/2021/12/18/study/python/python%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
      <url>/2021/12/18/study/python/python%E6%A0%87%E8%AF%86%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="python命名规则"><a href="#python命名规则" class="headerlink" title="python命名规则"></a>python命名规则</h2><ol><li>标识符由字母、下划线和数字组成，且数字不能开头。</li><li>严格区分大小写。</li><li>不能使用关键字</li></ol><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li>标识符命名要做到顾名思义。</li></ul><blockquote><p>起一个有意义的名字，尽量做到看一眼就知道是什么意思(提高代码可 读性) 比如: 名字 就定义为 name , 定义地址用 address</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;zhangsan&quot;</span>  <span class="comment"># bad</span></span><br><span class="line">name = <span class="string">&quot;zhangsan&quot;</span>  <span class="comment"># good</span></span><br><span class="line">b = <span class="number">23</span>   <span class="comment"># bad</span></span><br><span class="line">age = <span class="number">23</span> <span class="comment"># good</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><ul><li><p>遵守一定的命名规范。</p><ul><li>驼峰命名法，又分为大驼峰命名法和小驼峰命名法。</li></ul></li><li><ul><li>小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始；第二个单词的首字母大写，例如：myName、aDog</li><li>大驼峰式命名法（upper camel case）： 每一个单字的首字母都采用大写字母，例如：FirstName、LastName.</li></ul></li><li><p>还有一种命名法是用下划线“_”来连接所有的单词，比如send_buf. Python的命令规则遵循PEP8标准：</p></li></ul><blockquote><p>变量名，函数名和文件名全小写，使用下划线连接； 类名遵守大驼峰命名法； 常量名全大写；</p></blockquote><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>关键字的概念 一些具有特殊功能的标识符，这就是所谓的关键字。 关键字，已经被python官方使用了，所以不允许开发者自己定义和关键字相同名字的标识符。</li><li>关键字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span>     <span class="literal">None</span>    <span class="literal">True</span>   <span class="keyword">and</span>      <span class="keyword">as</span>       <span class="keyword">assert</span>   <span class="keyword">break</span>     <span class="keyword">class</span>  </span><br><span class="line"><span class="title class_">continue</span>  <span class="keyword">def</span>     <span class="title function_">del</span>    <span class="keyword">elif</span>     <span class="keyword">else</span>     <span class="keyword">except</span>   <span class="keyword">finally</span>   <span class="keyword">for</span></span><br><span class="line"><span class="keyword">from</span>      <span class="keyword">global</span>  <span class="keyword">if</span>     <span class="keyword">import</span>   <span class="keyword">in</span>       <span class="keyword">is</span>       <span class="keyword">lambda</span>    <span class="keyword">nonlocal</span></span><br><span class="line"><span class="keyword">not</span>       <span class="keyword">or</span>      <span class="keyword">pass</span>   <span class="keyword">raise</span>    <span class="keyword">return</span>   <span class="keyword">try</span>      <span class="keyword">while</span>     <span class="keyword">with</span>  </span><br><span class="line"><span class="keyword">yield</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础</title>
      <link href="/2021/12/15/study/python/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/15/study/python/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>在Python中支持单行注释和多行注释。</p><p>单行注释</p><p>以#开头，#右边的所有东西当做说明，而不是真正要执行的程序，起辅助说明作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #开头右边的都是注释，解析器会忽略注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)  <span class="comment">#我的作用是在控制台输出hello world</span></span><br></pre></td></tr></table></figure><p>多行注释</p><p>以<code>&#39;&#39;&#39;</code>开始，并以<code>&#39;&#39;&#39;</code> 结束，我们称之为多行注释。</p><h1 id="变量以及数据类型"><a href="#变量以及数据类型" class="headerlink" title="变量以及数据类型"></a>变量以及数据类型</h1><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;今天天气真好&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;今天天气真好&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;今天天气真好&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量表示这个字符串。如果需要修改内容，只需要修改变量对应的值即可</span></span><br><span class="line">weather = <span class="string">&quot;今天天气真好&quot;</span></span><br><span class="line"><span class="built_in">print</span>(weather)  <span class="comment"># 注意，变量名不需要使用引号包裹</span></span><br><span class="line"><span class="built_in">print</span>(weather)</span><br><span class="line"><span class="built_in">print</span>(weather)</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>所谓变量名，可以理解为箱子，当需要使用变量值，就把对应的箱子拿来。</li><li>变量即是可以变化的量，可以随时进行修改。</li><li>程序就是用来处理数据的，而变量就是用来存储数据的</li></ul><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>Python有五个标准的数据类型：</p><ul><li>Numbers（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Dictionary（字典）</li></ul><p>Python支持四种不同的数字类型：</p><ul><li>int（有符号整型）</li><li>long（长整型，也可以代表八进制和十六进制）</li><li>float（浮点型）</li><li>complex（复数）</li></ul><h3 id="Python-数字"><a href="#Python-数字" class="headerlink" title="Python 数字"></a>Python 数字</h3><p>数字数据类型用于存储数值。</p><p>他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。</p><p>当你指定一个值时，Number 对象就会被创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 = 1</span><br><span class="line">var2 = 10</span><br></pre></td></tr></table></figure><p>您也可以使用del语句删除一些对象的引用。</p><p>del语句的语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del var1[,var2[,var3[....,varN]]]</span><br></pre></td></tr></table></figure><p>您可以通过使用del语句删除单个或多个对象的引用。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del var</span><br><span class="line">del var_a, var_b</span><br></pre></td></tr></table></figure><h3 id="Python字符串"><a href="#Python字符串" class="headerlink" title="Python字符串"></a>Python字符串</h3><p>字符串或串(String)是由数字、字母、下划线组成的一串字符。</p><p>一般记为 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;a1a2···an&quot;</span><br></pre></td></tr></table></figure><h3 id="Python列表"><a href="#Python列表" class="headerlink" title="Python列表"></a>Python列表</h3><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。</p><p>列表用 <strong>[ ]</strong> 标识，是 python 最通用的复合数据类型。</p><p>列表中值的切割也可以用到变量 <strong>[头下标:尾下标]</strong> ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;runoob&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;john&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>               <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">0</span>]            <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>]          <span class="comment"># 输出第二个至第三个元素 </span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">2</span>:]           <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> tinylist * <span class="number">2</span>       <span class="comment"># 输出列表两次</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;runoob&#x27;, 786, 2.23, &#x27;john&#x27;, 70.2]</span><br><span class="line">runoob</span><br><span class="line">[786, 2.23]</span><br><span class="line">[2.23, &#x27;john&#x27;, 70.2]</span><br><span class="line">[123, &#x27;john&#x27;, 123, &#x27;john&#x27;]</span><br><span class="line">[&#x27;runoob&#x27;, 786, 2.23, &#x27;john&#x27;, 70.2, 123, &#x27;john&#x27;]</span><br></pre></td></tr></table></figure><h2 id="Python-元组"><a href="#Python-元组" class="headerlink" title="Python 元组"></a>Python 元组</h2><p>元组是另一个数据类型，类似于 List（列表）。</p><p>元组用 <strong>()</strong> 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。</p><p>元组不允许更新，而列表是允许更新的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;runoob&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">70.2</span> )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;john&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>               <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>[<span class="number">0</span>]            <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>]          <span class="comment"># 输出第二个至第四个（不包含）的元素 </span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>[<span class="number">2</span>:]           <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> tinytuple * <span class="number">2</span>       <span class="comment"># 输出元组两次</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span> + tinytuple   <span class="comment"># 打印组合的元组</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;runoob&#x27;, 786, 2.23, &#x27;john&#x27;, 70.2)</span><br><span class="line">runoob</span><br><span class="line">(786, 2.23)</span><br><span class="line">(2.23, &#x27;john&#x27;, 70.2)</span><br><span class="line">(123, &#x27;john&#x27;, 123, &#x27;john&#x27;)</span><br><span class="line">(&#x27;runoob&#x27;, 786, 2.23, &#x27;john&#x27;, 70.2, 123, &#x27;john&#x27;)</span><br></pre></td></tr></table></figure><h2 id="Python-字典"><a href="#Python-字典" class="headerlink" title="Python 字典"></a>Python 字典</h2><p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。</p><p>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典用”{ }”标识。字典由索引(key)和它对应的值value组成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[&#x27;one&#x27;] = &quot;This is one&quot;</span><br><span class="line">dict[2] = &quot;This is two&quot;</span><br><span class="line"> </span><br><span class="line">tinydict = &#123;&#x27;name&#x27;: &#x27;runoob&#x27;,&#x27;code&#x27;:6734, &#x27;dept&#x27;: &#x27;sales&#x27;&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">print dict[&#x27;one&#x27;]          # 输出键为&#x27;one&#x27; 的值</span><br><span class="line">print dict[2]              # 输出键为 2 的值</span><br><span class="line">print tinydict             # 输出完整的字典</span><br><span class="line">print tinydict.keys()      # 输出所有键</span><br><span class="line">print tinydict.values()    # 输出所有值</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is one</span><br><span class="line">This is two</span><br><span class="line">&#123;&#x27;dept&#x27;: &#x27;sales&#x27;, &#x27;code&#x27;: 6734, &#x27;name&#x27;: &#x27;runoob&#x27;&#125;</span><br><span class="line">[&#x27;dept&#x27;, &#x27;code&#x27;, &#x27;name&#x27;]</span><br><span class="line">[&#x27;sales&#x27;, 6734, &#x27;runoob&#x27;]</span><br></pre></td></tr></table></figure><h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h2><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[int(x <a href="https://www.runoob.com/python/python-func-int.html">,base])</a></td><td align="left">将x转换为一个整数</td></tr><tr><td align="left">[long(x <a href="https://www.runoob.com/python/python-func-long.html">,base] )</a></td><td align="left">将x转换为一个长整数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-float.html">float(x)</a></td><td align="left">将x转换到一个浮点数</td></tr><tr><td align="left">[complex(real <a href="https://www.runoob.com/python/python-func-complex.html">,imag])</a></td><td align="left">创建一个复数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-str.html">str(x)</a></td><td align="left">将对象 x 转换为字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-repr.html">repr(x)</a></td><td align="left">将对象 x 转换为表达式字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-eval.html">eval(str)</a></td><td align="left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-tuple-tuple.html">tuple(s)</a></td><td align="left">将序列 s 转换为一个元组</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-list-list.html">list(s)</a></td><td align="left">将序列 s 转换为一个列表</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-set.html">set(s)</a></td><td align="left">转换为可变集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-dict.html">dict(d)</a></td><td align="left">创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-frozenset.html">frozenset(s)</a></td><td align="left">转换为不可变集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-chr.html">chr(x)</a></td><td align="left">将一个整数转换为一个字符</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-unichr.html">unichr(x)</a></td><td align="left">将一个整数转换为Unicode字符</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-ord.html">ord(x)</a></td><td align="left">将一个字符转换为它的整数值</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-hex.html">hex(x)</a></td><td align="left">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-func-oct.html">oct(x)</a></td><td align="left">将一个整数转换为一个八进制字符串</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python开始</title>
      <link href="/2021/12/10/study/python/python%E5%BC%80%E5%A7%8B/"/>
      <url>/2021/12/10/study/python/python%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p>想要进行Python开发，首先需要下载和配置Python解释器。</p><h2 id="下载Python"><a href="#下载Python" class="headerlink" title="下载Python"></a>下载Python</h2><ul><li>访问Python官网: <a href="https://www.python.org/">https://www.python.org/</a></li><li>点击downloads按钮，在下拉框中选择系统类型(windows/Mac OS/Linux等)</li><li>选择下载最新版本的Python</li></ul><h2 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h2><ul><li>点击电脑左下角开始按钮，输入<code>cmd</code> 进入到windows的命令行模式。</li><li>在命令行中输入Python,正确显示Python版本，即表示Python安装成功 </li><li>如果在命令行中输入python出现错误 可能是因为在安装Python的过程中没有勾选 <code>Add Python 3.7 to PATH</code> 选项，此时需要手动对Python进行配置。</li></ul><h2 id="手动配置Python"><a href="#手动配置Python" class="headerlink" title="手动配置Python"></a>手动配置Python</h2><p>注意：如果在安装过程中，已经勾选了 <code>Add Python 3.7 to PATH</code>选项，并且在<code>cmd</code> 命令模式下输入<code>python</code>指令不报错，就不需要再手动的配置Python.</p><p>右键<code>此电脑</code> –&gt; 选择 <code>属性</code></p><p>选择<code>高级系统设置</code>–&gt;<code>环境变量</code>–&gt;找到并且双击<code>Path</code></p><p>双击<code>Path</code>,在弹框里点击新建，找到Python的安装目录，把路径添加进去</p><h2 id="pip的使用"><a href="#pip的使用" class="headerlink" title="pip的使用"></a>pip的使用</h2><p>pip 是一个现代的，通用的Python包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能，便于我们对Python的资源包进行管理。</p><p>在安装Python时，会自动下载并且安装pip.</p><h2 id="使用pip管理Python包"><a href="#使用pip管理Python包" class="headerlink" title="使用pip管理Python包"></a>使用pip管理Python包</h2><ul><li>pip install <code>&lt;包名&gt;</code> 安装指定的包</li><li>pip uninstall <code>&lt;包名&gt;</code> 删除指定的包</li><li>pip list 显示已经安装的包</li><li>pip freeze 显示已经安装的包，并且以指定的格式显示</li><li>pip install -r required.txt 安装required.txt文件里列出的安装包</li></ul><h2 id="修改pip下载源"><a href="#修改pip下载源" class="headerlink" title="修改pip下载源"></a>修改pip下载源</h2><p>运行pip install 命令会从网站上下载指定的python包，默认是从 <code>https://files.pythonhosted.org/</code> 网站上下载。这是个国外的网站，遇到网络情况不好的时候，可能会下载失败，我们可以通过命令，修改pip现在软件时的源。 格式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名 -i 国内源地址</span><br></pre></td></tr></table></figure><p>示例: <code>pip install flask -i https://pypi.mirrors.ustc.edu.cn/simple/</code> 就是从中国科技大学(ustc)的服务器上下载flask(基于python的第三方web框架)</p><h2 id="国内常用的pip下载源列表"><a href="#国内常用的pip下载源列表" class="headerlink" title="国内常用的pip下载源列表:"></a>国内常用的pip下载源列表:</h2><ul><li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li><li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li><li>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></li></ul><h2 id="Pycharm的下载和安装"><a href="#Pycharm的下载和安装" class="headerlink" title="Pycharm的下载和安装"></a>Pycharm的下载和安装</h2><p>IDE的概念 IDE(Integrated Development Environment)又被称为<strong>集成开发环境</strong>。说白了，就是有一款图形化界面的软件，它集成了编辑代码，编译代码，分析代码，执行代码以及调试代码等功能。在我们Python开发中，最常用的IDE是Pycharm.</p><p>pycharm由捷克公司JetBrains开发的一款IDE,提供代码分析、图形化调试器，集成测试器、集成版本控制系统等，主要用来编写Python代码。<br>下载地址:<a href="http://www.jetbrains.com/pycharm/download">http://www.jetbrains.com/pycharm/download</a></p><ul><li><p>文件导航区域 <strong>能够</strong> 浏览<strong>／</strong>定位<strong>／</strong>打开** 项目文件</p></li><li><p><strong>文件编辑区域</strong> 能够 <strong>编辑</strong> 当前打开的文件</p></li><li><p>控制台区域</p><p>能够：</p><ul><li>输出程序执行内容</li><li>跟踪调试代码的执行</li></ul></li></ul><p>Python是一款解释性的语言，可以不经过编译器，直接使用解释器来执行。打开终端并输入下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><p>运行hello.py文件，将会在控制台上输出<code>hello world</code></p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python简介</title>
      <link href="/2021/12/07/study/python/python%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/12/07/study/python/python%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Python？"><a href="#什么是Python？" class="headerlink" title="什么是Python？"></a>什么是Python？</h2><p>Python就是一门<strong>解释型</strong>的编程语言，而且是现在世界上最流行的编程语言之一。</p><h2 id="Python语言的诞生"><a href="#Python语言的诞生" class="headerlink" title="Python语言的诞生"></a>Python语言的诞生</h2><p>1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了 ：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</p><h2 id="关键点常识"><a href="#关键点常识" class="headerlink" title="关键点常识"></a>关键点常识</h2><ul><li>Python是从ABC发展起来，并且结合了Unix shell和C语言的习惯。</li><li>Python的解释器如今有多个语言实现，我们常用的是CPython（官方版本的C语言实现），其他还有Jython（可以运行在Java平台）、IronPython（可以运行在.NET和Mono平台）、PyPy（Python实现的，支持JIT即时编译）</li><li>Python目前有两个版本，Python2和Python3</li></ul><h2 id="Python优缺点"><a href="#Python优缺点" class="headerlink" title="Python优缺点"></a>Python优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>简单：Python是一种代表简单主义思想的语言。阅读一个良好的Python程序就感觉像是在读英语一样，尽管这个英语的要求非常严格！Python的这种伪代码本质是它最大的优点之一。它使你能够专注于解决问题而不是去搞明白语言本身。</li><li>易学：就如同你即将看到的一样，Python极其容易上手。前面已经提到了，Python有极其简单的语法。</li><li>免费、开源：Python是FLOSS（自由/开放源码软件）之一。简单地说，你可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。FLOSS是基于一个团体分享知识的概念。这是为什么Python如此优秀的原因之一——它是由一群希望看到一个更加优秀的Python的人创造并经常改进着的。</li><li>高层语言：当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节。</li><li>可移植性：由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就可以在下述任何平台上面运行。这些平台包括Linux、Windows、FreeBSD、Macintosh、Solaris、OS/2、Amiga、AROS、AS/400、BeOS、OS/390、z/OS、Palm OS、QNX、VMS、Psion、Acom RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE甚至还有PocketPC、Symbian以及Google基于linux开发的Android平台！</li><li>面向对象：Python既支持面向过程的编程也支持面向对象的编程。在“面向过程”的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。与其他主要的语言如C++和Java相比，Python以一种非常强大又简单的方式实现面向对象编程。</li><li>可扩展性：如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。</li><li>规范的代码：Python采用强制缩进的方式使得代码具有极佳的可读性。</li><li>解释型语言：一个用编译型语言比如C或C++写的程序可以从源文件（即C或C++语言）转换到一个你的计算机使用的语言（二进制代码，即0和1）。这个过程通过编译器和不同的标记、选项完成。当你运行你的程序的时候，连接/转载器软件把你的程序从硬盘复制到内存中并且运行。而Python语言写的程序不需要编译成二进制代码。你可以直接从源代码运行程序。在计算机内部，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。事实上，由于你不再需要担心如何编译程序，如何确保连接转载正确的库等等，所有这一切使得使用Python更加简单。由于你只需要把你的Python程序拷贝到另外一台计算机上，它就可以工作了，这也使得你的Python程序更加易于移植。</li><li>丰富的库：Python标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。这被称作Python的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>Python语言非常完善，没有明显的短板和缺点，唯一的缺点就是执行效率慢，这个是解释型语言所通有的，同时这个缺点也将被计算机越来越强大的性能所弥补。</p><h2 id="Python应用场景"><a href="#Python应用场景" class="headerlink" title="Python应用场景"></a>Python应用场景</h2><ul><li><strong>Web应用开发</strong></li></ul><p>Python经常被用于Web开发。比如，通过mod_wsgi模块，Apache可以运行用Python编写的Web程序。Python定义了WSGI标准应用接口来协调Http服务器与基于Python的Web程序之间的通信。一些Web框架，如Django,TurboGears,web2py,Zope等，可以让程序员轻松地开发和管理复杂的Web程序。</p><ul><li><strong>操作系统管理、服务器运维的自动化脚本</strong></li></ul><p>在很多操作系统里，Python是标准的系统组件。 大多数Linux发行版以及NetBSD、OpenBSD和Mac OS X都集成了Python，可以在终端下直接运行Python。有一些Linux发行版的安装器使用Python语言编写，比如Ubuntu的Ubiquity安装器,Red Hat Linux和Fedora的Anaconda安装器。Gentoo Linux使用Python来编写它的Portage包管理系统。Python标准库包含了多个调用操作系统功能的库。通过pywin32这个第三方软件 包，Python能够访问Windows的COM服务及其它Windows API。使用IronPython，Python程序能够直接调用.Net Framework。一般说来，Python编写的系统管理脚本在可读性、性能、代码重用度、扩展性几方面都优于普通的shell脚本。</p><ul><li><strong>网络爬虫</strong></li></ul><p>Python有大量的HTTP请求处理库和HTML解析库，并且有成熟高效的爬虫框架Scrapy和分布式解决方案scrapy-redis，在爬虫的应用方面非常广泛。</p><ul><li><strong>科学计算</strong></li></ul><p>NumPy、SciPy、Pandas、Matplotlib可以让Python程序员编写科学计算程序。</p><ul><li><strong>桌面软件</strong></li></ul><p>PyQt、PySide、wxPython、PyGTK是Python快速开发桌面应用程序的利器。</p><ul><li><strong>服务器软件（网络软件）</strong></li></ul><p>Python对于各种网络协议的支持很完善，因此经常被用于编写服务器软件、网络爬虫。第三方库Twisted支持异步网络编程和多数标准的网络协议(包含客户端和服务器)，并且提供了多种工具，被广泛用于编写高性能的服务器软件。</p><ul><li><strong>游戏</strong></li></ul><p>很多游戏使用C++编写图形显示等高性能模块，而使用Python或者Lua编写游戏的逻辑、服务器。相较于Python，Lua的功能更简单、体积更小；而Python则支持更多的特性和数据类型。</p><p>Google、NASA、Facebook都在内部大量地使用Python。</p>]]></content>
      
      
      <categories>
          
          <category> python分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器缓存和webScoket</title>
      <link href="/2021/09/15/study/js/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E5%92%8CwebScoket/"/>
      <url>/2021/09/15/study/js/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E5%92%8CwebScoket/</url>
      
        <content type="html"><![CDATA[<h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><blockquote><p>浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下</p></blockquote><ul><li>先根据这个资源的一些 <code>http header</code> 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；</li><li>当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些<code>request header</code>验证这个资源是否命中协商缓存，称为<code>http</code>再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；</li><li>强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源； 区别是，强缓存不对发送请求到服务器，但协商缓存会。</li><li>当协商缓存也没命中时，服务器就会将资源发送回客户端。</li><li>当 <code>ctrl+f5</code> 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；</li><li>当 <code>f5</code>刷新网页时，跳过强缓存，但是会检查协商缓存；</li></ul><p><strong>强缓存</strong></p><ul><li><code>Expires</code>（该字段是 <code>http1.0</code> 时的规范，值为一个绝对时间的 <code>GMT</code> 格式的时间字符串，代表缓存资源的过期时间）</li><li><code>Cache-Control:max-age</code>（该字段是 <code>http1.1</code>的规范，强缓存利用其 <code>max-age</code> 值来判断缓存资源的最大生命周期，它的值单位为秒）</li></ul><p><strong>协商缓存</strong></p><ul><li><code>Last-Modified</code>（值为资源最后更新时间，随服务器response返回）</li><li><code>If-Modified-Since</code>（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）</li><li><code>ETag</code>（表示资源内容的唯一标识，随服务器<code>response</code>返回）</li><li><code>If-None-Match</code>（服务器通过比较请求头部的<code>If-None-Match</code>与当前资源的<code>ETag</code>是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）</li></ul><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><blockquote><p>由于 <code>http</code> 存在一个明显的弊端（消息只能有客户端推送到服务器端，而服务器端不能主动推送到客户端），导致如果服务器如果有连续的变化，这时只能使用轮询，而轮询效率过低，并不适合。于是 <code>WebSocket</code>被发明出来</p></blockquote><blockquote><p>相比与 <code>http</code> 具有以下有点</p></blockquote><ul><li>支持双向通信，实时性更强；</li><li>可以发送文本，也可以二进制文件；</li><li>协议标识符是 <code>ws</code>，加密后是 <code>wss</code> ；</li><li>较少的控制开销。连接创建后，<code>ws</code>客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有<code>2~10</code>字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的4字节的掩码。而<code>HTTP</code>协议每次通信都需要携带完整的头部；</li><li>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）</li><li>无跨域问题。</li></ul><blockquote><p>实现比较简单，服务端库如 <code>socket.io</code>、<code>ws</code>，可以很好的帮助我们入门。而客户端也只需要参照 <code>api</code> 实现即可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux的使用</title>
      <link href="/2021/07/11/study/react/day14/"/>
      <url>/2021/07/11/study/react/day14/</url>
      
        <content type="html"><![CDATA[<h3 id="redux的使用"><a href="#redux的使用" class="headerlink" title="redux的使用"></a>redux的使用</h3><p>安装以及搭建</p><ol><li>cnpm i redux -D</li><li>创建store.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> countReduce  <span class="keyword">from</span> <span class="string">&#x27;./count_reduce&#x27;</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="title function_">createStore</span>(countReduce)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>3.创建reduce.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> countInit = <span class="number">99</span></span><br><span class="line"><span class="keyword">const</span> countReduce = <span class="keyword">function</span>(<span class="params">preState=countInit,action</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; type,data &#125; = action</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(action)</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="string">&quot;add&quot;</span>) &#123;</span><br><span class="line">        preState++</span><br><span class="line">        <span class="keyword">return</span> preState</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> preState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> countReduce</span><br></pre></td></tr></table></figure><p>4.使用store对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">getState</span>()          <span class="comment">// 页面获取store中存储的数据</span></span><br><span class="line">store.<span class="title function_">dispatch</span>()          <span class="comment">// 派发一个事件</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;add&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;&#125;)   <span class="comment">// 监听仓库变化，变化就会触发</span></span><br></pre></td></tr></table></figure><p>5.定义constants.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addType = <span class="string">&quot;ADD3&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> jianType = <span class="string">&quot;JIAN&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> doubleType = <span class="string">&quot;DOUBLE&quot;</span></span><br></pre></td></tr></table></figure><p>6.action的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addType,jianType,doubleType &#125; <span class="keyword">from</span> <span class="string">&#x27;../constants&#x27;</span></span><br><span class="line"><span class="comment">// 定义函数，返回的是对象，异步返回的是函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">add_aciton</span> = (<span class="params"></span>)=&gt;(&#123;<span class="attr">type</span>:addType&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">jian_aciton</span> = (<span class="params"></span>)=&gt;(&#123;<span class="attr">type</span>:jianType&#125;)</span><br><span class="line"><span class="comment">// action中使用异步</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">double_action</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:doubleType&#125;)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7.解决异步action不能使用function的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnpm i redux-thunk -D  <span class="comment">// 安装下载</span></span><br><span class="line"><span class="comment">// 在store文件夹里面使用</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="title function_">createStore</span>(<span class="title class_">Reducer</span>,<span class="title function_">applyMiddleware</span>(thunk))</span><br></pre></td></tr></table></figure><p>8.合并多个reduce</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware,combineReducers&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> countReduce  <span class="keyword">from</span> <span class="string">&#x27;../reduces/count_reduce&#x27;</span>   <span class="comment">// countreduce</span></span><br><span class="line"><span class="keyword">import</span> todoReduce <span class="keyword">from</span> <span class="string">&#x27;../reduces/todolist_reduce&#x27;</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="comment">// 使用redux官方提供的合并reduce方法</span></span><br><span class="line"><span class="keyword">const</span> allReducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>:countReduce,</span><br><span class="line">    <span class="attr">todolist</span>:todoReduce</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第一个参数为全部reduce，第二个参数为使用支持异步action的中间件</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="title function_">createStore</span>(allReducer,<span class="title function_">applyMiddleware</span>(thunk))</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react（hooks）</title>
      <link href="/2021/07/09/study/react/day11%E5%92%8Cday12/"/>
      <url>/2021/07/09/study/react/day11%E5%92%8Cday12/</url>
      
        <content type="html"><![CDATA[<h3 id="react（hooks）"><a href="#react（hooks）" class="headerlink" title="react（hooks）"></a>react（hooks）</h3><p>它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性<br>特点：<br>    1.完全可选的<br>    2.100% 向后兼容的</p><p>1.useState:<br>  定义变量：<br>  let [count,changeCount] = useState(10)<br>  let [isShow,setShow] = useState(false)</p><p>  方式一：changeCount(++count)<br>  方式二：changeCount(count =&gt; ++count)</p><p>2.useRef:<br>  const inputRef = useRef()<br>  <code>&lt;input type=&quot;text&quot; ref=&#123;inputRef&#125;/&gt;</code><br>  获取：console.log(inputRef.current.value)</p><p>3.useEffect:</p><p>  你可以把 useEffect Hook 看做 componentDidMount，componentDidUpdate 和 componentWillUnmount 这三个函数的组合。<br>  componentDidMount写法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;只会触发一次&quot;</span>)</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure><p>  componentDidUpdate写法：根据某一个数据改变而触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count改变就会触发&quot;</span>)</span><br><span class="line">&#125;,[count])</span><br></pre></td></tr></table></figure><p>  componentWillUnmount写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;卸载组件触发钩子&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure><p>4.useLayoutEffect：</p><p>  useLayoutEffect和useEffect很像，函数签名也是一样。唯一的不同点就是useEffect是异步执行，而useLayoutEffect是同步执行的。</p><p>5.useMemo：（记忆）<br>第二个参数中的值发生改变才会重新计算，具有缓存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> computedCount = <span class="title function_">useMemo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useMemo执行了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> count*<span class="number">10</span></span><br><span class="line">&#125;,[count])</span><br></pre></td></tr></table></figure><h3 id="PureComponent纯组件和React-memo"><a href="#PureComponent纯组件和React-memo" class="headerlink" title="PureComponent纯组件和React.memo"></a>PureComponent纯组件和React.memo</h3><p>特点：<br>优点：<br>不需要开发者使用shouldComponentUpdate就可使用简单的判断来提升性能；</p><p>缺点<br>由于进行的是浅比较，可能由于深层的数据不一致导致而产生错误的否定判断，从而导致页面得不到更新；</p><p>pureComponent能够节省大部分不必要的渲染，尤其在表单等复杂组件中，将组件拆分成简单的pureComponent，使得组件变得可维护；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Num</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Num组件的第6行触发了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Num<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Num</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数组件.Num组件的第16行触发了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Num<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Num</span></span><br></pre></td></tr></table></figure><p>userCallback：<br>useCallback 的作用在于利用memo 减少子组件无效的 （重复渲染），来达到性能优化的作用。</p><p>usecallback不是用来解决组件中有过多内部函数导致的性能问题：<br>1.我们要知道，js创建一个函数的成本是非常小的，这点计算对于计算机来说是小case<br>2.其实使用useCallback会产成额外的性能：对函数变量的判断<br>3.其实每次组件重新渲染时，都无所谓避免重新创建内部函数，因为即使useCallback的函数变量没有变，它也会重新创建内部函数作为useCallback的实参</p><h3 id="antd的使用"><a href="#antd的使用" class="headerlink" title="antd的使用"></a>antd的使用</h3><ol><li>cnpm i antd -D</li><li>@import ‘~antd/dist/antd.css’;</li><li>import { Button } from ‘antd’;<br><code>&lt;Button type=&quot;primary&quot;&gt;</code>Button <code>&lt;/Button&gt;</code></li><li>Button、Pagination、Checkbox、DatePicker、Input、Radio、Select、Switch、TimePicker、Upload、Table、Tabs、Message、Tooltip、Modal、Progress</li></ol>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react嵌套路由</title>
      <link href="/2021/07/02/study/react/day10/"/>
      <url>/2021/07/02/study/react/day10/</url>
      
        <content type="html"><![CDATA[<h3 id="react中使用嵌套路由以及NavLink使用"><a href="#react中使用嵌套路由以及NavLink使用" class="headerlink" title="react中使用嵌套路由以及NavLink使用"></a>react中使用嵌套路由以及NavLink使用</h3><pre><code>嵌套路由原则：可以无限嵌套，但是必须要让使用二级路由的一级路由匹配到，否则不显示NavLink可以让a标签带有active切换的效果</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;bg_color&#x27;</span> <span class="attr">to</span>=<span class="string">&quot;/city/all&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&#x27;bg_color&#x27;</span> <span class="attr">to</span>=<span class="string">&quot;/city/good&quot;</span>&gt;</span>精华<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line">&lt;/p&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/city/all&quot;</span> <span class="attr">component</span>=<span class="string">&#123;All&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/city/good&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Good&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="withRouter内置组件的使用"><a href="#withRouter内置组件的使用" class="headerlink" title="withRouter内置组件的使用"></a>withRouter内置组件的使用</h3><p>作用：将普通的组件，变成可以访问路由api的路由组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">num</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  jump=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">replace</span>(&#123;<span class="attr">pathname</span>:<span class="string">&quot;/&quot;</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>,<span class="string">&quot;num组件的第6行&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.jump&#125;</span>&gt;</span>num组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(num)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 路由组件 和 组件的区别</title>
      <link href="/2021/07/01/study/react/day09/"/>
      <url>/2021/07/01/study/react/day09/</url>
      
        <content type="html"><![CDATA[<h3 id="路由组件-和-组件的区别"><a href="#路由组件-和-组件的区别" class="headerlink" title="路由组件 和 组件的区别"></a>路由组件 和 组件的区别</h3><p>路由组件是被Route组件使用的组件，this.props里面有三个对象，分别是 history、match、location<br>可以接受到路由跳转传参，也可以进行编程式导航跳转</p><p>普通组件只有父传子的props值</p><h3 id="Switch内置组件使用"><a href="#Switch内置组件使用" class="headerlink" title="Switch内置组件使用"></a>Switch内置组件使用</h3><p>Switch组件的作用就是，当我匹配一个路由组件时，其他组件不会被使用，可以加入404页面，给用户友好的提示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">    &#123;<span class="comment">/* &lt;Route path=&quot;/city&quot; component=&#123;City&#125;&gt;&lt;/Route&gt; */</span>&#125;</span><br><span class="line">    &#123;<span class="comment">/* 第二种params接受方式 */</span>&#125;</span><br><span class="line">    &lt;<span class="title class_">Route</span> path=<span class="string">&quot;/city/:cityName/:cityId&quot;</span> component=&#123;<span class="title class_">City</span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;C404&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="react-路由传参"><a href="#react-路由传参" class="headerlink" title="react 路由传参"></a>react 路由传参</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">    传值： </span><br><span class="line">    &lt;<span class="title class_">Link</span> to=<span class="string">&#x27;/city?cityName=哈尔滨&amp;cityId=0451&#x27;</span>&gt;跳转页面至city&lt;/<span class="title class_">Link</span>&gt;</span><br><span class="line">    &#123;<span class="comment">/* 第一种方式 url地址query传参 */</span>&#125;</span><br><span class="line"></span><br><span class="line">    接收：&#123;<span class="comment">/* &lt;Route path=&quot;/city&quot; component=&#123;City&#125;&gt;&lt;/Route&gt; */</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;<span class="title class_">Link</span> to=<span class="string">&#x27;/city/保定/0371&#x27;</span>&gt;跳转页面至city&lt;/<span class="title class_">Link</span>&gt;</span><br><span class="line">    &#123;<span class="comment">/* 第二种方式 url地址params传参 */</span>&#125;</span><br><span class="line"></span><br><span class="line">    接收：&#123;<span class="comment">/* &lt;Route path=&quot;/city/:cityName/:cityId&quot; component=&#123;City&#125;&gt;&lt;/Route&gt; */</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="querystring使用"><a href="#querystring使用" class="headerlink" title="querystring使用"></a>querystring使用</h3><p>cnpm i querystring -D<br>页面使用<br>querystring.parse(url形式携带的字符串)</p><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><pre><code>在路由组件中，使用this.props.history.push(&#123;pathname:&quot;/city&quot;,state:&#123;cityName:&quot;济南&quot;&#125;&#125;)this.props.history.pushthis.props.history.replacethis.props.history.gothis.props.history.backhistory提供的一些api</code></pre><h3 id="Redirect重定向"><a href="#Redirect重定向" class="headerlink" title="Redirect重定向"></a>Redirect重定向</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/city&quot;</span> <span class="attr">component</span>=<span class="string">&#123;City&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 路由</title>
      <link href="/2021/06/30/study/react/day08/"/>
      <url>/2021/06/30/study/react/day08/</url>
      
        <content type="html"><![CDATA[<h3 id="react-路由的使用"><a href="#react-路由的使用" class="headerlink" title="react 路由的使用"></a>react 路由的使用</h3><p>下载命令：cnpm i <a href="mailto:&#x72;&#x65;&#x61;&#x63;&#x74;&#45;&#x72;&#111;&#117;&#116;&#x65;&#114;&#x2d;&#x64;&#x6f;&#109;&#64;&#53;&#46;&#x32;&#46;&#x30;">&#x72;&#x65;&#x61;&#x63;&#x74;&#45;&#x72;&#111;&#117;&#116;&#x65;&#114;&#x2d;&#x64;&#x6f;&#109;&#64;&#53;&#46;&#x32;&#46;&#x30;</a> -D<br>提供的组件</p><p>import { BrowserRouter,Route,Link } from ‘react-router-dom’<br>BrowserRouter  路由器，将所有使用的组件进行包裹<br>Route          路由，path属性被激活，会显示指定的路由组件<br>Link           连接路由作用，to属性激活路由</p><p>什么单页面应用？</p><p>指的是一个 Web 网站中只有唯一的一个 HTML 页面，所有的功能与交互都在这唯一的一个页面内完成</p><p>优点：切换页面反应速度快，用户体验好</p><p>缺点：首屏加载速度慢，不利于seo，镶嵌开发模式，返回按钮处理逻辑复杂</p><p>作业：node 社区，写一个头部，进行切换路由页面显示下方</p>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react新生命周期</title>
      <link href="/2021/06/29/study/react/day07/"/>
      <url>/2021/06/29/study/react/day07/</url>
      
        <content type="html"><![CDATA[<h3 id="react新生命周期"><a href="#react新生命周期" class="headerlink" title="react新生命周期"></a>react新生命周期</h3><p>新增：<br>1.static getDerivedStateFromProps(nextProps, prevState)<br>静态方法 getDerivedStateFromProps() 用来替代 componentWillReceiveProps()。<br>它在 render() 方法之前触发，包含两个参数：nextProps 和 prevState，分别表示新的 props 和旧的 state。<br>如果返回一个对象，那么更新 state；如果返回 null，那么就不更新 state。<br>2.getSnapshotBeforeUpdate(prevProps, prevState)<br>getSnapshotBeforeUpdate() 方法用来替代componentWillUpdate()。<br>它在最近一次渲染输出（即更新DOM）之前触发，包含两个参数：prevProps 和 prevState，分别表示旧的 props和旧的 state，返回值会成为 componentDidUpdate() 的第三个参数。</p><p>过时：<br>从React v16.3 开始，有 3 个生命周期方法被标记为过时：componentWillMount()、componentWillReceiveProps() 和 componentWillUpdate()。</p><h3 id="tab键自动闭合"><a href="#tab键自动闭合" class="headerlink" title="tab键自动闭合"></a>tab键自动闭合</h3><pre><code>&quot;emmet.triggerExpansionOnTab&quot;: true,</code></pre><h3 id="react脚手架安装sass"><a href="#react脚手架安装sass" class="headerlink" title="react脚手架安装sass"></a>react脚手架安装sass</h3><p> cnpm i node-sass -D</p><h3 id="react-axios-请求数据"><a href="#react-axios-请求数据" class="headerlink" title="react axios 请求数据"></a>react axios 请求数据</h3><p>cnpm i axios -D</p><p>// 页面加载完成<br>async componentDidMount() {<br>    let {data} = await axios.get(“<a href="https://api.it120.cc/maxinglong/banner/list&quot;">https://api.it120.cc/maxinglong/banner/list&quot;</a>)<br>    console.log(data)<br>}</p><h3 id="react-中使用订阅者-发布者模式pubsub"><a href="#react-中使用订阅者-发布者模式pubsub" class="headerlink" title="react 中使用订阅者 发布者模式pubsub"></a>react 中使用订阅者 发布者模式pubsub</h3><p><a href="https://blog.csdn.net/qq_58174484/article/details/122650453">https://blog.csdn.net/qq_58174484/article/details/122650453</a></p>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中条件判断</title>
      <link href="/2021/06/28/study/react/day06/"/>
      <url>/2021/06/28/study/react/day06/</url>
      
        <content type="html"><![CDATA[<h3 id="react中条件判断"><a href="#react中条件判断" class="headerlink" title="react中条件判断"></a>react中条件判断</h3><p>方式1： 通过style的display进行元素显隐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:this.state.isShow</span>?&quot;<span class="attr">block</span>&quot;<span class="attr">:</span>&quot;<span class="attr">none</span>&quot; &#125;&#125;&gt;</span>容器1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:this.state.isShow</span>?&quot;<span class="attr">none</span>&quot;<span class="attr">:</span>&quot;<span class="attr">block</span>&quot; &#125;&#125;&gt;</span>容器2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;this.toogle()&#125;&#125;&gt;切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式2：通过三元运算进行元素显隐</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isShow</span>?(<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>容器1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>):(<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>容器2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式3 通过短路逻辑进行元素显隐</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isShow</span> &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>容器1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式4 通过函数形式进行元素显隐</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> content = <span class="variable language_">this</span>.<span class="title function_">navList</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">activeIndex</span>)</span><br><span class="line"></span><br><span class="line">navList = <span class="function">(<span class="params">key</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(key)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span>  (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>容器1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>容器2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>容器3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;content&#125;</span><br></pre></td></tr></table></figure><h3 id="react中生命周期"><a href="#react中生命周期" class="headerlink" title="react中生命周期"></a>react中生命周期</h3><p>三个阶段:<br>    装载阶段：<br>            constructor()           // 构造方法<br>            componentWillMount()    // 组件将要挂载<br>            render()                // 渲染方法<br>            componentDidMount()     // 组件挂载完成（ajax请求通常写在这个生命周期，定义一些定时器）<br>    更新阶段：<br>            componentWillReceiveProps()    // 组件将要接受props参数<br>            shouldComponentUpdate()        // 组件是否要更新（可以做性能优化）<br>            componentWillUpdate()          // 组件将要更新<br>            render()                       // 渲染方法<br>            componentDidUpdate()           // 组件更新完毕<br>    卸载阶段：<br>            componentWillUnmount()         // 组件将要卸载(清楚一些定时器，清楚订阅消息)</p><h3 id="react脚手架创建"><a href="#react脚手架创建" class="headerlink" title="react脚手架创建"></a>react脚手架创建</h3><p>1.node升级最新版<br>2.cnpm install create-react-app -g   ||<br>  yarn add create-react-app -g<br>3.create-react-app -V<br>4.create-react-app test</p>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react三大核心ref</title>
      <link href="/2021/06/24/study/react/day04/"/>
      <url>/2021/06/24/study/react/day04/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">react三大核心为：state、props、ref。</span><br><span class="line"></span><br><span class="line">state：用来定义属性</span><br><span class="line"></span><br><span class="line">props：用来接收参数</span><br><span class="line"></span><br><span class="line">refs：用来获取dom节点</span><br><span class="line"></span><br><span class="line">ref定义方法：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;input&quot;</span>/&gt;</span> <span class="comment">&lt;!--字符串--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;e</span>=&gt;</span>this.ageState = e&#125;/&gt;<span class="comment">&lt;!--函数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.refDom&#125;/</span>&gt;</span><span class="comment">&lt;!--ref自带函数--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="react三大核心属性-ref"><a href="#react三大核心属性-ref" class="headerlink" title="react三大核心属性-ref"></a>react三大核心属性-ref</h3><pre><code>三种ref使用方式：    1.通过绑定ref，值为字符串，获取dom元素,this.refs.input    2.通过ref绑定一个回调函数形式，形参就是当前的dom对象    3.通过React.createRef()创建一个ref对象，进行ref绑定    示例：ref=&#123;this.refDom&#125;</code></pre><h3 id="受控组件和非受控组件"><a href="#受控组件和非受控组件" class="headerlink" title="受控组件和非受控组件"></a>受控组件和非受控组件</h3><pre><code>使用state进行控制的组件不使用state控制的组件</code></pre><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><pre><code>1.一种是以函数形式作为参数的函数，叫做高阶   列举：Promise(resolve,reject)  map(()=&gt;&#123;&#125;)2.一种以函数形式返回的函数，叫高阶</code></pre><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><pre><code>let add = function(a,b,c) &#123;    return a + b + c&#125;console.log(add(1,2,3))let add2 = function(a) &#123;    return (b)=&gt;&#123;        return (c)=&gt;&#123;           return a+b+c        &#125;    &#125;&#125;console.log(add2(1)(2)(3))理解为函数的拆分细化，最后统一处理逻辑</code></pre>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react三大核心属性props</title>
      <link href="/2021/06/23/study/react/day03/"/>
      <url>/2021/06/23/study/react/day03/</url>
      
        <content type="html"><![CDATA[<h2 id="react三大核心属性之props"><a href="#react三大核心属性之props" class="headerlink" title="react三大核心属性之props"></a>react三大核心属性之props</h2><h3 id="react中循环怎么实现？"><a href="#react中循环怎么实现？" class="headerlink" title="react中循环怎么实现？"></a>react中循环怎么实现？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;</span><br><span class="line">        this.state.personArr.map((item,index)=&gt;&#123;</span><br><span class="line">            return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span> = <span class="string">&#123;index&#125;</span>&gt;</span>&#123; item.name &#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="key的作用和diff算法"><a href="#key的作用和diff算法" class="headerlink" title="key的作用和diff算法"></a>key的作用和diff算法</h3><pre><code>key的作用：唯一标识，可以提升性能，避免虚拟dom渲染偷懒产生bug场景：在使用index作为key是，逆向添加数据，产生key变化，造成页面渲染异常推荐：使用id作为唯一标识提升性能：减少不必要的重复渲染</code></pre><p> diff算法：<br>        1.虚拟dom对象前后对比，当key值不同时，直接进行真实dom渲染<br>        2.虚拟dom对象前后对比，当key值相同时，内容不同时，替换内容渲染真实dom<br>        3.key值相同，会进行虚拟dom树层层对比，相同的复用，不同的重新渲染真实dom</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><pre><code>参考连接：https://blog.csdn.net/yufengaotian/article/details/818708101.编写一个组件，通过属性传值，传递到组件一个list数组，传递数据，进行小球环绕效果，传几个均匀分布显示</code></pre><h3 id="props概念"><a href="#props概念" class="headerlink" title="props概念"></a>props概念</h3><p>组件传值之父传子，通过属性进行绑定值传递参数</p><p>类组件接收props：使用this.props<br>函数组件接收props：使用props形参接收</p><p>传递参数简写方式：{…obj}可以将对象全部key，value进行展开传递到子组件中</p><h3 id="props类型校验"><a href="#props类型校验" class="headerlink" title="props类型校验"></a>props类型校验</h3><p>react会检查函数组件和类组件静态属性propTypes属性，如果有这个属性，那么会进行类型校验，如果没有那么不做类型判断<br>react会检查函数组件和类组件静态属性defaultProps属性，如果有这个属性，那么会设置props默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line">    <span class="attr">fun</span>:<span class="title class_">PropTypes</span>.<span class="property">func</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;赵云123&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">25</span>,</span><br><span class="line">    <span class="attr">fun</span>:<span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="react子传父"><a href="#react子传父" class="headerlink" title="react子传父"></a>react子传父</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;<span class="title class_">Child</span> onDelete=&#123;<span class="variable language_">this</span>.<span class="property">fuDel</span>&#125; &#123;...item&#125;/&gt;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="comment">// 删除当前的这个数据</span></span><br><span class="line">del = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">onDelete</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">id</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="react-获取子组件中所有方法和属性"><a href="#react-获取子组件中所有方法和属性" class="headerlink" title="react 获取子组件中所有方法和属性"></a>react 获取子组件中所有方法和属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line">refFn = <span class="function">(<span class="params">ref</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ref,<span class="string">&quot;ref想要获取子组件中的所有方法&quot;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">childFn</span> = ref</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;<span class="title class_">Child</span> onRef=&#123;<span class="variable language_">this</span>.<span class="property">refFn</span>&#125; &#123;...item&#125;/&gt;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">onRef</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reac初识</title>
      <link href="/2021/06/22/study/react/day02/"/>
      <url>/2021/06/22/study/react/day02/</url>
      
        <content type="html"><![CDATA[<h3 id="hello-react"><a href="#hello-react" class="headerlink" title="hello react"></a>hello react</h3><p>引入react官方核心库，以及react-dom渲染库</p><h3 id="虚拟dom特点"><a href="#虚拟dom特点" class="headerlink" title="虚拟dom特点"></a>虚拟dom特点</h3><p>渲染速度快，进行虚拟dom树，变化前后对比，将不同的数据对象进行真实dom渲染，虚拟dom就是一个对象，比真实dom更加轻量级，效率更高。</p><h3 id="虚拟dom两种创建方式"><a href="#虚拟dom两种创建方式" class="headerlink" title="虚拟dom两种创建方式"></a>虚拟dom两种创建方式</h3><p>第一种：jsx语法创建虚拟dom（推荐）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="tag">&lt;<span class="name">h4</span> <span class="attr">title</span>=<span class="string">&quot;hello,react&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello,react<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span>)</span><br></pre></td></tr></table></figure><p>第二种：使用官方api创建虚拟dom</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h4&quot;</span>,&#123;<span class="attr">title</span>:<span class="string">&quot;hello,react&quot;</span>&#125;,<span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>,&#123;&#125;,<span class="string">&quot;hello,react&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="jsx语法-javascript-XML"><a href="#jsx语法-javascript-XML" class="headerlink" title="jsx语法,(javascript+XML)"></a>jsx语法,(javascript+XML)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    jsx语法规则：</span></span><br><span class="line"><span class="comment">        1.定义虚拟DOM时，不要写引号。</span></span><br><span class="line"><span class="comment">        2.标签中混入JS表达式时要用&#123;&#125;。</span></span><br><span class="line"><span class="comment">        3.样式的类名指定不要用class，要用className。</span></span><br><span class="line"><span class="comment">        4.内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写。</span></span><br><span class="line"><span class="comment">        5.只有一个根标签</span></span><br><span class="line"><span class="comment">        6.标签必须闭合</span></span><br><span class="line"><span class="comment">        7.标签首字母</span></span><br><span class="line"><span class="comment">                (1).若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。</span></span><br><span class="line"><span class="comment">                (2).若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    一定注意区分：【js语句(代码)】与【js表达式】</span></span><br><span class="line"><span class="comment">            1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方</span></span><br><span class="line"><span class="comment">                        下面这些都是表达式：</span></span><br><span class="line"><span class="comment">                                (1). a</span></span><br><span class="line"><span class="comment">                                (2). a+b</span></span><br><span class="line"><span class="comment">                                (3). demo(1)</span></span><br><span class="line"><span class="comment">                                (4). arr.map() </span></span><br><span class="line"><span class="comment">                                (5). function test () &#123;&#125;</span></span><br><span class="line"><span class="comment">            2.语句(代码)：</span></span><br><span class="line"><span class="comment">                        下面这些都是语句(代码)：</span></span><br><span class="line"><span class="comment">                                (1).if()&#123;&#125;</span></span><br><span class="line"><span class="comment">                                (2).for()&#123;&#125;</span></span><br><span class="line"><span class="comment">                                (3).switch()&#123;case:xxxx&#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure><h3 id="react类组件的创建"><a href="#react类组件的创建" class="headerlink" title="react类组件的创建"></a>react类组件的创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">类组件也叫有状态组件（state）</span><br><span class="line">state,数据对应的setState更新试图方法</span><br><span class="line">setState第一个参数为想要更新的state属性</span><br><span class="line">setState是一个异步方法，想要有同步处理，在第二个参数回调中操作</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;回调函数&#125;&gt;加&lt;/button&gt;  驼峰命名</span><br><span class="line"></span><br><span class="line">改变this指向错误的方式：</span><br><span class="line">    1、通过this.add = this.add.bind(this)</span><br><span class="line">    2、箭头函数onClick=&#123;()=&gt;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react基础</title>
      <link href="/2021/06/20/study/react/day01/"/>
      <url>/2021/06/20/study/react/day01/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-01"><a href="#Day-01" class="headerlink" title="Day_01"></a>Day_01</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">### react是什么？</span><br><span class="line">1、React是用于构建用户界面的JavaScript库，起源于Facebook(微信的前身)的内部项目，该公司对市场上所有 1、2、JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。</span><br><span class="line"></span><br><span class="line">### react有哪些特点？</span><br><span class="line">1、灵活：可以与已知的库进行很好的使用</span><br><span class="line">2、高效：虚拟dom，react可以使用虚拟dom进行页面刷新</span><br><span class="line">3、组件化：复用性强，协同开发效率比较高</span><br><span class="line">4、声明范式开发：更方便快捷描述应用</span><br><span class="line">5、jsx语法：是javasciript扩展语言</span><br><span class="line"></span><br><span class="line">### react 学习需要掌握些什么？</span><br><span class="line">1.html、css</span><br><span class="line">2.js基础、es6基础</span><br><span class="line">3.原型</span><br><span class="line">4.类构造器</span><br><span class="line">5.箭头函数</span><br><span class="line">6.数组的常用方法</span><br><span class="line">7.js模块化</span><br><span class="line">8.数据类型</span><br><span class="line">9....</span><br><span class="line"></span><br><span class="line">### 复习：</span><br><span class="line">js基础数据类型：string、number、bool、Null、undefined、symbol</span><br><span class="line">js复杂数据类型：Array , Object</span><br><span class="line"></span><br><span class="line">var let const 区别？</span><br><span class="line">let 具有块级作用 不能重复声明 可以重复赋值</span><br><span class="line">const 具有块级作用域 不能重复声明 不能重复赋值</span><br><span class="line">var 全局作用域 可以重复声明 可以重复赋值</span><br><span class="line">暂时性死区：</span><br><span class="line">我个人理解，所谓的暂时性死区就是在会计作用域内使用let声明了变量，那么这个变量就不</span><br><span class="line">会受外部的影响，这个我把它理解为暂时性死区。</span><br><span class="line">变量提升：</span><br><span class="line">我个人理解，所谓的变量提升就是为了先事先声明变量，然后在进行赋值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据存储方式？</span><br><span class="line">js中基本数据类型存储在栈中存储的是值。</span><br><span class="line">js中复杂的数据类型存储堆中存储的是地址，指针会指向这个内存地址。</span><br><span class="line"></span><br><span class="line">深拷贝和浅拷贝？</span><br><span class="line">1、只有复杂数据类型设计到了深、浅拷贝, 基本数据类型统称为变量赋值！ </span><br><span class="line">2、深拷贝是指拷贝对象的具体内容，二内存地址是自主分配的，拷贝结束之后俩个对象虽然存的值是一样的，但是内存地址不一样，俩个对象页互相不影响，互不干涉</span><br><span class="line">3、浅拷贝是指对内存地址的复制，让目标对象指针和源对象指向同一片内存空间。注意：当内存销毁的时候，只想对象的指针，必须重新定义，才能够使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">原型？</span><br><span class="line">每个函数、构造函数中都有一个 prototype的显示原型属性。属性值是函数的原型对象。原型对象中定义的属性与方法，都是被实例对象所调用的。一般原型对象指向的是 object类型的原型对象。</span><br><span class="line">每一个实例对象身上有一个 隐式原型属性 __proto__属性值指向 函数的原型对象。</span><br><span class="line"></span><br><span class="line">原型链: 实例对象和原型之间的连接 就称为原型链。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">继承？</span><br><span class="line">es5: 借调继承、组合继承、原型对象继承, 使用 call apply bind 函数改变this指向去实现</span><br><span class="line">es6: 使用 extends 关键字继承 父类; constructor() 初识化属相、supper、 调用父构造器constructor()方法,  继承其属性</span><br></pre></td></tr></table></figure><h2 id="1-1-all、apply、bind-函数"><a href="#1-1-all、apply、bind-函数" class="headerlink" title="1.1 all、apply、bind 函数"></a>1.1 <code>all</code>、<code>apply</code>、<code>bind</code> 函数</h2><p><strong>作用： 改变函数中的 <code>this</code>指向！</strong></p><ul><li>第一个参数 设置函数内部this的指向 ; 其它参数，对应函数的参数。</li></ul><p><strong>注意：<code>call()</code> 与 <code>apply()</code>、<code>bind()</code> 区别在于：</strong></p><ul><li>传递的参数不同 、 <code>apply()</code>的传参方式一个 <code>array</code> 形式;  <code>call()</code> 可以直接传递参数；</li><li><code>bind()</code> 函数 返回的是一个函数、需要加 <code>()</code>调用</li></ul><p><strong>eg：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> obj  = &#123;</span></span><br><span class="line"><span class="language-javascript">        name : <span class="string">&quot;obj&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">say</span>(<span class="params">age=<span class="number">10</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, 年龄<span class="subst">$&#123;age&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> obj_01 = &#123;</span></span><br><span class="line"><span class="language-javascript">         name : <span class="string">&quot;obj_01&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">say</span>(<span class="params">age=<span class="number">66</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, 年龄<span class="subst">$&#123;age&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 改变  obj.say()  函数的`this`指向  obj_01</span></span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">say</span>.<span class="title function_">call</span>(obj_01, <span class="number">66</span>) </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注意: apply的传参方式一个[] 形式</span></span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">say</span>.<span class="title function_">apply</span>(obj_01, [<span class="number">10</span>])  <span class="comment">// hello obj_01, 年龄10</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注意: bind 改变 this 指向; 返回值是一个 fun函数 </span></span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">say</span>.<span class="title function_">bind</span>(obj_01, <span class="number">77</span>)()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-es5构造函数、原型链-借调继承"><a href="#1-2-es5构造函数、原型链-借调继承" class="headerlink" title="1.2 es5构造函数、原型链\借调继承"></a>1.2 <code>es5</code>构造函数、原型链\借调继承</h2><p>继承的三种方式：</p><ul><li>借调继承</li><li>组合继承</li><li>原型对象继承</li></ul><p><img src="../../images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="原型链"></p><p>eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  构造函数 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params"> name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">name</span> = name </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)   </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原型对象 原型属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">theme</span> = <span class="string">&quot;黄种人&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实例化对象 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> zhangfei = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张&quot;</span>, <span class="number">19</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(zhangfei)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实例访问原型对象 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zhangfei.<span class="property">__proto__</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实例对象 访问 原型对象 访问 构造函数 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zhangfei.<span class="property">__proto__</span>.<span class="property">constructor</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 构造函数 访问 原型对象 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 构造函数 访问 原型对象 == 实例化对象 访问原想对象 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> == zhangfei.<span class="property">__proto__</span>) <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zhangfei.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>)  <span class="comment">// 原型对象尽头是 null 空对象 </span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实例对象访问原型对象, 通过  constructor 访问 构造函数中的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zhangfei.<span class="property">constructor</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 子构造器，原型链继承,child原型 = &#123;name:,age,sex,say&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title class_">Child</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="property">age</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 借调继承</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,<span class="string">&quot;吕布&quot;</span>,<span class="number">30</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title class_">Child</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-es6类构造器、继承"><a href="#1-3-es6类构造器、继承" class="headerlink" title="1.3  es6类构造器、继承"></a>1.3  <code>es6</code>类构造器、继承</h2><p><strong><code>es6</code>  推出类构造器 它是 <code>es5</code>构造函数的语法糖!</strong></p><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 构造函数 类</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 构造方法默认执行一次 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 实例属性 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;constructor&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">age</span> = age</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&quot;男&quot;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 实例方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;张三在吃饭&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 实例方法 </span></span></span><br><span class="line"><span class="language-javascript">        run = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>喜欢奔跑`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 静态方法 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">static</span> like = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`王五喜欢小美`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">static</span> username = <span class="string">&quot;王小美&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原型属性 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">theme</span> = <span class="string">&quot;黑种人&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创造实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘备&quot;</span>, <span class="string">&quot;男&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(p);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 子构造器继承父类构造器  extends 关键字去继承 Person 父类 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 必须有 supper()方法调用, 调用父构造器constructor()方法,  继承其属性 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">super</span>(name, age)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义实例属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">num</span>: <span class="string">&quot;2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">todolist</span>: []</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 实例属性属性</span></span></span><br><span class="line"><span class="language-javascript">        username = <span class="string">&quot;李四&quot;</span></span></span><br><span class="line"><span class="language-javascript">        say = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建实例 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数调用</span></span></span><br><span class="line"><span class="language-javascript">    c.<span class="title function_">say</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 继承父类方法 </span></span></span><br><span class="line"><span class="language-javascript">    c.<span class="title function_">run</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 静态方法/静态属性只能使用 类调用 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Child</span>.<span class="title function_">like</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Child</span>.<span class="property">username</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 构造函数访问原型 == 实例访问原型 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> == c.<span class="property">__proto__</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-箭头-普通函数-this指向"><a href="#1-4-箭头-普通函数-this指向" class="headerlink" title="1.4 箭头\普通函数 this指向"></a>1.4 箭头\普通函数 <code>this</code>指向</h2><p><strong>请说一下箭头函数与普通函数的区别 ？</strong></p><ul><li><p>普通函数是很早就提出的，而箭头函数是 <code>es6</code>提出的，他们两个在语法上不一样；</p></li><li><p>并在普通函数 与 箭头函数他们 <code>this</code>的指向也不要一样?</p><ul><li><strong>普通函数</strong>内的 <code>this</code>指向是如果没有绑定事件元素的时候，<code>this</code> 指向的 <code>window</code>，或者在闭包中 <code>this</code>指向的也是 <code>window</code>，如果函数绑定了事件，但并没有产生闭 包，这个 <code>this</code>指向的是当前调用的事件对象.</li><li><strong>箭头函数</strong>内this的指向是父作用域</li></ul></li><li><p>箭头函数不能实例化为构造函数，而普通函数可以进行实例化</p></li><li><p>箭头函数不能使用 <code>arguments</code>，普通函数可以使用，<code>arguments</code>是以集合的方式获取函数传递的参数.</p></li></ul><p><strong>注意： 箭头函数是是没有 <code>this</code>指向, 所用不能使用 <code>arguments</code> 去接收剩余参数的， 以及不能实例化构造函数！</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 普通函数中的this指向全局  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">test</span>() <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 箭头函数 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;牛魔&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">obj</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;蔡文姬&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">say</span>: <span class="function">()=&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 箭头函数中的没有自己的this指向; 箭头函数的this指向 是 父级程序的this指向</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 如果没有父级程序 或者 父级程序没有指向 箭头函数的this指向是window(需要结合上下文去看)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * **/</span></span></span><br><span class="line"><span class="language-javascript">    p.<span class="property">obj</span>.<span class="title function_">say</span>() <span class="comment">// 我叫 牛魔</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-5-接收参数方式"><a href="#1-5-接收参数方式" class="headerlink" title="1.5 接收参数方式"></a>1.5 接收参数方式</h2><p><strong>rest-参数</strong></p><ul><li>ES6 引入 rest 参数（形式为 <code>...变量名</code>），<strong>用于获取函数的多余参数（形参）</strong>。</li><li>这样就不需要使用 <code>arguments</code>对象了。<ul><li><code>arguments</code>（<strong>作用在函数体中，接受全部参数（数组类型）</strong>）</li></ul></li><li>rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</li></ul><p><strong>…rest  和arguments区别</strong></p><ul><li><code>arguments</code>表示所有实参列表  不能使用在箭头函数中  只能出现在函数体的内部</li><li><code>...rest</code> 剩余参数 表示所有剩余参数</li><li>当函数只有一个剩余参数，未传递其他参数此时 <code>...rest</code> 和 <code>arguments</code>是一致的 ，</li><li><code>...rest</code>只能出现在形参的最后面<ul><li><strong>function fn(…rest){   let arr = […rest]</strong>   操作数组}</li></ul></li></ul><p><strong>注意：arguments 的值是伪数组， 数据集合； 可以使用 for 循环遍历可以使用 扩展运算符，转换真数组。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...arg</span>) &#123;  </span><br><span class="line">  <span class="comment">// arguments</span></span><br><span class="line">  <span class="comment">// console.log(arguments)  Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  rest 参数 </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg); <span class="comment">// (2) [1, 2]</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="1-6-常见的题"><a href="#1-6-常见的题" class="headerlink" title="1.6 常见的题"></a>1.6 常见的题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 基本数据类型的赋值; 基本数据类型存储的是值  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a = <span class="number">10</span> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = a   <span class="comment">// 变量赋值 将 a 的值赋值给 b </span></span></span><br><span class="line"><span class="language-javascript">    b = b + <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b) <span class="comment">// 10 20 </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let arr = [1,2,3]  // ajax数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let arr2 = [4,5,6]</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数据合并覆盖 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> newarr = <span class="title class_">Object</span>.<span class="title function_">assign</span>([],arr,arr2)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newarr);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> clonearr = [] </span></span><br><span class="line"><span class="language-javascript">    clonearr = arr</span></span><br><span class="line"><span class="language-javascript">    clonearr = arr2</span></span><br><span class="line"><span class="language-javascript">    arr[<span class="number">1</span>] = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr,clonearr) <span class="comment">// [1, true, 3] (3) [4, 5, 6]</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数组合并</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> newarr = arr.<span class="title function_">concat</span>(arr2)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newarr)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript"> <span class="comment">// let var const 区别 暂时性死区</span></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">// Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared (at demo.html:38:13)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">a</span> = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">let</span> a = <span class="number">555</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>())</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">// </span></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">// Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared (at demo.html:38:13)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">a</span> = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> a = <span class="number">555</span></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">return</span> a</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(a))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr = []</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">         arr[i] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    arr[<span class="number">3</span>]()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(fun)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// fun()</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var fun 的变量提升、函数并不会提升 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;say hello&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局作用域下的函数, 在全局可以访问  undefined;  fun()报错 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;say hello2222&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obj = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">name</span> =<span class="string">&quot;张飞&quot;</span></span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">age</span> = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">delete</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(obj)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123;<span class="attr">delete</span>:del,age,arr&#125; = obj</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">arr</span>[<span class="number">0</span>] = <span class="string">&quot;修改了&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">arr</span>,arr) <span class="comment">//  [&#x27;修改了&#x27;, 2, 3] (3) [&#x27;修改了&#x27;, 2, 3] 指向的同一个指针</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-7获取节点案例"><a href="#1-7获取节点案例" class="headerlink" title="1.7获取节点案例"></a>1.7获取节点案例</h2><p>eg：点击enter键，后去input 输入数数据，在数组中模糊匹配输出页面中？</p><p><code>search.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请输入:&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inp&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取dom节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> $ = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(e)</span></span><br><span class="line"><span class="language-javascript">        &#125;   </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr = [<span class="string">&quot;css&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;js&quot;</span>, <span class="string">&quot;python&quot;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;inp&quot;</span>).<span class="property">onkeyup</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 键盘抬起事件 13为 enter键</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(e.<span class="property">keyCode</span> == <span class="number">13</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span>  res = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                arr.<span class="title function_">map</span>( <span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 查询</span></span></span><br><span class="line"><span class="language-javascript">                    item.<span class="title function_">toLocaleLowerCase</span>().<span class="title function_">includes</span>(</span></span><br><span class="line"><span class="language-javascript">                    e.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">toLocaleLowerCase</span>()) </span></span><br><span class="line"><span class="language-javascript">                    ) &#123;</span></span><br><span class="line"><span class="language-javascript">                        res += <span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;ul&quot;</span>).<span class="property">innerHTML</span> = res</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-8-什么是深拷贝"><a href="#1-8-什么是深拷贝" class="headerlink" title="1.8 什么是深拷贝"></a>1.8 什么是深拷贝</h2><p>只有复杂数据类型设计到了深、浅拷贝, 基本数据类型统称为变量赋值！</p><p>深拷贝是指拷贝对象的具体内容，二内存地址是自主分配的，拷贝结束之后俩个对象虽然存的值是一样的，但是内存地址不一样，俩个对象页互相不影响，互不干涉</p><p>参考： <a href="https://blog.csdn.net/weixin_43726881/article/details/123518924">https://blog.csdn.net/weixin_43726881/article/details/123518924</a></p><h3 id="深拷贝的几种方法"><a href="#深拷贝的几种方法" class="headerlink" title="深拷贝的几种方法"></a>深拷贝的几种方法</h3><p>1、JSON内置的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringfiy</span>(a))</span><br><span class="line">b.<span class="property">a</span>=<span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="comment">// 不会改变a中的值，值改变了b中的值。</span></span><br><span class="line"><span class="comment">// 原理：该方法是用JSON.parse将对象转为字符串;</span></span><br><span class="line"><span class="comment">// 然后在用JSON.stringify转回对象json字符串转换为对象的时候，会自己去构建新的内存地址存放数据。</span></span><br></pre></td></tr></table></figure><p>2、Object的内置方法assign</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b=<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);   </span><br><span class="line">b.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// b的值会改变 b的值不会改变</span></span><br></pre></td></tr></table></figure><h3 id="什么是浅拷贝"><a href="#什么是浅拷贝" class="headerlink" title="什么是浅拷贝"></a>什么是浅拷贝</h3><p>浅拷贝是指对内存地址的复制，让目标对象指针和源对象指向同一片内存空间。注意：当内存销毁的时候，只想对象的指针，必须重新定义，才能够使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b.<span class="property">a</span>=<span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><h1 id="———react-框架———"><a href="#———react-框架———" class="headerlink" title="———react 框架———-"></a>———react 框架———-</h1><h1 id="Day-01-hello-react"><a href="#Day-01-hello-react" class="headerlink" title="Day_01-hello react"></a>Day_01-<code>hello react</code></h1><p>引入react官方核心库，以及react-dom渲染库</p><h2 id="1-1-虚拟dom特点"><a href="#1-1-虚拟dom特点" class="headerlink" title="1.1-虚拟dom特点"></a>1.1-虚拟dom特点</h2><p>渲染速度快，进行虚拟dom树，变化前后对比，将不同的数据对象进行真实dom渲染，虚拟dom就是一个对象，比真实dom更加轻量级，效率更高。</p><h2 id="1-2-虚拟dom两种创建方式"><a href="#1-2-虚拟dom两种创建方式" class="headerlink" title="1.2-虚拟dom两种创建方式"></a>1.2-虚拟dom两种创建方式</h2><p>第一种：jsx语法创建虚拟dom（推荐）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="tag">&lt;<span class="name">h4</span> <span class="attr">title</span>=<span class="string">&quot;hello,react&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello,react<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span>)</span><br></pre></td></tr></table></figure><p>第二种：使用官方api创建虚拟dom</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h4&quot;</span>,&#123;<span class="attr">title</span>:<span class="string">&quot;hello,react&quot;</span>&#125;,<span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>,&#123;&#125;,<span class="string">&quot;hello,react&quot;</span>)</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- react 核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- react渲染页面的js库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- react渲染页面的js库  语法检测语法转换, 将es6的语法转换为es5语法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">// 语法转换、指定类型 </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 第一种方式  */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建一个虚拟 dom </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="variable constant_">VDOM</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">title</span>=<span class="string">&quot;hello&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello react<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span> </span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* 第二种方式  */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h4&quot;</span>,&#123;<span class="attr">title</span>:<span class="string">&quot;hello,react&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>,&#123;&#125;,<span class="string">&quot;hello,react&quot;</span>)),</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Day-02-jsx语法"><a href="#Day-02-jsx语法" class="headerlink" title="Day_02-jsx语法"></a>Day_02-<code>jsx</code>语法</h1><p><code>JSX</code>是一种 <code>JavaScript</code>的语法扩展，运用于<a href="https://baike.baidu.com/item/React/18077599">React</a>架构中，其格式比较像是模版语言，但事实上完全是在 <code>JavaScript</code>内部实现的。元素是构成 <code>React</code>应用的最小单位，JSX就是用来声明React当中的元素，React使用JSX来描述用户界面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jsx`语法规则：</span><br><span class="line"></span><br><span class="line">- 定义虚拟DOM时，不要写引号。</span><br><span class="line">- 标签中混入JS表达式时要用&#123;&#125;。</span><br><span class="line">- 样式的类名指定不要用class，要用className。</span><br><span class="line">- 内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写。</span><br><span class="line">- 只有一个根标签</span><br><span class="line">- 标签必须闭合</span><br><span class="line">- 标签首字母</span><br><span class="line">  - (1).若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。</span><br><span class="line">  - (2).若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts泛型</title>
      <link href="/2021/04/30/study/ts/ts%E6%B3%9B%E5%9E%8B/"/>
      <url>/2021/04/30/study/ts/ts%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型（Generics）"><a href="#泛型（Generics）" class="headerlink" title="泛型（Generics）"></a>泛型（Generics）</h2><h2 id="Generics-初探（Hello-World-of-Generics）"><a href="#Generics-初探（Hello-World-of-Generics）" class="headerlink" title="Generics 初探（Hello World of Generics）"></a>Generics 初探（Hello World of Generics）</h2><p>让我们开始写第一个泛型，一个恒等函数（identity function）。所谓恒等函数，就是一个返回任何传进内容的函数。你也可以把它理解为类似于 <code>echo</code> 命令。</p><p>不借助泛型，我们也许需要给予恒等函数一个具体的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">arg: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，我们使用 <code>any</code> 类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管使用 <code>any</code> 类型可以让我们接受任何类型的 <code>arg</code> 参数，但也让我们丢失了函数返回时的类型信息。如果我们传入一个数字，我们唯一知道的信息是函数可以返回任何类型的值。</p><p>所以我们需要一种可以捕获参数类型的方式，然后再用它表示返回值的类型。这里我们用了一个<strong>类型变量（type variable）</strong>，一种用在类型而非值上的特殊的变量。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们已经给恒等函数加上了一个类型变量 <code>Type</code>，这个 <code>Type</code> 允许我们捕获用户提供的类型，使得我们在接下来可以使用这个类型。这里，我们再次用 <code>Type</code> 作为返回的值的类型。在现在的写法里，我们可以清楚的知道参数和返回值的类型是同一个。</p><p>现在这个版本的恒等函数就是一个泛型，它可以支持传入多种类型。不同于使用 <code>any</code>，它没有丢失任何信息，就跟第一个使用 <code>number</code> 作为参数和返回值类型的的恒等函数一样准确。</p><p>在我们写了一个泛型恒等函数后，我们有两种方式可以调用它。第一种方式是传入所有的参数，包括类型参数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;myString&quot;</span>); <span class="comment">// let output: string</span></span><br></pre></td></tr></table></figure><p>在这里，我们使用 <code>&lt;&gt;</code> 而不是 <code>()</code>包裹了参数，并明确的设置 <code>Type</code> 为 <code>string</code> 作为函数调用的一个参数。</p><p>第二种方式可能更常见一些，这里我们使用了<strong>类型参数推断（type argument inference）</strong>（部分中文文档会翻译为“<strong>类型推论</strong>”），我们希望编译器能基于我们传入的参数自动推断和设置 <code>Type</code> 的值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = <span class="title function_">identity</span>(<span class="string">&quot;myString&quot;</span>); <span class="comment">// let output: string</span></span><br></pre></td></tr></table></figure><p>复制代码</p><p>注意这次我们并没有用 <code>&lt;&gt;</code> 明确的传入类型，当编译器看到 <code>myString</code> 这个值，就会自动设置 <code>Type</code> 为它的类型（即 <code>string</code>）。</p><p>类型参数推断是一个很有用的工具，它可以让我们的代码更短更易阅读。而在一些更加复杂的例子中，当编译器推断类型失败，你才需要像上一个例子中那样，明确的传入参数。</p><h2 id="使用泛型类型变量（Working-with-Generic-Type-Variables）"><a href="#使用泛型类型变量（Working-with-Generic-Type-Variables）" class="headerlink" title="使用泛型类型变量（Working with Generic Type Variables）"></a>使用泛型类型变量（Working with Generic Type Variables）</h2><p>当你创建类似于 <code>identity</code> 这样的泛型函数时，你会发现，编译器会强制你在函数体内，正确的使用这些类型参数。这就意味着，你必须认真的对待这些参数，考虑到他们可能是任何一个，甚至是所有的类型（比如用了联合类型）。</p><p>让我们以 <code>identity</code> 函数为例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想打印 <code>arg</code> 参数的长度呢？我们也许会尝试这样写：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line"><span class="comment">// Property &#x27;length&#x27; does not exist on type &#x27;Type&#x27;.</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们这样做，编译器会报错，提示我们正在使用 <code>arg</code> 的 <code>.length</code>属性，但是我们却没有在其他地方声明 <code>arg</code> 有这个属性。我们前面也说了这些类型变量代表了任何甚至所有类型。所以完全有可能，调用的时候传入的是一个 <code>number</code> 类型，但是 <code>number</code> 并没有 <code>.length</code> 属性。</p><p>现在假设这个函数，使用的是 <code>Type</code> 类型的数组而不是 <code>Type</code>。因为我们使用的是数组，<code>.length</code> 属性肯定存在。我们就可以像创建其他类型的数组一样写：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span>[] &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以这样理解 <code>loggingIdentity</code> 的类型：泛型函数 <code>loggingIdentity</code> 接受一个 <code>Type</code> 类型参数和一个实参 <code>arg</code>，实参 <code>arg</code> 是一个 <code>Type</code> 类型的数组。而该函数返回一个 <code>Type</code> 类型的数组。</p><p>如果我们传入的是一个全是数字类型的数组，我们的返回值同样是一个全是数字类型的数组，因为 <code>Type</code> 会被当成 <code>number</code> 传入。</p><p>现在我们使用类型变量 <code>Type</code>，是作为我们使用的类型的一部分，而不是之前的一整个类型，这会给我们更大的自由度。</p><p>我们也可以这样写这个例子，效果是一样的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Type</span>&gt;): <span class="title class_">Array</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型类型-Generic-Types"><a href="#泛型类型-Generic-Types" class="headerlink" title="泛型类型 (Generic Types)"></a>泛型类型 (Generic Types)</h2><p>在上个章节，我们已经创建了一个泛型恒等函数，可以支持传入不同的类型。在这个章节，我们探索函数本身的类型，以及如何创建泛型接口。</p><p>泛型函数的形式就跟其他非泛型函数的一样，都需要先列一个类型参数列表，这有点像函数声明：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &lt;<span class="title class_">Type</span>&gt;<span class="function">(<span class="params">arg: Type</span>) =&gt;</span> <span class="title class_">Type</span> = identity;</span><br></pre></td></tr></table></figure><p>泛型的类型参数可以使用不同的名字，只要数量和使用方式上一致即可：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &lt;<span class="title class_">Input</span>&gt;<span class="function">(<span class="params">arg: Input</span>) =&gt;</span> <span class="title class_">Input</span> = identity;</span><br></pre></td></tr></table></figure><p>我们也可以以对象类型的调用签名的形式，书写这个泛型类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &#123; &lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#125; = identity;</span><br></pre></td></tr></table></figure><p>这可以引导我们写出第一个泛型接口，让我们使用上个例子中的对象字面量，然后把它的代码移动到接口里：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span> &#123;</span><br><span class="line">  &lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span> = identity;</span><br></pre></td></tr></table></figure><p>有的时候，我们会希望将泛型参数作为整个接口的参数，这可以让我们清楚的知道传入的是什么参数 (举个例子：<code>Dictionary&lt;string&gt;</code> 而不是 <code>Dictionary</code>)。而且接口里其他的成员也可以看到。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span>&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure><h2 id="泛型类（Generic-Classes）"><a href="#泛型类（Generic-Classes）" class="headerlink" title="泛型类（Generic Classes）"></a>泛型类（Generic Classes）</h2><p>泛型类写法上类似于泛型接口。在类名后面，使用尖括号中 <code>&lt;&gt;</code> 包裹住类型参数列表：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;<span class="title class_">NumType</span>&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: <span class="title class_">NumType</span>;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: NumType, y: NumType</span>) =&gt;</span> <span class="title class_">NumType</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>复制代码</p><p>在这个例子中，并没有限制你只能使用 <code>number</code> 类型。我们也可以使用 <code>string</code> 甚至更复杂的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringNumeric = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">stringNumeric.<span class="property">zeroValue</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">stringNumeric.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringNumeric.<span class="title function_">add</span>(stringNumeric.<span class="property">zeroValue</span>, <span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure><p>复制代码</p><p>就像接口一样，把类型参数放在类上，可以确保类中的所有属性都使用了相同的类型。</p><p>正如我们在 Class 章节提过的，一个类它的类型有两部分：静态部分和实例部分。泛型类仅仅对实例部分生效，所以当我们使用类的时候，注意静态成员并不能使用类型参数。</p><h2 id="泛型约束（Generic-Constraints）"><a href="#泛型约束（Generic-Constraints）" class="headerlink" title="泛型约束（Generic Constraints）"></a>泛型约束（Generic Constraints）</h2><p>在早一点的 <code>loggingIdentity</code> 例子中，我们想要获取参数 <code>arg</code> 的 <code>.length</code> 属性，但是编译器并不能证明每种类型都有 <code>.length</code> 属性，所以它会提示错误：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="comment">// Property &#x27;length&#x27; does not exist on type &#x27;Type&#x27;.</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ts分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts类型never</title>
      <link href="/2021/04/28/study/ts/ts%E7%B1%BB%E5%9E%8Bnever/"/>
      <url>/2021/04/28/study/ts/ts%E7%B1%BB%E5%9E%8Bnever/</url>
      
        <content type="html"><![CDATA[<h2 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a>never 类型</h2><p>当进行收窄的时候，如果你把所有可能的类型都穷尽了，TypeScript 会使用一个 <code>never</code> 类型来表示一个不可能存在的状态。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="keyword">function</span> (<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="comment">// while(true) &#123; console.log(111)&#125;</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">n</span>()</span><br></pre></td></tr></table></figure><h2 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h2><p><code>void</code> 表示一个函数并不会返回任何值，当函数并没有任何返回值，或者返回不了明确的值的时候，就应该用这种类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The inferred return type is void</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">noop</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 JavaScript 中，一个函数并不会返回任何值，会隐式返回 <code>undefined</code>，但是 <code>void</code> 和 <code>undefined</code> 在 TypeScript 中并不一样。在本文的最后会有更详细的介绍。</p><blockquote><p>void 跟 undefined 不一样</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回-void"><a href="#返回-void" class="headerlink" title="返回 void"></a>返回 <code>void</code></h3><p>函数有一个 <code>void</code> 返回类型，会产生一些意料之外，情理之中的行为。</p><p>当基于上下文的类型推导（Contextual Typing）推导出返回类型为 <code>void</code> 的时候，并不会强制函数一定不能返回内容。换句话说，如果这样一个返回 <code>void</code> 类型的函数类型 <code>(type vf = () =&gt; void)</code>， 当被应用的时候，也是可以返回任何值的，但返回的值会被忽略掉。</p><p>因此，下面这些<code>() =&gt; void</code> 类型的实现都是有效的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> voidFunc = <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">f1</span>: voidFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">f2</span>: voidFunc = <span class="function">() =&gt;</span> <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">f3</span>: voidFunc = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而且即便这些函数的返回值赋值给其他变量，也会维持 <code>void</code> 类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = <span class="title function_">f1</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> v2 = <span class="title function_">f2</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> v3 = <span class="title function_">f3</span>();</span><br></pre></td></tr></table></figure><p>正是因为这个特性的存在，所以接下来的代码才会是有效的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> src = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> dst = [<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">src.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> dst.<span class="title function_">push</span>(el));</span><br></pre></td></tr></table></figure><p>尽管 <code>Array.prototype.push</code> 返回一个数字，并且 <code>Array.prototype.forEach</code> 方法期待一个返回 <code>void</code> 类型的函数，但这段代码依然没有报错。就是因为基于上下文推导，推导出 forEach 函数返回类型为 void，正是因为不强制函数一定不能返回内容，所以上面这种 <code>return dst.push(el)</code> 的写法才不会报错。</p><p>另外还有一个特殊的例子需要注意，当一个函数字面量定义返回一个 <code>void</code> 类型，函数是一定不能返回任何东西的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// @ts-expect-error</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> f3 = <span class="keyword">function</span> (<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// @ts-expect-error</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ts分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts类型2</title>
      <link href="/2021/04/26/study/ts/ts%E7%B1%BB%E5%9E%8B2/"/>
      <url>/2021/04/26/study/ts/ts%E7%B1%BB%E5%9E%8B2/</url>
      
        <content type="html"><![CDATA[<h2 id="接口（Interfaces）"><a href="#接口（Interfaces）" class="headerlink" title="接口（Interfaces）"></a>接口（Interfaces）</h2><p>接口声明（interface declaration）是命名对象类型的另一种方式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: Point</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.<span class="property">x</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">printCoord</span>(&#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="类型别名和接口的不同"><a href="#类型别名和接口的不同" class="headerlink" title="类型别名和接口的不同"></a>类型别名和接口的不同</h3><p>类型别名和接口非常相似，大部分时候，你可以任意选择使用。接口的几乎所有特性都可以在 <code>type</code> 中使用，两者最关键的差别在于类型别名本身无法添加新的属性，而接口是可以扩展的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interface</span></span><br><span class="line"><span class="comment">// 通过继承扩展类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bear</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">honey</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bear = <span class="title function_">getBear</span>() </span><br><span class="line">bear.<span class="property">name</span></span><br><span class="line">bear.<span class="property">honey</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// Type</span></span><br><span class="line"><span class="comment">// 通过交集扩展类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bear</span> = <span class="title class_">Animal</span> &amp; &#123; </span><br><span class="line">  <span class="attr">honey</span>: <span class="built_in">boolean</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bear = <span class="title function_">getBear</span>();</span><br><span class="line">bear.<span class="property">name</span>;</span><br><span class="line">bear.<span class="property">honey</span>;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interface</span></span><br><span class="line"><span class="comment">// 对一个已经存在的接口添加新的字段</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">  <span class="attr">ts</span>: <span class="title class_">TypeScriptAPI</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src = <span class="string">&#x27;const a = &quot;Hello World&quot;&#x27;</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">ts</span>.<span class="title function_">transpileModule</span>(src, &#123;&#125;);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// Type</span></span><br><span class="line"><span class="comment">// 创建后不能被改变</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Window</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Window</span> = &#123;</span><br><span class="line">  <span class="attr">ts</span>: <span class="title class_">TypeScriptAPI</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: Duplicate identifier &#x27;Window&#x27;.</span></span><br></pre></td></tr></table></figure><h2 id="类型断言（Type-Assertions）"><a href="#类型断言（Type-Assertions）" class="headerlink" title="类型断言（Type Assertions）"></a>类型断言（Type Assertions）</h2><p>有的时候，你知道一个值的类型，但 TypeScript 不知道。</p><p>举个例子，如果你使用 <code>document.getElementById</code>，TypeScript 仅仅知道它会返回一个 <code>HTMLElement</code>，但是你却知道，你要获取的是一个 <code>HTMLCanvasElement</code>。</p><p>这时，你可以使用类型断言将其指定为一个更具体的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myCanvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main_canvas&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLCanvasElement</span>;</span><br></pre></td></tr></table></figure><p>就像类型注解一样，类型断言也会被编译器移除，并且不会影响任何运行时的行为。</p><p>你也可以使用尖括号语法（注意不能在 <code>.tsx</code> 文件内使用），是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myCanvas = &lt;<span class="title class_">HTMLCanvasElement</span>&gt;<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main_canvas&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>谨记：因为类型断言会在编译的时候被移除，所以运行时并不会有类型断言的检查，即使类型断言是错误的，也不会有异常或者 <code>null</code> 产生。</p></blockquote><p>TypeScript 仅仅允许类型断言转换为一个更加具体或者更不具体的类型。这个规则可以阻止一些不可能的强制类型转换，比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="string">&quot;hello&quot;</span> <span class="keyword">as</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// Conversion of type &#x27;string&#x27; to type &#x27;number&#x27; may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to &#x27;unknown&#x27; first.</span></span><br></pre></td></tr></table></figure><p>有的时候，这条规则会显得非常保守，阻止了你原本有效的类型转换。如果发生了这种事情，你可以使用双重断言，先断言为 <code>any</code> （或者是 <code>unknown</code>），然后再断言为期望的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = (expr <span class="keyword">as</span> <span class="built_in">any</span>) <span class="keyword">as</span> T;</span><br></pre></td></tr></table></figure><h2 id="非空断言操作符（后缀-）-Non-null-Assertion-Operator"><a href="#非空断言操作符（后缀-）-Non-null-Assertion-Operator" class="headerlink" title="非空断言操作符（后缀 !）(Non-null Assertion Operator)"></a>非空断言操作符（后缀 <code>!</code>）(Non-null Assertion Operator)</h2><p>TypeScript 提供了一个特殊的语法，可以在不做任何检查的情况下，从类型中移除 <code>null</code> 和 <code>undefined</code>，这就是在任意表达式后面写上 <code>!</code> ，这是一个有效的类型断言，表示它的值不可能是 <code>null</code> 或者 <code>undefined</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">liveDangerously</span>(<span class="params">x?: <span class="built_in">number</span> | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="comment">// No error</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x!.<span class="title function_">toFixed</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制代码</p><p>就像其他的类型断言，这也不会更改任何运行时的行为。重要的事情说一遍，只有当你明确的知道这个值不可能是 <code>null</code> 或者 <code>undefined</code> 时才使用 <code>!</code> 。</p><h2 id="枚举（Enums）"><a href="#枚举（Enums）" class="headerlink" title="枚举（Enums）"></a>枚举（Enums）</h2><p>枚举是 TypeScript 添加的新特性，用于描述一个值可能是多个常量中的一个。不同于大部分的 TypeScript 特性，这并不是一个类型层面的增量，而是会添加到语言和运行时。因为如此，你应该了解下这个特性。但是可以等一等再用，除非你确定要使用它</p><h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><p>这也是 JavaScript 中的一个原始类型，通过函数 <code>Symbol()</code>，我们可以创建一个全局唯一的引用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = <span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> secondName = <span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (firstName === secondName) &#123;</span><br><span class="line">  <span class="comment">// This condition will always return &#x27;false&#x27; since the types &#x27;typeof firstName&#x27; and &#x27;typeof secondName&#x27; have no overlap.</span></span><br><span class="line">  <span class="comment">// Can&#x27;t ever happen</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ts分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts类型</title>
      <link href="/2021/04/25/study/ts/ts%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/04/25/study/ts/ts%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="原始类型-string，number-和-boolean（The-primitives）"><a href="#原始类型-string，number-和-boolean（The-primitives）" class="headerlink" title="原始类型: string，number 和 boolean（The primitives）"></a>原始类型: <code>string</code>，<code>number</code> 和 <code>boolean</code>（The primitives）</h2><p>JavaScript 有三个非常常用的原始类型：</p><p><code>string</code>，<code>number</code> 和 <code>boolean</code>，每一个类型在 TypeScript 中都有对应的类型。他们的名字跟你在 JavaScript 中使用 <code>typeof</code> 操作符得到的结果是一样的。</p><ul><li><code>string</code> 表示字符串，比如 “Hello, world”</li><li><code>number</code> 表示数字，比如 <code>42</code>，JavaScript 中没有 <code>int</code> 或者 <code>float</code>，所有的数字，类型都是 <code>number</code></li><li><code>boolean</code> 表示布尔值，其实也就两个值： <code>true</code> 和 <code>false</code></li></ul><blockquote><p>类型名 <code>String</code> ，<code>Number</code> 和 <code>Boolean</code> （首字母大写）也是合法的，但它们是一些非常少见的特殊内置类型。所以类型总是使用 <code>string</code> ，<code>number</code> 或者 <code>boolean</code> 。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span></span><br><span class="line">a = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// &quot;1&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h2><p>声明一个类似于 <code>[1, 2, 3]</code> 的数组类型，你需要用到语法 <code>number[]</code>。这个语法可以适用于任何类型（举个例子，<code>string[]</code> 表示一个字符串数组）。你也可能看到这种写法 <code>Array&lt;number&gt;</code>，是一样的。我们会在泛型章节为大家介绍 <code>T&lt;U&gt;</code> 语法。</p><blockquote><p>注意 <code>[number]</code> 和 <code>number[]</code> 表示不同的意思，参考<a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types">元组 (opens new window)</a>章节</p></blockquote><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>TypeScript 有一个特殊的类型，<code>any</code>，当你不希望一个值导致类型检查错误的时候，就可以设置为 <code>any</code> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let arr: Number[] = [1, 2, 3]</span><br><span class="line">console.log(arr); // [1, 2, 3] 数组中的元素类型只能是数字</span><br><span class="line">let arr1: Array&lt;any&gt; = [1, &quot;2&quot;] </span><br><span class="line">console.log(arr1); // [1, &quot;2&quot;]  数组中的元素类型可以是任意类型</span><br></pre></td></tr></table></figure><h2 id="变量上的类型注解"><a href="#变量上的类型注解" class="headerlink" title="变量上的类型注解"></a>变量上的类型注解</h2><p>当你使用 <code>const</code>、<code>var</code> 或 <code>let</code> 声明一个变量时，你可以选择性的添加一个类型注解，显式指定变量的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">myName</span>: <span class="built_in">string</span> = <span class="string">&quot;Alice&quot;</span>;</span><br></pre></td></tr></table></figure><p>复制代码</p><blockquote><p>TypeScript 并不使用“在左边进行类型声明”的形式，比如 <code>int x = 0</code>；类型注解往往跟在要被声明类型的内容后面。</p></blockquote><p>不过大部分时候，这不是必须的。因为 TypeScript 会自动推断类型。举个例子，变量的类型可以基于初始值进行推断：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// No type annotation needed -- &#x27;myName&#x27; inferred as type &#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">let</span> myName = <span class="string">&quot;Alice&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（Function）</h2><p>函数是 JavaScript 传递数据的主要方法。TypeScript 允许你指定函数的输入值和输出值的类型。</p><h3 id="参数类型注解（Parameter-Type-Annotations）"><a href="#参数类型注解（Parameter-Type-Annotations）" class="headerlink" title="参数类型注解（Parameter Type Annotations）"></a>参数类型注解（Parameter Type Annotations）</h3><p>当你声明一个函数的时候，你可以在每个参数后面添加一个类型注解，声明函数可以接受什么类型的参数。参数类型注解跟在参数名字后面：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parameter type annotation</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + name.<span class="title function_">toUpperCase</span>() + <span class="string">&quot;!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制代码</p><p>当参数有了类型注解的时候，TypeScript 便会检查函数的实参：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Would be a runtime error if executed!</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="number">42</span>);</span><br><span class="line"><span class="comment">// Argument of type &#x27;number&#x27; is not assignable to parameter of type &#x27;string&#x27;.</span></span><br></pre></td></tr></table></figure><p>复制代码</p><blockquote><p>即便你对参数没有做类型注解，TypeScript 依然会检查传入参数的数量是否正确</p></blockquote><h2 id="联合类型（Union-Types）"><a href="#联合类型（Union-Types）" class="headerlink" title="联合类型（Union Types）"></a>联合类型（Union Types）</h2><p>TypeScript 类型系统允许你使用一系列的操作符，基于已经存在的类型构建新的类型。现在我们知道如何编写一些基础的类型了，是时候把它们组合在一起了。</p><h3 id="定义一个联合类型（Defining-a-Union-Type）"><a href="#定义一个联合类型（Defining-a-Union-Type）" class="headerlink" title="定义一个联合类型（Defining a Union Type）"></a>定义一个联合类型（Defining a Union Type）</h3><p>第一种组合类型的方式是使用联合类型，一个联合类型是由两个或者更多类型组成的类型，表示值可能是这些类型中的任意一个。这其中每个类型都是联合类型的<strong>成员（members）</strong>。</p><p>让我们写一个函数，用来处理字符串或者数字：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Your ID is: &quot;</span> + id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// OK</span></span><br><span class="line"><span class="title function_">printId</span>(<span class="number">101</span>);</span><br><span class="line"><span class="comment">// OK</span></span><br><span class="line"><span class="title function_">printId</span>(<span class="string">&quot;202&quot;</span>);</span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="title function_">printId</span>(&#123; <span class="attr">myID</span>: <span class="number">22342</span> &#125;);</span><br><span class="line"><span class="comment">// Argument of type &#x27;&#123; myID: number; &#125;&#x27; is not assignable to parameter of type &#x27;string | number&#x27;.</span></span><br><span class="line"><span class="comment">// Type &#x27;&#123; myID: number; &#125;&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure><h3 id="匿名函数（Anonymous-Functions）"><a href="#匿名函数（Anonymous-Functions）" class="headerlink" title="匿名函数（Anonymous Functions）"></a>匿名函数（Anonymous Functions）</h3><p>匿名函数有一点不同于函数声明，当 TypeScript 知道一个匿名函数将被怎样调用的时候，匿名函数的参数会被自动的指定类型。</p><p>这是一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// No type annotations here, but TypeScript can spot the bug</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Eve&quot;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Contextual typing for function</span></span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">toUppercase</span>());</span><br><span class="line">  <span class="comment">// Property &#x27;toUppercase&#x27; does not exist on type &#x27;string&#x27;. Did you mean &#x27;toUpperCase&#x27;?</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Contextual typing also applies to arrow functions</span></span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">toUppercase</span>());</span><br><span class="line">  <span class="comment">// Property &#x27;toUppercase&#x27; does not exist on type &#x27;string&#x27;. Did you mean &#x27;toUpperCase&#x27;?</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>尽管参数 <code>s</code> 并没有添加类型注解，但 TypeScript 根据 <code>forEach</code> 函数的类型，以及传入的数组的类型，最后推断出了 <code>s</code> 的类型。</p><p>这个过程被称为<strong>上下文推断（contextual typing）</strong>，因为正是从函数出现的上下文中推断出了它应该有的类型。</p><p>跟推断规则一样，你也不需要学习它是如何发生的，只要知道，它确实存在并帮助你省掉某些并不需要的注解。后面，我们还会看到更多这样的例子，了解一个值出现的上下文是如何影响它的类型的。</p><h2 id="对象类型（Object-Types）"><a href="#对象类型（Object-Types）" class="headerlink" title="对象类型（Object Types）"></a>对象类型（Object Types）</h2><p>除了原始类型，最常见的类型就是对象类型了。定义一个对象类型，我们只需要简单的列出它的属性和对应的类型。</p><p>举个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The parameter&#x27;s type annotation is an object type</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.<span class="property">x</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printCoord</span>(&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure><p>复制代码</p><p>这里，我们给参数添加了一个类型，该类型有两个属性, <code>x</code> 和 <code>y</code>，两个都是 <code>number</code> 类型。你可以使用 <code>,</code> 或者 <code>;</code> 分开属性，最后一个属性的分隔符加不加都行。</p><p>每个属性对应的类型是可选的，如果你不指定，默认使用 <code>any</code> 类型。</p><h3 id="可选属性（Optional-Properties）"><a href="#可选属性（Optional-Properties）" class="headerlink" title="可选属性（Optional Properties）"></a>可选属性（Optional Properties）</h3><p>对象类型可以指定一些甚至所有的属性为可选的，你只需要在属性名后添加一个 <code>?</code> ：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params">obj: &#123; first: <span class="built_in">string</span>; last?: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Both OK</span></span><br><span class="line"><span class="title function_">printName</span>(&#123; <span class="attr">first</span>: <span class="string">&quot;Bob&quot;</span> &#125;);</span><br><span class="line"><span class="title function_">printName</span>(&#123; <span class="attr">first</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">last</span>: <span class="string">&quot;Alisson&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><p>在 JavaScript 中，如果你获取一个不存在的属性，你会得到一个 <code>undefined</code> 而不是一个运行时错误。因此，当你获取一个可选属性时，你需要在使用它前，先检查一下是否是 <code>undefined</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params">obj: &#123; first: <span class="built_in">string</span>; last?: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// Error - might crash if &#x27;obj.last&#x27; wasn&#x27;t provided!</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">last</span>.<span class="title function_">toUpperCase</span>());</span><br><span class="line">  <span class="comment">// Object is possibly &#x27;undefined&#x27;.</span></span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">last</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// OK</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">last</span>.<span class="title function_">toUpperCase</span>());</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// A safe alternative using modern JavaScript syntax:</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">last</span>?.<span class="title function_">toUpperCase</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型别名（Type-Aliases）"><a href="#类型别名（Type-Aliases）" class="headerlink" title="类型别名（Type Aliases）"></a>类型别名（Type Aliases）</h2><p>我们已经学会在类型注解里直接使用对象类型和联合类型，这很方便，但有的时候，一个类型会被使用多次，此时我们更希望通过一个单独的名字来引用它。</p><p>这就是类型别名（type alias）。所谓类型别名，顾名思义，一个可以指代任意类型的名字。类型别名的语法是：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Exactly the same as the earlier example</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: Point</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.<span class="property">x</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">printCoord</span>(&#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>你可以使用类型别名给任意类型一个名字，举个例子，命名一个联合类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">ID</span> = <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><p>注意别名是唯一的别名，你不能使用类型别名创建同一个类型的不同版本。当你使用类型别名的时候，它就跟你编写的类型是一样的</p>]]></content>
      
      
      <categories>
          
          <category> ts分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts简介</title>
      <link href="/2021/04/21/study/ts/ts%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/04/21/study/ts/ts%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="ts是什么？"><a href="#ts是什么？" class="headerlink" title="ts是什么？"></a>ts是什么？</h2><h3 id="TypeScript-静态类型检查器"><a href="#TypeScript-静态类型检查器" class="headerlink" title="TypeScript: 静态类型检查器"></a>TypeScript: 静态类型检查器</h3><p>前面我们提到，一些语言根本不允许那些错误的程序运行。在不运行代码的情况下检测其中的错误称为 <em>静态检查</em> 。根据被操作的值的种类来确定是什么错误和什么不是错误，这称为静态 <em>类型</em> 检查。</p><p>TypeScript 在执行之前，基于 <em>值的类型</em> 检查程序是否有错误。它是 <em>静态类型检查器</em>。例如，基于 <code>obj</code> 的 <em>类型</em>，TypeScript 在上面的最后一个示例中发现了一个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123; width: 10, height: 15 &#125;;</span><br><span class="line">const area = obj.width * obj.heigth;</span><br><span class="line">Property &#x27;heigth&#x27; does not exist on type &#x27;&#123; width: number; height: number; &#125;&#x27;. Did you mean &#x27;height&#x27;?Property &#x27;heigth&#x27; does not exist on type &#x27;&#123; width: number; height: number; &#125;&#x27;. Did you mean &#x27;height&#x27;?</span><br></pre></td></tr></table></figure><p>JavaScript 的类型化超集</p><h2 id="TypeScript-与-JavaScript-是什么关系呢？"><a href="#TypeScript-与-JavaScript-是什么关系呢？" class="headerlink" title="TypeScript 与 JavaScript 是什么关系呢？"></a>TypeScript 与 JavaScript 是什么关系呢？</h2><p>TypeScript 是 JavaScript 的 <em>超集</em> ：因此 JS 语法是合法的 TS。语法是指我们编写文本以组成程序的方式。例如，这段代码有一个 <em>语法</em> 错误，因为它缺少一个 <code>)</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = (<span class="number">4</span><span class="string">&#x27;)&#x27;</span> expected.</span><br></pre></td></tr></table></figure><p>TypeScript 不会将任何 JavaScript 代码视为错误。这意味着你可以将任何有效的 JavaScript 代码放在 TypeScript 文件中，而不必担心它的确切编写方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>复制代码</p><blockquote><p>这会把 TypeScript 编译器安装在全局，如果你想把 <code>tsc</code> 安装在一个本地的 <code>node_modules</code> 中，你也可以使用 npx 或者类似的工具。</p></blockquote><p>让我们创建一个空文件夹，然后写下我们第一个 TypeScript 程序: <code>hello.ts</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Greets the world.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br></pre></td></tr></table></figure><p>复制代码</p><p>注意这里并没有什么多余的修饰，这个 <code>hello world</code> 项目就跟你用 JavaScript 写是一样的。现在你可以运行 <code>tsc</code> 命令，执行类型检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure><p>复制代码</p><p>现在我们已经运行了 <code>tsc</code>，但是你会发现什么也没有发生。确实如此，因为这里并没有什么类型错误，所以命令行里也不会有任何输出。</p><p>然后就是会生成一个hello.js。运行这个文件就会打印 Hello world!</p><h2 id="TS学习文档"><a href="#TS学习文档" class="headerlink" title="TS学习文档"></a>TS学习文档</h2><p><a href="https://ts.yayujs.com/handbook/EverydayType.html#any">常见类型_TypeScript中文文档 (yayujs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> ts分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css回流与重绘</title>
      <link href="/2021/04/18/study/css/css%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98/"/>
      <url>/2021/04/18/study/css/css%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98/</url>
      
        <content type="html"><![CDATA[<h2 id="回流跟重绘"><a href="#回流跟重绘" class="headerlink" title="回流跟重绘"></a>回流跟重绘</h2><p>在<code>HTML</code>中，每个元素都可以理解成一个盒子，在浏览器解析过程中，会涉及到回流与重绘：</p><ul><li>回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置</li><li>重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制</li></ul><p>在页面初始渲染阶段，回流不可避免的触发，可以理解成页面一开始是空白的元素，后面添加了新的元素使页面布局发生改变</p><p>当我们对 <code>DOM</code> 的修改引发了 <code>DOM</code>几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性，然后再将计算的结果绘制出来</p><p>当我们对 <code>DOM</code>的修改导致了样式的变化（<code>color</code>或<code>background-color</code>），却并未影响其几何属性时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式，这里就仅仅触发了重绘</p><h2 id="什么场景下会触发？"><a href="#什么场景下会触发？" class="headerlink" title="什么场景下会触发？"></a>什么场景下会触发？</h2><h3 id="回流触发时机"><a href="#回流触发时机" class="headerlink" title="回流触发时机"></a>回流触发时机</h3><p>回流这一阶段主要是计算节点的位置和几何信息，那么当页面布局和几何信息发生变化的时候，就需要回流，如下面情况：</p><ul><li>添加或删除可见的DOM元素</li><li>元素的位置发生变化</li><li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li><li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代</li><li>页面一开始渲染的时候（这避免不了）</li><li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li></ul><h3 id="重绘触发时机"><a href="#重绘触发时机" class="headerlink" title="重绘触发时机"></a>重绘触发时机</h3><p>触发回流一定会触发重绘</p><p>可以把页面理解为一个黑板，黑板上有一朵画好的小花。现在我们要把这朵从左边移到了右边，那我们要先确定好右边的具体位置，画好形状（回流），再画上它原有的颜色（重绘）</p><p>除此之外还有一些其他引起重绘行为：</p><ul><li>颜色的修改</li><li>文本方向的修改</li><li>阴影的修改</li></ul><h2 id="如何减少"><a href="#如何减少" class="headerlink" title="如何减少"></a>如何减少</h2><p>我们了解了如何触发回流和重绘的场景，下面给出避免回流的经验：</p><ul><li>如果想设定元素的样式，通过改变元素的 <code>class</code> 类名 (尽可能在 DOM 树的最里层)</li><li>避免设置多项内联样式</li><li>应用元素的动画，使用 <code>position</code> 属性的 <code>fixed</code> 值或 <code>absolute</code> 值(如前文示例所提)</li><li>避免使用 <code>table</code> 布局，<code>table</code> 中每个元素的大小以及内容的改动，都会导致整个 <code>table</code> 的重新计算</li><li>对于那些复杂的动画，对其设置 <code>position: fixed/absolute</code>，尽可能地使元素脱离文档流，从而减少对其他元素的影响</li><li>使用css3硬件加速，可以让<code>transform</code>、<code>opacity</code>、<code>filters</code>这些动画不会引起回流重绘</li><li>避免使用 CSS 的 <code>JavaScript</code> 表达式</li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cssflex布局</title>
      <link href="/2020/06/21/study/css/cssflex%E5%B8%83%E5%B1%80/"/>
      <url>/2020/06/21/study/css/cssflex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="flexbox弹性盒布局"><a href="#flexbox弹性盒布局" class="headerlink" title="flexbox弹性盒布局"></a>flexbox弹性盒布局</h1><p><code>Flexible Box</code> 简称 <code>flex</code>，意为”弹性布局”，可以简便、完整、响应式地实现各种页面布局</p><p>采用Flex布局的元素，称为<code>flex</code>容器<code>container</code></p><p>它的所有子元素自动成为容器成员，称为<code>flex</code>项目<code>item</code></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>关于<code>flex</code>常用的属性，我们可以划分为容器属性和容器成员属性</p><p>容器属性有：</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>决定主轴的方向(即项目的排列方向)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;   </span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>属性对应如下：</p><ul><li>row（默认值）：主轴为水平方向，起点在左端</li><li>row-reverse：主轴为水平方向，起点在右端</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿</li></ul><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>弹性元素永远沿主轴排列，那么如果主轴排不下，通过<code>flex-wrap</code>决定容器内项目是否可换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>属性对应如下：</p><ul><li>nowrap（默认值）：不换行</li><li>wrap：换行，第一行在下方</li><li>wrap-reverse：换行，第一行在上方</li></ul><p>默认情况是不换行，但这里也不会任由元素直接溢出容器，会涉及到元素的弹性伸缩</p><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>定义了项目在主轴上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性对应如下：</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center：居中</li><li>space-between：两端对齐，项目之间的间隔都相等</li><li>space-around：两个项目两侧间隔相等</li></ul><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>定义项目在交叉轴上如何对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性对应如下：</p><ul><li>flex-start：交叉轴的起点对齐</li><li>flex-end：交叉轴的终点对齐</li><li>center：交叉轴的中点对齐</li><li>baseline: 项目的第一行文字的基线对齐</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性对应如吓：</p><ul><li>flex-start：与交叉轴的起点对齐</li><li>flex-end：与交叉轴的终点对齐</li><li>center：与交叉轴的中点对齐</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li><li>stretch（默认值）：轴线占满整个交叉轴</li></ul><p>容器成员属性如下：</p><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>定义项目的排列顺序。数值越小，排列越靠前，默认为0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>上面讲到当容器设为<code>flex-wrap: nowrap;</code>不换行的时候，容器宽度有不够分的情况，弹性元素会根据<code>flex-grow</code>来决定</p><p>定义项目的放大比例（容器宽度&gt;元素总宽度时如何伸展）</p><p>默认为<code>0</code>，即如果存在剩余空间，也不放大</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间</p><p>如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍</p><p>弹性容器的宽度正好等于元素宽度总和，无多余宽度，此时无论<code>flex-grow</code>是什么值都不会生效</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>定义了项目的缩小比例（容器宽度&lt;元素总宽度时如何收缩），默认为1，即如果空间不足，该项目将缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小</p><p>如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小</p><p>在容器宽度有剩余时，<code>flex-shrink</code>也是不会生效的</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>设置的是元素在主轴上的初始尺寸，所谓的初始尺寸就是元素在<code>flex-grow</code>和<code>flex-shrink</code>生效前的尺寸</p><p>浏览器根据这个属性，计算主轴是否有多余空间，默认值为<code>auto</code>，即项目的本来大小，如设置了<code>width</code>则元素尺寸由<code>width/height</code>决定（主轴方向），没有设置则由内容决定</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">   <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当设置为0的是，会根据内容撑开</p><p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>，也是比较难懂的一个复合属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些属性有：</p><ul><li>flex: 1 = flex: 1 1 0%</li><li>flex: 2 = flex: 2 1 0%</li><li>flex: auto = flex: 1 1 auto</li><li>flex: none = flex: 0 0 auto，常用于固定尺寸不伸缩</li></ul><p><code>flex:1</code> 和 <code>flex:auto</code> 的区别，可以归结于<code>flex-basis:0</code>和<code>flex-basis:auto</code>的区别</p><p>当设置为0时（绝对弹性元素），此时相当于告诉<code>flex-grow</code>和<code>flex-shrink</code>在伸缩的时候不需要考虑我的尺寸</p><p>当设置为<code>auto</code>时（相对弹性元素），此时则需要在伸缩时将元素尺寸纳入考虑</p><p>注意：建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性</p><p>默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>在以前的文章中，我们能够通过<code>flex</code>简单粗暴的实现元素水平垂直方向的居中，以及在两栏三栏自适应布局中通过<code>flex</code>完成，这里就不再展开代码的演示</p><p>包括现在在移动端、小程序这边的开发，都建议使用<code>flex</code>进行布局</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js深浅拷贝</title>
      <link href="/2020/05/18/study/js/js%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/05/18/study/js/js%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="深拷贝浅拷贝的区别？如何实现？"><a href="#深拷贝浅拷贝的区别？如何实现？" class="headerlink" title="深拷贝浅拷贝的区别？如何实现？"></a>深拷贝浅拷贝的区别？如何实现？</h2><h2 id="数据类型存储"><a href="#数据类型存储" class="headerlink" title="数据类型存储"></a>数据类型存储</h2><p><code>JavaScript</code>中存在两大数据类型：</p><ul><li>基本类型</li><li>引用类型</li></ul><p>基本类型数据保存在在栈内存中</p><p>引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</p><p>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址</p><p>即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p><p>下面简单实现一个浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(prop))&#123;</span><br><span class="line">            newObj[prop] = obj[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>JavaScript</code>中，存在浅拷贝的现象有：</p><ul><li><code>Object.assign</code></li><li><code>Array.prototype.slice()</code>, <code>Array.prototype.concat()</code></li><li>使用拓展运算符实现的复制</li></ul><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p><p>常见的深拷贝方式有：</p><ul><li>_.cloneDeep()</li><li>jQuery.extend()</li><li>JSON.stringify()</li><li>手写循环递归</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>浅拷贝和深拷贝都创建出一个新的对象，但在复制对象属性的时候，行为就不一样</p><p>浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响原对象</p><p>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>前提为拷贝类型为引用类型的情况下：</p><ul><li>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</li><li>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2020/03/26/study/js/js%E9%97%AD%E5%8C%85/"/>
      <url>/2020/03/26/study/js/js%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul><li>闭包就是能够读取其他函数内部变量的函数</li><li>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域</li><li><strong>闭包的特性：</strong><ul><li>函数内再嵌套函数</li><li>内部函数可以引用外层的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ul></li></ul><h2 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a><strong>闭包的理解</strong></h2><ul><li>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念</li><li>闭包 的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中</li><li>闭包的另一个用处，是封装对象的私有属性和私有方法</li><li><strong>好处</strong>：能够实现封装和缓存等；</li><li><strong>坏处</strong>：就是消耗内存、不正当使用会造成内存溢出的问题</li></ul><h2 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a><strong>使用闭包的注意点</strong></h2><ul><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露</li><li>解决方法是，在退出函数之前，将不使用的局部变量全部删除</li></ul><h2 id="闭包实际场景运用"><a href="#闭包实际场景运用" class="headerlink" title="闭包实际场景运用"></a><strong>闭包实际场景运用</strong></h2><h3 id="1-比如常见的防抖节流"><a href="#1-比如常见的防抖节流" class="headerlink" title="1.比如常见的防抖节流"></a>1.比如常见的防抖节流</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">300</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer; <span class="comment">//闭包引用的外界变量</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用闭包可以在-JavaScript-中模拟块级作用域"><a href="#2-使用闭包可以在-JavaScript-中模拟块级作用域" class="headerlink" title="2.使用闭包可以在 JavaScript 中模拟块级作用域"></a>2.使用闭包可以在 <code>JavaScript</code> 中模拟块级作用域</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outputNumbers</span>(<span class="params">count</span>) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line">  <span class="title function_">alert</span>(i); <span class="comment">//导致一个错误！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-闭包可以用于在对象中创建私有变量"><a href="#3-闭包可以用于在对象中创建私有变量" class="headerlink" title="3.闭包可以用于在对象中创建私有变量"></a>3.闭包可以用于在对象中创建私有变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aaa = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bbb</span>(<span class="params"></span>) &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">ccc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">b</span>: bbb, <span class="comment">//json结构</span></span><br><span class="line">    <span class="attr">c</span>: ccc,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa.<span class="property">a</span>); <span class="comment">//undefined</span></span><br><span class="line">aaa.<span class="title function_">b</span>(); <span class="comment">//2</span></span><br><span class="line">aaa.<span class="title function_">c</span>(); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>token</title>
      <link href="/2019/11/09/study/node/node-token/"/>
      <url>/2019/11/09/study/node/node-token/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是token"><a href="#什么是token" class="headerlink" title="什么是token"></a>什么是token</h2><p>1、Token的引入：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。<br>2、Token的定义：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。<br>3、使用Token的目的：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p><h2 id="为什么使用token"><a href="#为什么使用token" class="headerlink" title="为什么使用token"></a>为什么使用token</h2><p>http协议的无状态性</p><p>​     无状态是指，当浏览器给服务器发送请求的时候，服务器响应客户端请求。</p><p>​     但是当同一个浏览器再次发送请求给服务器的时候，服务器并不知道他就是刚才的那个浏览器。</p><p>​     可以使用cookie或session保存用户的状态</p><p>session无法跨服务器使用cors跨域以后，cookie也可能会无法使用</p><p>基于上面的三个特点，可以使用token来解决上面的问题</p><h2 id="token格式"><a href="#token格式" class="headerlink" title="token格式"></a>token格式</h2><p>采用三段式的加密字符串   xxxxx.yyyyyy.zzzzzzz<br>第一段数据 : token头信息 不可逆加密第二段数据 ： 要保存的信息进行加密   可逆的第三段 ：  额外信息  不可逆加密后端会将这一个字符串发送给前端，如果有登录操作，就会生成一个token给前端前端就会保存这个token，如果要查看其它的页面，需要判断是否有token信息即可</p><h2 id="token的使用"><a href="#token的使用" class="headerlink" title="token的使用"></a>token的使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">使用jwt</span><br><span class="line">     jsonwebtoken</span><br><span class="line">     专门生成token 和 解析token 的一个第三方插件</span><br><span class="line">使用</span><br><span class="line">     下载 npm i jsonwebtoken</span><br><span class="line">      导入 ： <span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>)</span><br><span class="line"></span><br><span class="line">     生成token</span><br><span class="line">          jwt.<span class="title function_">sign</span>( 要保存的信息对象，口令，参数 )</span><br><span class="line">               口令 ： 加密口令，加密的时候混入信息使用，解密的时候还要这个口令</span><br><span class="line">               参数 : 是一个对象 &#123;&#125;</span><br><span class="line">                    expiresIn ： 过期时间，单位为秒 （<span class="string">&quot;1d&quot;</span>）  1d 表示<span class="number">1</span>天</span><br><span class="line"></span><br><span class="line">     解码： jwt.<span class="title function_">verify</span>(你要解析的token , 口令,回调函数)</span><br><span class="line">          token : 必须是一个指定的token</span><br><span class="line">          口令 ： 必须是加密时候的口令</span><br><span class="line">token判断 ： </span><br><span class="line">判断是否有token</span><br><span class="line">判断是否是无效 invalid token</span><br><span class="line">判断是否是过期 jwt expired</span><br></pre></td></tr></table></figure><h2 id="express-jwt"><a href="#express-jwt" class="headerlink" title="express-jwt"></a>express-jwt</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">express-jwt 是一个express框架和jwt结合的第三方中间件</span><br><span class="line">作用 ： 验证token</span><br><span class="line"></span><br><span class="line">使用 :</span><br><span class="line">下载 npm i express-jwt</span><br><span class="line">导入 <span class="built_in">require</span></span><br><span class="line">注册为中间件</span><br><span class="line">语法格式 : app.<span class="title function_">use</span>( <span class="title function_">expressJWT</span>(&#123;配置&#125;) ).<span class="title function_">unless</span>(&#123;配置&#125;)</span><br><span class="line"></span><br><span class="line">注意 ： 如果要使用express-jwt ， 必须要有一个全局错误中间件</span><br><span class="line"></span><br><span class="line">正常的 token 返给前端 需要写成  <span class="title class_">Bearer</span> token</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册token验证中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123;</span><br><span class="line">  <span class="comment">//解析口令 需要和加密的时候保持一致</span></span><br><span class="line">  secret : <span class="string">&quot;lichune&quot;</span>,</span><br><span class="line">  <span class="comment">//加密方式 SHA256 加密方式在express-jwt 里面叫做 HS256</span></span><br><span class="line">  algorithms : [<span class="string">&quot;HS256&quot;</span>]</span><br><span class="line">&#125;).<span class="title function_">unless</span>(&#123;</span><br><span class="line">  <span class="comment">//不需要验证token 的路径标识（下面的路由不需要进行token验证）</span></span><br><span class="line">  path : [<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/banner&quot;</span>]</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="使用express-jwt-验证token"><a href="#使用express-jwt-验证token" class="headerlink" title="使用express-jwt 验证token"></a>使用express-jwt 验证token</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&quot;express-jwt&quot;</span>)<span class="comment">//验证token的中间件</span></span><br><span class="line"><span class="comment">//注册token验证中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123;</span><br><span class="line">  <span class="comment">//解析口令 需要和加密的时候保持一致</span></span><br><span class="line">  secret : <span class="string">&quot;lichune&quot;</span>,</span><br><span class="line">  <span class="comment">//加密方式 SHA256 加密方式在express-jwt 里面叫做 HS256</span></span><br><span class="line">  algorithms : [<span class="string">&quot;HS256&quot;</span>]</span><br><span class="line">&#125;).<span class="title function_">unless</span>(&#123;</span><br><span class="line">  <span class="comment">//不需要验证token 的路径标识（下面的路由不需要进行token验证）</span></span><br><span class="line">  path : [<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/banner&quot;</span>]</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">express-jwt的使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cookie ： 会话级别 存储在客户端浏览器  不能跨域  cookie只能存放字符串    解决浏览器和服务器通信问题     </span><br><span class="line">session :  会话级别   存储在服务器端  session依赖于cookie  默认不能跨域，如果要实现跨域，需要把sessionid存放到数据库中  session可以存放任意类型数据  解决浏览器和服务器通信问题     </span><br><span class="line"></span><br><span class="line">token ：  令牌 认证授权机制 服务器返回后可以存放在cookie、session、localstorage、sessionstorage中   也可以通过url请求带走   能解决跨域问题   </span><br><span class="line">jwt ： 令牌 认证授权机制  ，目前流行的跨域解决方案 </span><br><span class="line">          可以将信息存放在http的请求头信息的authorization中 ，也解决了跨域问题 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie</title>
      <link href="/2019/11/08/study/node/node-cookie/"/>
      <url>/2019/11/08/study/node/node-cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h2><p>cookie就是会话跟踪技术什么是会话 :     从打开浏览器进入网站到结束浏览关闭浏览器的这样一个过程称为一个会话    会话跟踪 ： 客户端浏览器多次请求服务器时，实现数据共享的技术</p><h2 id="cookie特点"><a href="#cookie特点" class="headerlink" title="cookie特点"></a>cookie特点</h2><p>​    1.cookie保存在浏览器本地，只要不过期关闭浏览器也会存在。</p><p>​    2.正常情况下cookie不加密，用户可轻松看到</p><p>​    3.用户可以删除或者禁用cookie</p><p>​    4.cookie可以被篡改</p><p>​    5.cookie可用于攻击</p><p>​    6.cookie存储量很小，大小一般是4k</p><h2 id="cookie-使用步骤"><a href="#cookie-使用步骤" class="headerlink" title="cookie 使用步骤"></a>cookie 使用步骤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cookie-parser可以设置和获取cookie</span><br><span class="line">1.安装   npm instlal cookie-parser --save</span><br><span class="line">2.引入var cookieParser = require(&#x27;cookie-parser&#x27;);</span><br><span class="line">3.设置中间件</span><br><span class="line"> app.use(cookieParser());</span><br><span class="line">4.设置cookie</span><br><span class="line"> res.cookie(&quot;name&quot;,&#x27;zhangsan&#x27;,&#123;maxAge: 900000, httpOnly: true&#125;);</span><br><span class="line">    第一个参数  cookie的键</span><br><span class="line">    第二个参数  cookie的值</span><br><span class="line">    第三个参数  cookie参数设置</span><br><span class="line"> //HttpOnly 默认false不允许 客户端脚本访问</span><br><span class="line">5.获取cookie</span><br><span class="line"> req.cookies.name</span><br></pre></td></tr></table></figure><h2 id="cookie参数"><a href="#cookie参数" class="headerlink" title="cookie参数"></a>cookie参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">name=value（必选）：键值对，可以设置要保存的 Key/Value，注意这里的 name 不能和其他属性项的名字</span><br><span class="line">一样</span><br><span class="line">expires： 过期时间（秒），在设置的某个时间点后该 Cookie 就会失效，如 expires=Wednesday,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">maxAge： 最大失效时间（毫秒），设置在多少后失效  设置为0删除cookie  </span><br><span class="line">secure： 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效</span><br><span class="line">path： 表示 cookie 影响到的路，如 path=/。如果路径不能匹配时，浏览器则不发送这个 Cookie</span><br><span class="line"></span><br><span class="line">httpOnly：是微软对 COOKIE 做的扩展。如果在 COOKIE 中设置了“httpOnly”属性，则通过程序（JS</span><br><span class="line">脚本、applet 等）将无法读取到 COOKIE 信息，防止 XSS 攻击产生  httpOnly:true</span><br><span class="line"></span><br><span class="line">singed：表示是否签名 cookie, 设为 true 会对这个 cookie 签名，这样就需要用(加密处理)</span><br><span class="line"></span><br><span class="line">res.signedCookies 而不是 res.cookies 访问它。被篡改的签名 cookie 会被服务器拒绝，并且 cookie</span><br><span class="line">值会重置为它的原始值</span><br></pre></td></tr></table></figure><h2 id="cookie加密"><a href="#cookie加密" class="headerlink" title="cookie加密"></a>cookie加密</h2><p>配置中间件app.use(cookieParser(‘随便写’));获取加密的cookie：req.signedCookies;  </p>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Session</title>
      <link href="/2019/11/07/study/node/node-session/"/>
      <url>/2019/11/07/study/node/node-session/</url>
      
        <content type="html"><![CDATA[<h2 id="Session-简单介绍"><a href="#Session-简单介绍" class="headerlink" title="Session 简单介绍"></a>Session 简单介绍</h2><p>session 是另一种记录客户状态的机制，不同的是 Cookie 保存在客户端浏览器中，而 session 保存在服<br>务器上。</p><h2 id="Session-的用途："><a href="#Session-的用途：" class="headerlink" title="Session 的用途："></a>Session 的用途：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session 运行在服务器端，当客户端第一次访问服务器时，可以将客户的登录信息保存。</span><br><span class="line">当客户访问其他页面时，可以判断客户的登录状态，做出提示，相当于登录拦截。</span><br><span class="line">session 可以和 Redis 或者数据库等结合做持久化操作，当服务器挂掉时也不会导致某些客户信息（购物车）丢失。</span><br></pre></td></tr></table></figure><h2 id="Session-的工作流程"><a href="#Session-的工作流程" class="headerlink" title="Session 的工作流程"></a>Session 的工作流程</h2><p>当浏览器访问服务器并发送第一次请求时，服务器端会创建一个 session 对象，生成一个类似于key,value 的键值对，然后将 key(cookie)返回到浏览器(客户)端，浏览器下次再访问时，携带 key(cookie)，找到对应的 session(value)。 客户的信息都保存在 session 中</p><h2 id="express-session-的使用"><a href="#express-session-的使用" class="headerlink" title="express-session 的使用"></a>express-session 的使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装 express-session</span><br><span class="line">npm install express-session --save</span><br><span class="line"><span class="number">2.</span>引入 express-session</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="number">3.</span>设置官方文档提供的中间件</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>,</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="number">4.</span>使用</span><br><span class="line">设置值 req.<span class="property">session</span>.<span class="property">username</span> = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">获取值 req.<span class="property">session</span>.<span class="property">username</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="express-session-的常用参数"><a href="#express-session-的常用参数" class="headerlink" title="express-session 的常用参数:"></a>express-session 的常用参数:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;12345&#x27;</span>,  加密字符串 随便写</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,  生成session 的key名    默认为 connect.<span class="property">sid</span>  可以不设置  </span><br><span class="line">    <span class="attr">cookie</span>: &#123;<span class="attr">maxAge</span>: <span class="number">60</span>*<span class="number">1000</span>&#125;, 根据cookie设置过期时间   session在浏览器中保存的时间</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,  强制保存session 默认为 <span class="literal">true</span>。建议设置成 <span class="literal">false</span></span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>   强制将未初始化的 session 存储 默认为 <span class="literal">true</span>。建议设置成 <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">rolling</span>:<span class="literal">true</span>  在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：<span class="literal">false</span>） 建议设置<span class="literal">true</span></span><br><span class="line">    设置过期时间如果是<span class="number">2</span>分钟，如果在<span class="number">2</span>分钟内一直操作（访问）浏览器页面，最后一个访问结束后的<span class="number">2</span>分钟在让过期</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="Cookie-和-Session-区别"><a href="#Cookie-和-Session-区别" class="headerlink" title="Cookie 和 Session 区别"></a>Cookie 和 Session 区别</h2><p>1、cookie 数据存放在客户的浏览器上，session 数据放在服务器上。<br>2、cookie 不是很安全，别人可以分析存放在本地的 COOKIE 并进行 COOKIE 欺骗<br>考虑到安全应当使用 session。<br>3、session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br>考虑到减轻服务器性能方面，应当使用 COOKIE。<br>4、单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</p>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>multiparty图片上传</title>
      <link href="/2019/11/05/study/node/node-multiparty%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
      <url>/2019/11/05/study/node/node-multiparty%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="multiparty图片上传"><a href="#multiparty图片上传" class="headerlink" title="multiparty图片上传"></a>multiparty图片上传</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//搭建服务器  实现图片的上传</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> multiparty = <span class="built_in">require</span>(<span class="string">&quot;multiparty&quot;</span>) <span class="comment">//也可以用于接收表单post方式提交的数据</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//图片上传</span></span><br><span class="line"><span class="comment">//图片上传  通过post进行表单提交数据 并完成上传图片的功能</span></span><br><span class="line"><span class="comment">//通过 multiparty 第三方中间件完成图片上传  先进行下载</span></span><br><span class="line"><span class="comment">//第一步 ： 设置 form表单的属性 enctype=&quot;multipart/form-data&quot;</span></span><br><span class="line"><span class="comment">//第二步 ： 定义一个post请求方式的路由  完成上传</span></span><br><span class="line"><span class="comment">//第三步 ： 配置上传的虚拟路径 </span></span><br><span class="line"><span class="comment">//第四步 ： 创建 multiparty 上传对象</span></span><br><span class="line"><span class="comment">//第五步 ： 设置上传的路径</span></span><br><span class="line"><span class="comment">//第六步 ： 设置用于解析表单数据的方法  </span></span><br><span class="line"><span class="comment">//定义一个路由渲染页面</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/home&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;upload&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置上传的虚拟路由  当访问到upload路由时，会自动从路由上查找静态资源目录 upload ，最终从upload目录上读取静态资源（图片）</span></span><br><span class="line">app.<span class="title function_">use</span>( <span class="string">&quot;/upload&quot;</span> ,express.<span class="title function_">static</span>(<span class="string">&quot;upload&quot;</span>) )</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/doUpload&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//第四步 ： 创建 multiparty 上传对象</span></span><br><span class="line">    <span class="keyword">let</span> form = <span class="keyword">new</span> multiparty.<span class="title class_">Form</span>();</span><br><span class="line">    <span class="comment">//第五步 ： 设置上传的路径</span></span><br><span class="line">    form.<span class="property">uploadDir</span> = <span class="string">&quot;upload&quot;</span> <span class="comment">//在服务器上创建该目录</span></span><br><span class="line">    <span class="comment">//第六步 ： 设置用于解析表单数据的方法 parse(req,( err,data,fileds )=&gt;&#123;&#125;)</span></span><br><span class="line">    form.<span class="title function_">parse</span>(req,<span class="function">(<span class="params">err,data,fileds</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// data 表示 接收的表单数据（不包括图片信息）</span></span><br><span class="line">        <span class="comment">// console.log(data);</span></span><br><span class="line">        <span class="comment">// files 表示上传的图片信息</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(fileds.<span class="property">pic</span>[<span class="number">0</span>].<span class="property">path</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h2 id="jsonp跨域"><a href="#jsonp跨域" class="headerlink" title="jsonp跨域"></a>jsonp跨域</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">跨域</span><br><span class="line">前端跨域 jsonp 跨域 (json <span class="keyword">with</span> padding)</span><br><span class="line">跨域原理：</span><br><span class="line">    第一步： 创建一个script</span><br><span class="line">    第二步 ： 将动态创建的script添加到body中</span><br><span class="line">    第三步 ： 设置script标签的src属性值  该属性值就是一个接口路径</span><br><span class="line">    第四步 ： 定义一个函数  将该函数通过src属性值接口 将函数传递到服务器上进行调用</span><br><span class="line">    第五步 ： 定义的函数上携带一个参数，该参数用来接收服务器返回的数据</span><br><span class="line"></span><br><span class="line">ajax的接口和jsonp接口区别：</span><br><span class="line"><span class="number">1</span>、jsonp的接口上有一个特殊的参数callback，回调函数  ajax接口没有回调函数</span><br><span class="line"><span class="number">2</span>、jsonp接口的返回值是一个对象  ajax接口返回值是一个字符串</span><br><span class="line"><span class="number">3</span>、jsonp只支持路径传值，get方式   ajax 支持get和post两种方式</span><br><span class="line"></span><br><span class="line">后端跨域   cors跨域</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express</title>
      <link href="/2019/10/25/study/node/node-express%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/10/25/study/node/node-express%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a>express框架</h2><h3 id="1、Express-简单介绍"><a href="#1、Express-简单介绍" class="headerlink" title="1、Express 简单介绍"></a>1、Express 简单介绍</h3><p>Express 是一个基于 Node.js 平台，快速、开放、极简的 web 开发框架<br>Express 框架是后台的 Node 框架，所以和 jQuery、zepto、yui、bootstrap 都不是一个东西。 Express 在后台的受欢迎的程度类似前端的 jQuery，就是企业的事实上的标准。</p><h3 id="2、Express-特点："><a href="#2、Express-特点：" class="headerlink" title="2、Express 特点："></a>2、Express 特点：</h3><ol><li>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一<br>系列强大的特性，帮助你创建各种 Web 和移动设备应用。</li><li>丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好<br>的 API 变得既快速又简单</li><li>Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web<br>应用所需的基本功能。<br>Express 官网：<br>英语官网：<a href="http://expressjs.com/">http://expressjs.com/</a><br>中文官网：<a href="http://www.expressjs.com.cn/">http://www.expressjs.com.cn/</a></li></ol><h2 id="express使用"><a href="#express使用" class="headerlink" title="express使用"></a>express使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">导入模块</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line">创建应用</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">发起请求</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/list/:id&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;get请求成功&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/user/list&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">id</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;get请求成功&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">监听端口号</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">使用node启动该文件之后在浏览器页面输入 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span> 即可</span><br></pre></td></tr></table></figure><h2 id="动态路由和get传值参数获取"><a href="#动态路由和get传值参数获取" class="headerlink" title="动态路由和get传值参数获取"></a>动态路由和get传值参数获取</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="property">query</span> 获取get传值</span><br><span class="line"></span><br><span class="line">req.<span class="property">params</span> 获取动态路由的传值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">动态路由和get传值</span><br><span class="line"></span><br><span class="line">配置动态路由  比如运行<span class="attr">http</span>:<span class="comment">//localhost:8000/news/3467  页面得到3467</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/news/:aid&quot;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//req.param 获取动态路由的传值</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> aid = req.<span class="property">params</span>.<span class="property">aid</span>;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;news模板，aid=&quot;</span>+aid);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get传值  <span class="attr">http</span>:<span class="comment">//localhost:8000/news?aid=999</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/product&quot;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问路径 http://localhost:8000/product?aid=88&amp;cid=99</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//req.query 获取get传值</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;product:&quot;</span>+req.<span class="property">query</span>.<span class="property">aid</span>+<span class="string">&quot;---&quot;</span>+req.<span class="property">query</span>.<span class="property">cid</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由的模块化"><a href="#路由的模块化" class="headerlink" title="路由的模块化"></a>路由的模块化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">为了方便对路由进行模块化的管理，Express 不建议将路由直接挂载到 app 上，而是推荐将路由抽离为单独的模块。</span><br><span class="line">将路由抽离为单独模块的步骤如下：</span><br><span class="line">     创建路由模块对应的 xxx.js 文件 建议router.js</span><br><span class="line">     导入express模块 express()</span><br><span class="line">     调用 express.Router() 函数创建路由对象</span><br><span class="line">     向路由对象上挂载具体的路由 </span><br><span class="line">     使用 module.exports 向外共享路由对象</span><br><span class="line">     </span><br><span class="line">     创建应用程序文件模块app.js</span><br><span class="line">     导入express模块并创建对象</span><br><span class="line">     导入上面的路由模块 router.js</span><br><span class="line">     使用 app.use(&quot;路由根路径&quot;,自定义路由模块名称) 函数注册路由模块</span><br></pre></td></tr></table></figure><h2 id="请求接口并解决跨域问题"><a href="#请求接口并解决跨域问题" class="headerlink" title="请求接口并解决跨域问题"></a>请求接口并解决跨域问题</h2><p>首先安装cors模块，然后导入</p><p>一定要在路由之前，配置 cors 这个中间件，从而解决接口跨域的问题</p><p>const cors = require(‘cors’)</p><p>app.use(cors())</p><h2 id="总结express-req请求对象常用属性和方法"><a href="#总结express-req请求对象常用属性和方法" class="headerlink" title="总结express req请求对象常用属性和方法"></a>总结express req请求对象常用属性和方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">req.params</span><br><span class="line">一个数组，包含命名过的路由参数。</span><br><span class="line"></span><br><span class="line">req.param(name)</span><br><span class="line">返回命名的路由参数，或者 GET 请求或 POST 请求参数。建议你忽略此方法。</span><br><span class="line"></span><br><span class="line">req.query</span><br><span class="line">一个对象，包含以键值对存放的查询字符串参数（通常称为 GET 请求参数） 。</span><br><span class="line"></span><br><span class="line">req.body</span><br><span class="line">一个对象，包含 POST 请求参数。这样命名是因为 POST 请求参数在 REQUEST 正文中传递，而不像查询字符串在 URL 中传递。要使 req.body 可用，需要中间件能够解析请求正文内容类型。</span><br><span class="line"></span><br><span class="line">req.route</span><br><span class="line">关于当前匹配路由的信息。主要用于路由调试。</span><br><span class="line"></span><br><span class="line">req.cookies/req.singnedCookies</span><br><span class="line">一个对象，包含从客户端传递过来的 cookies 值。</span><br><span class="line"></span><br><span class="line">req.headers</span><br><span class="line">从客户端接收到的请求报头。</span><br><span class="line"></span><br><span class="line">req.accepts([types])</span><br><span class="line">一个简便的方法，用来确定客户端是否接受一个或一组指定的类型（可选类型可以是单个的 MIME 类型，如application/json 、一个逗号分隔集合或是一个数组） 。写公共API 的人对该方法很感兴趣。假定浏览器默认始终接受 HTML。</span><br><span class="line"></span><br><span class="line">req.ip</span><br><span class="line">客户端的 IP 地址。</span><br><span class="line"></span><br><span class="line">req.path</span><br><span class="line">请求路径（不包含协议、主机、端口或查询字符串） 。</span><br><span class="line"></span><br><span class="line">req.host</span><br><span class="line">一个简便的方法，用来返回客户端所报告的主机名。这些信息可以伪造，所以不应该用于安全目的。</span><br><span class="line"></span><br><span class="line">req.xhr</span><br><span class="line">一个简便属性，如果请求由 Ajax 发起将会返回 true 。</span><br><span class="line"></span><br><span class="line">req.protocol</span><br><span class="line">用于标识请求的协议（ http 或 https ） 。</span><br><span class="line"></span><br><span class="line">req.secure</span><br><span class="line">一个简便属性，如果连接是安全的，将返回 true 。等同于req.protocol===’https’ 。</span><br><span class="line"></span><br><span class="line">req.url</span><br><span class="line">获取请求路径</span><br></pre></td></tr></table></figure><h2 id="总结response对象常见的方法"><a href="#总结response对象常见的方法" class="headerlink" title="总结response对象常见的方法"></a>总结response对象常见的方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- res.append()：追加指定HTTP头</span><br><span class="line">- res.set()在res.append()后将重置之前设置的头</span><br><span class="line">- res.cookie(name，value [，option])：设置Cookie</span><br><span class="line">- opition: domain / expires / httpOnly / maxAge / path / secure / signed</span><br><span class="line">- res.clearCookie()：清除Cookie</span><br><span class="line">- res.download()：传送指定路径的文件</span><br><span class="line">- res.get()：返回指定的HTTP头</span><br><span class="line">- res.json()：传送JSON响应</span><br><span class="line">- res.jsonp()：传送JSONP响应</span><br><span class="line">- res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</span><br><span class="line">- res.redirect()：设置响应的Location HTTP头，并且设置状态码302</span><br><span class="line">- res.send()：传送HTTP响应  res.render()渲染ejs模板引擎</span><br><span class="line">- res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</span><br><span class="line">- res.set()：设置HTTP头，传入object可以一次设置多个头</span><br><span class="line">- res.status()：设置HTTP状态码</span><br><span class="line">- res.type()：设置Content-Type的MIME类型</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在两个事情（req和res）中间 ，加入一些内容 ，加入的这个内容，可以做一些事情，可以选择走下一条路，使用参数<span class="title function_">next</span>()方法，根据中间件加入的位置不同，叫做不同的中间件</span><br><span class="line">中间件的种类：</span><br><span class="line">全局中间件 app.<span class="title function_">use</span>()</span><br><span class="line">     所有请求都要经历的，是直接挂载在app上的中间件</span><br><span class="line">路由级中间件 app.<span class="property">get</span>/<span class="title function_">post</span>()</span><br><span class="line">     在进入路由表，到匹配对应请求标识符之间添加的中间件</span><br><span class="line">     只对当前这个路由表生效</span><br><span class="line">路由应用级中间件 app.<span class="title function_">use</span>()</span><br><span class="line">     书写在路由表中</span><br><span class="line">     在匹配到指定路径标识符以后的事件处理函数</span><br><span class="line">     只对匹配到的路由标识符生效</span><br><span class="line">全局错误处理中间件 app.<span class="title function_">use</span>()</span><br><span class="line">     一般书写在服务器的最后面，返回最终的结果 接受参数 err  req res  next</span><br><span class="line">第三方中间件 </span><br><span class="line">     需要下载后使用的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm简介</title>
      <link href="/2019/10/15/study/node/node-http/"/>
      <url>/2019/10/15/study/node/node-http/</url>
      
        <content type="html"><![CDATA[<h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><h3 id="什么是http协议"><a href="#什么是http协议" class="headerlink" title="什么是http协议"></a>什么是http协议</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">HTTP</span>协议是<span class="title class_">Hyper</span> <span class="title class_">Text</span> <span class="title class_">Transfer</span> <span class="title class_">Protocol</span>(超文本传输协议)的缩写,是用于从万维网(<span class="attr">WWW</span>:<span class="title class_">World</span> <span class="title class_">Wide</span> <span class="title class_">Web</span> )服务器传输超文本到本地浏览器的传送协议。 <span class="variable constant_">HTTP</span>是一个基于<span class="variable constant_">TCP</span>/<span class="variable constant_">IP</span>通信协议来传递数据(<span class="variable constant_">HTML</span> 文件, 图片文件, 查询结果等)</span><br><span class="line"></span><br><span class="line">一个<span class="variable constant_">HTTP</span>请求由请求行（request line）、请求头部（header）、空行和请求数据<span class="number">4</span>个部分组成</span><br><span class="line">请求行 ： 请求方式  请求协议</span><br><span class="line">请求头：是客户端发送给服务器端的一些信息 cookie或session等</span><br><span class="line">请求数据 ： post请求时发送的一些数据</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">HTTP</span>协议的请求方法有<span class="variable constant_">GET</span>、<span class="variable constant_">POST</span>、<span class="variable constant_">HEAD</span>、<span class="variable constant_">PUT</span>、<span class="variable constant_">DELETE</span>、<span class="variable constant_">OPTIONS</span>、<span class="variable constant_">TRACE</span>、<span class="variable constant_">CONNECT</span></span><br><span class="line"></span><br><span class="line">http响应的结果由 相应行、响应头、空行、响应体四个部分组成</span><br><span class="line">相应行： 协议 状态码信息   状态码：1xx   ---- 5xx</span><br><span class="line">响应头 : cookie信息的写入、响应的地址、文件类型等</span><br><span class="line">响应体 ：  响应体是服务器回写给客户端的页面正文，浏览器将正文加载到内存，然后解析渲染，显示页面内容</span><br></pre></td></tr></table></figure><h3 id="什么是客户端、什么是服务器？"><a href="#什么是客户端、什么是服务器？" class="headerlink" title="什么是客户端、什么是服务器？"></a>什么是客户端、什么是服务器？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在网络节点中，负责消费资源的电脑，叫做客户端，任何一台电脑都可以成为客户端；</span><br><span class="line">负责对外提供网络资源的电脑，叫做服务器，任何电脑都可以成为服务器。</span><br><span class="line"></span><br><span class="line">服务器和普通电脑的区别在于，服务器上安装了 web 服务器软件，例如：IIS、Apache 等。通过安装这些服务器软件，就能把一台普通的电脑变成一台 web 服务器。</span><br><span class="line"></span><br><span class="line">http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。</span><br><span class="line"></span><br><span class="line">通过 http 模块提供的 http.createServer() 方法，就能方便的把一台普通的电脑，变成一台 Web 服务器，从而对外提供 Web 资源服务。</span><br><span class="line"></span><br><span class="line">在 Node.js 中，我们不需要使用 IIS、Apache 等这些第三方 web 服务器软件。</span><br><span class="line">因为我们可以基于 Node.js 提供的 http 模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供 web 服务。</span><br><span class="line"></span><br><span class="line">如果要希望使用 http 模块创建 Web 服务器，则需要先导入它： require(&quot;http&quot;)</span><br></pre></td></tr></table></figure><h2 id="创建web服务器的基本步骤"><a href="#创建web服务器的基本步骤" class="headerlink" title="创建web服务器的基本步骤"></a>创建web服务器的基本步骤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">导入 http 模块</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"></span><br><span class="line">创建 web 服务器实例</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServe</span>()</span><br><span class="line"></span><br><span class="line">为服务器实例绑定 request 事件，监听客户端的请求</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">     只要有客户端请求自己的服务器，就会触发request事件   从而调用这个事件处理函数</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">启动服务器   设置端口号</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="安装第三方模块-，-自动监听node服务器的变化"><a href="#安装第三方模块-，-自动监听node服务器的变化" class="headerlink" title="安装第三方模块 ， 自动监听node服务器的变化"></a>安装第三方模块 ， 自动监听node服务器的变化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nodemon 或 supervisor  第三方模块</span><br><span class="line">下载模块</span><br><span class="line"></span><br><span class="line">npm i nodemon -g  全局安装</span><br><span class="line"></span><br><span class="line">启动服务器 ： nodemon 服务文件名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-querystring</title>
      <link href="/2019/10/13/study/node/node-querystring/"/>
      <url>/2019/10/13/study/node/node-querystring/</url>
      
        <content type="html"><![CDATA[<h2 id="querystring模块"><a href="#querystring模块" class="headerlink" title="querystring模块"></a>querystring模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">querystring.escape( &quot;&quot; );对给定的 str 进行 URL 编码</span></span><br><span class="line"><span class="comment">querystring.unescape( &quot;&quot; );对给定的 str 进行解码</span></span><br><span class="line"><span class="comment">querystring.stringify()   方法  将一个对象转成字符串</span></span><br><span class="line"><span class="comment">querystring.parse()  方法  将一个字符串转成对象  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;http://www.baidu.com:8000?username=admin&amp;pwd=123&quot;</span></span><br><span class="line"><span class="comment">//escape() 对某个字符串进行编码操作 </span></span><br><span class="line"><span class="keyword">let</span> res = qs.<span class="built_in">escape</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">//unescape() 对编码后的信息进行解码操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( qs.<span class="built_in">unescape</span>( res )  );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonObj = &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonObj) );</span><br><span class="line"><span class="comment">//qs.stringify 将一个对象解析成字符串 该字符串以路径参数的格式显示</span></span><br><span class="line"><span class="keyword">let</span> res =  qs.<span class="title function_">stringify</span>( jsonObj )</span><br><span class="line"><span class="comment">//将字符串解析成对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( qs.<span class="title function_">parse</span>( res ) );</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-url</title>
      <link href="/2019/10/08/study/node/node-url/"/>
      <url>/2019/10/08/study/node/node-url/</url>
      
        <content type="html"><![CDATA[<h2 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用 url.parse()方法将路径解析为一个方便操作的对象。</span></span><br><span class="line"><span class="comment">第二个参数为 true 表示直接将查询字符串转为一个对象（通过query属性来访问），默认第二个参数为false。</span></span><br><span class="line"><span class="comment">语法格式 ： </span></span><br><span class="line"><span class="comment">url.parse(str,true) 解析 URL    第二个参数true可以将url.parse 结果query值变成一个对象</span></span><br><span class="line"><span class="comment">url.format(urlObject)   是上面 url.parse() 操作的逆向操作  方法返回从 urlObject 派生的格式化网址字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">url.resolve(str1,str2) 该方法可以添加或者替换地址</span></span><br><span class="line"><span class="comment">当第一个参数端口后面没有路径时  将后面的路径添加到第一个路径后面 </span></span><br><span class="line"><span class="comment">var str = url.resolve( &quot;http://www.baidu.com&quot;;,&quot;a&quot; );</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当第一个参数端口后面有路径时，会将最后一个/后面的 路径替换</span></span><br><span class="line"><span class="comment">var str = url.resolve( &quot;http://www.baidu.com/b&quot;;,&quot;a&quot; );</span></span><br><span class="line"><span class="comment">var str = url.resolve( &quot;http://www.baidu.com/b/c&quot;,&quot;a&quot; );</span></span><br><span class="line"><span class="comment">var str = url.resolve( &quot;http://www.baidu.com/b/c/d&quot;,&quot;a&quot; );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;http://www.baidu.com:8000?username=admin&amp;pwd=123&quot;</span></span><br><span class="line"><span class="comment">//url.parse()  解析文件路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( url.<span class="title function_">parse</span>( str,<span class="literal">true</span> ).<span class="property">query</span>.<span class="property">username</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//url.format()  将对象解析成字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( url.<span class="title function_">format</span>(url.<span class="title function_">parse</span>( str,<span class="literal">true</span> )) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//url.resolve() 添加或替换路径</span></span><br><span class="line"><span class="comment">//当第一个参数路径端口后面没有其它的路径信息，会将第二个参数直接添加到第一个参数路径后面</span></span><br><span class="line"><span class="keyword">let</span> res = url.<span class="title function_">resolve</span>(<span class="string">&quot;http://www.baidu.com:8000&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( res );</span><br><span class="line"></span><br><span class="line"><span class="comment">//当第一个参数端口后面后路径信息，实现替换功能  第二个参数将第一个参数的结尾路径替换</span></span><br><span class="line"><span class="keyword">let</span> res = url.<span class="title function_">resolve</span>(<span class="string">&quot;http://www.baidu.com:8000/b/c/d&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-path</title>
      <link href="/2019/10/05/study/node/node-path/"/>
      <url>/2019/10/05/study/node/node-path/</url>
      
        <content type="html"><![CDATA[<h2 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> path 模块是 <span class="title class_">Node</span>.<span class="property">js</span> 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。</span><br><span class="line">例如：</span><br><span class="line">path.<span class="title function_">join</span>() 方法，用来将多个路径片段拼接成一个完整的路径字符串</span><br><span class="line">使用 path.<span class="title function_">join</span>() 方法，可以把多个路径片段拼接为完整的路径字符串，语法格式如下： path.<span class="title function_">join</span>([...paths])</span><br><span class="line"></span><br><span class="line">../表示会删除前面的一个路径</span><br><span class="line"><span class="keyword">const</span> str = path.<span class="title function_">join</span>(<span class="string">&quot;/a&quot;</span>,<span class="string">&#x27;/b/c&#x27;</span>,<span class="string">&#x27;../&#x27;</span>,<span class="string">&#x27;./d&#x27;</span>,<span class="string">&#x27;../&#x27;</span>,<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> str = path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./css/3.txt&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line">path.<span class="title function_">basename</span>() 方法，用来从路径字符串中，将文件名解析出来</span><br><span class="line">使用 path.<span class="title function_">basename</span>() 方法，可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名</span><br><span class="line"></span><br><span class="line">path.<span class="title function_">extname</span>()使用 path.<span class="title function_">extname</span>() 方法，可以获取路径中的扩展名部分</span><br></pre></td></tr></table></figure><h2 id="path配合fs模块"><a href="#path配合fs模块" class="headerlink" title="path配合fs模块"></a>path配合fs模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入path模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//path.join() 将多个路径信息进行拼接  形成一个新路径</span></span><br><span class="line"><span class="keyword">let</span> newPath = path.<span class="title function_">join</span>(<span class="string">&quot;/a&quot;</span>,<span class="string">&quot;b/c&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( newPath );</span><br><span class="line"></span><br><span class="line"><span class="comment">//join方法参数可以有多个</span></span><br><span class="line"><span class="keyword">let</span> str = path.<span class="title function_">join</span>(<span class="string">&quot;/a&quot;</span>,<span class="string">&quot;/b/c&quot;</span>,<span class="string">&quot;./f&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//join参数中 ../ 表示会回退到上一级目录</span></span><br><span class="line"><span class="keyword">let</span> str = path.<span class="title function_">join</span>(<span class="string">&quot;/a&quot;</span>,<span class="string">&quot;/b/c&quot;</span>,<span class="string">&quot;../d&quot;</span>,<span class="string">&quot;./f&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前文件所处的项目根路径  C:\Users\lce\Desktop\rg2109\day02</span></span><br><span class="line"><span class="comment">// console.log(__dirname);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用join方法拼接操作的文件的路径</span></span><br><span class="line"><span class="keyword">let</span> pathname = path.<span class="title function_">join</span>( __dirname , <span class="string">&quot;demo/index.html&quot;</span> )</span><br><span class="line"><span class="comment">//根据上面的文件路径读取信息</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(pathname,<span class="string">&quot;utf-8&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取路径文件名称  basename()</span></span><br><span class="line"><span class="keyword">let</span> pathname = path.<span class="title function_">join</span>( __dirname , <span class="string">&quot;demo/index.html&quot;</span> )</span><br><span class="line"><span class="keyword">let</span> filename = path.<span class="title function_">basename</span>( pathname )</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件的扩展名  extname()</span></span><br><span class="line"><span class="keyword">let</span> pathname = path.<span class="title function_">join</span>( __dirname , <span class="string">&quot;demo/index.html&quot;</span> )</span><br><span class="line"><span class="keyword">let</span> extname = path.<span class="title function_">extname</span>(pathname)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( extname );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习 ： 打印demo目录下的所有目录</span></span><br></pre></td></tr></table></figure><h2 id="dirname"><a href="#dirname" class="headerlink" title="__dirname"></a>__dirname</h2><p>__dirname 表示当前文件所处的目录</p>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-fs模块</title>
      <link href="/2019/09/28/study/node/node-fs/"/>
      <url>/2019/09/28/study/node/node-fs/</url>
      
        <content type="html"><![CDATA[<h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">得到文件与目录的信息：stat （判断是文件还是目录的方法）</span></span><br><span class="line"><span class="comment">statSync()方法用于同步返回有关给定文件路径的信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">创建一个目录：mkdir</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">创建文件并写入内容：writeFile ,appendFile  ，  writeFileSync</span></span><br><span class="line"><span class="comment">参数解读：</span></span><br><span class="line"><span class="comment">参数1：必选参数，需要指定一个文件路径的字符串，表示文件的存放路径。</span></span><br><span class="line"><span class="comment">参数2：必选参数，表示要写入的内容。</span></span><br><span class="line"><span class="comment">参数3：可选参数，表示以什么格式写入文件内容，默认值是 utf8。</span></span><br><span class="line"><span class="comment">参数4：必选参数，文件写入完成后的回调函数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">读取文件的内容：readFile readFileSync</span></span><br><span class="line"><span class="comment">参数解读：</span></span><br><span class="line"><span class="comment">参数1：必选参数，字符串，表示文件的路径。</span></span><br><span class="line"><span class="comment">参数2：可选参数，表示以什么编码格式来读取文件。</span></span><br><span class="line"><span class="comment">参数3：必选参数，文件读取完成后，通过回调函数拿到读取的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">列出目录的东西：readdir  返回值是一个数组</span></span><br><span class="line"><span class="comment">重命名目录或文件：rename</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">删除目录与文件：rmdir(要求要删除的目录是空目录),unlink</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">existsSync（）以同步的方法检测目录是否存在。</span></span><br><span class="line"><span class="comment">如果目录存在 返回 true ，如果目录不存在 返回false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>) <span class="comment">//fs模块导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stat 判断是否是文件还是目录</span></span><br><span class="line"><span class="comment">//statSync  同步操作 判断是否是文件还是目录</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&quot;html&quot;</span>,<span class="function">(<span class="params">err,stats</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//当路径不存在  返回一个err对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( err )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;路径不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//isFile() 判断是否是文件</span></span><br><span class="line">    <span class="comment">//isDirectory() 判断是否是目录</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( stats.<span class="title function_">isFile</span>() ); <span class="comment">// false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( stats.<span class="title function_">isDirectory</span>() );<span class="comment">// true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件的读操作  readFile()  readFileSync()</span></span><br><span class="line"><span class="comment">//readFile()  参数一： 路径   参数二 : 文件的编码 &quot;utf-8&quot;  第三个参数 ： 回调</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;utf-8&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( err )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;路径不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;2.txt&quot;</span>,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件的写操作 writeFile()   appendFile()  writeFileSync()</span></span><br><span class="line"><span class="comment">//writeFile()： 参数一：路径  参数二 : 要写入的信息   参数三 : 编码格式  参数四  :回调</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;3.txt&quot;</span>,<span class="string">&quot;第二次向文件中写入的信息&quot;</span>,<span class="string">&quot;utf-8&quot;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( err )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;路径不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入信息成功&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//追加内容</span></span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&quot;3.txt&quot;</span>,<span class="string">&quot;第二次向文件中写入的信息&quot;</span>,<span class="string">&quot;utf-8&quot;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( err )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;路径不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入信息成功&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取目录信息  返回值是一个数组</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&quot;demo&quot;</span>,<span class="function">(<span class="params">err,files</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( err )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;路径不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建目录  mkdir  </span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;test&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;目录创建成功&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//删除目录 rmdir    保证目录是空目录 </span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&quot;test&quot;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( err )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;路径不存在&quot;</span>,err.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除文件 unlink</span></span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&quot;2.txt&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对文件或目录重命名  rename</span></span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&quot;3.txt&quot;</span>,<span class="string">&quot;index.txt&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;demo.txt&quot;</span>,<span class="string">&quot;utf-8&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( err )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;路径不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将得到的数据通过空格进行拆分  得到一个数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = data.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="comment">//定义一个存储新数据的数组</span></span><br><span class="line">    <span class="keyword">let</span> newArr = []</span><br><span class="line">    <span class="comment">//遍历数组 得到数组中每一条信息，并将=替换成 : 使用replace方法进行替换 </span></span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>( item.<span class="title function_">replace</span>(<span class="string">&quot;=&quot;</span>,<span class="string">&quot;:&quot;</span>) )</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//将数组转成字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = newArr.<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="comment">//将得到的新的字符串写入到一个新文件中</span></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(<span class="string">&quot;score.txt&quot;</span>,str , <span class="string">&quot;utf-8&quot;</span> , <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件写入成功&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm简介</title>
      <link href="/2019/09/24/study/node/npm%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/24/study/node/npm%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是npm"><a href="#什么是npm" class="headerlink" title="什么是npm"></a>什么是npm</h2><p><strong>npm是一个node的包管理仓库  ，也是一个网站  ，还是一条命令</strong></p><p>nodejs中的第三方模块就叫做 包</p><p>不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。</p><p>注意：Node.js 中的包都是免费且开源的，不需要付费即可免费下载使用。</p><h2 id="npm命令"><a href="#npm命令" class="headerlink" title="npm命令"></a>npm命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> https://www.npmjs.com/</span><br><span class="line"></span><br><span class="line">将node项目变成一个包   npm init   要求 包 名称必须是全网唯一</span><br><span class="line"></span><br><span class="line">下载线上的node包   npm install 包名称</span><br><span class="line"></span><br><span class="line">卸载node包  npm uninstall 包名称</span><br><span class="line"></span><br><span class="line">安装指定版本的包  npm i 包名  @版本号</span><br><span class="line"></span><br><span class="line">更新全局包 npm update 包名称 -g</span><br><span class="line"></span><br><span class="line">更新生产环境依赖包  npm update 包名称 --save</span><br><span class="line"></span><br><span class="line">更新开发环境依赖包  npm update 包名称 --save-dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装淘宝镜像 ：  npm install -g cnpm --registry=https://registry.npm.taobao.org (了解)</span><br><span class="line"></span><br><span class="line">然后将npm 改成 cnpm 即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看当前的下包镜像源</span><br><span class="line"></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line">将下包的镜像源切换为淘宝的镜像源  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">registry= npm config set  [https://registry.npm.taobao.org](https://registry.npm.taobao.org/)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">检查镜像源是否下载成功 </span><br><span class="line"></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以全局安装nrm   npm i nrm -g</span><br><span class="line"></span><br><span class="line">切换镜像源  nrm ls</span><br><span class="line"></span><br><span class="line">使用某个镜像源  nrm use 镜像源名称</span><br></pre></td></tr></table></figure><h2 id="dependencies-与-devDependencies-之间的区别"><a href="#dependencies-与-devDependencies-之间的区别" class="headerlink" title="dependencies 与 devDependencies 之间的区别?"></a>dependencies 与 devDependencies 之间的区别?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencie 配置当前程序所依赖的其他包。   线上模式所依赖的包管理（生产模式） npm i xxx -S(--save或省略)</span><br><span class="line"></span><br><span class="line">devDependencie 配置当前程序所依赖的其他包，只会下载模块，而不下载这些模块的 测试和文档框架    开发模式所依赖的包   npm i xxx -D(--save-dev)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到 devDependencies 节点中。 与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 dependencies 节点中。</span><br></pre></td></tr></table></figure><h2 id="npm初次操作后的特点"><a href="#npm初次操作后的特点" class="headerlink" title="npm初次操作后的特点"></a>npm初次操作后的特点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> 初次装包完成后，在项目文件夹下多一个叫做 **node_modules** 的文件夹和 **package-lock.json** 、**package.json**的配置文件。</span><br><span class="line"></span><br><span class="line">注意： 不要手动修改 node_modules 或 package-lock.json 文件中的任何代码，npm 包管理工具会自动维护它们。</span><br><span class="line"></span><br><span class="line">npm 规定，在项目根目录中，必须提供一个叫做 package.json 的包管理配置文件。用来记录与项目有关的一些配置信息。</span><br><span class="line"></span><br><span class="line">例如： 项目的名称、版本号、描述等 项目中都用到了哪些包 哪些包只在开发期间会用到 那些包在开发和部署时都需要用到</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在项目根目录中，创建一个叫做 package.json 的配置文件，即可用来记录项目中安装了哪些包。从而方便剔除 node_modules 目录之后，在团队成员之间共享项目的源代码。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">npm 包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建 package.json 这个包管理配置文件： 命令 ： npm init -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上述命令只能在英文的目录下成功运行！所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。</span><br><span class="line"></span><br><span class="line">运行 npm install 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中。</span><br></pre></td></tr></table></figure><h2 id="Yarn的入门使用"><a href="#Yarn的入门使用" class="headerlink" title="Yarn的入门使用"></a>Yarn的入门使用</h2><p><a href="https://yarn.bootcss.com/">https://yarn.bootcss.com</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Yarn是一种命令   就是对npm命令的包装   </span><br><span class="line"></span><br><span class="line">安装命令 ： npm install yarn -g</span><br><span class="line"></span><br><span class="line">yarn的使用 ： </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> yarn add cheerio   下载第三方插件包 等价 npm install xxx  自带了--save的特性</span><br><span class="line"></span><br><span class="line">       npm install cheerio --save   ====  yarn add cheerio</span><br><span class="line"></span><br><span class="line">       npm install cheerio --save-dev ==  yarn add cheerio --dev</span><br><span class="line"></span><br><span class="line"> yarn install   ====  npm  install   批量安装package.json中的所有插件</span><br><span class="line"></span><br><span class="line"> yarn update cheerio  更新一个依赖包</span><br><span class="line"></span><br><span class="line"> yarn remove cheerio  删除一个依赖包</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node简介</title>
      <link href="/2019/09/21/study/node/node%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/09/21/study/node/node%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="node安装"><a href="#node安装" class="headerlink" title="node安装"></a>node安装</h2><p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a>    // 可在官网选择安装</p><p>LTS       长期使用的版本    </p><p>current    最新版本  </p><p>了解 nodejs版本号 ：         大版本号     小版本号     补丁版本号 </p><p>​                                              奇数版本      不稳定版本     用于测试版本</p><p>​                                              偶数版本      稳定版本   </p><h2 id="什么是NodeJS"><a href="#什么是NodeJS" class="headerlink" title="什么是NodeJS"></a>什么是NodeJS</h2><p><strong>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境</strong>。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</p><p>JavaScript有ECMAScript  BOM  DOM组成</p><p>node.js 由  ECMAScript  和 Node模块API  组成</p><p>Node.js 的包管理器 npm，成为世界上最大的开放源代码的生态系统。</p><p>nodejs是javascript的运行环境，浏览器也是javascript的运行环境，两者有什么区别？？</p><p>node是js的后端运行环境</p><p>浏览器是js的前端运行环境</p><p>浏览器的运行环境  有安全机制的   不能调用底层的接口文件   不能实现创建文件或目录等    浏览器中可以识别dom和bom对象   </p><p>使用nodejs 可以调用底层接口文件  也可以创建文件或目录等       node环境中没有bom和dom的概念</p><h2 id="node的特点"><a href="#node的特点" class="headerlink" title="node的特点"></a>node的特点</h2><p>1、nodejs可以处理高并发项目</p><p>2、node可以创建一个服务器  是一门后端语言   </p><p>3、用node可以调用很底层的接口  node可以写桌面的应用程序</p><h2 id="nodejs的模块化-nodejs-cn"><a href="#nodejs的模块化-nodejs-cn" class="headerlink" title="nodejs的模块化    nodejs.cn"></a>nodejs的模块化    nodejs.cn</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">了解 ：什么是commonJs?    </span><br><span class="line"></span><br><span class="line">JavaScript 是一个强大面向对象语言，它有很多快速高效的解释器。然而， JavaScript 标准定义的 API 是为了构建基于浏览器的应用程序。并没有制定一个用于更广泛的应用程序 的标准库。CommonJS 规范的提出,主要是为了弥补当前 JavaScript 没有标准的缺陷。</span><br><span class="line"></span><br><span class="line">它的终 极目标就是：提供一个类似 Python，Ruby 和 Java 语言的标准库,而不只是停留在小脚本程序 的阶段。</span><br><span class="line"></span><br><span class="line">用 CommonJS API 编写出的应用，不仅可以利用 JavaScript 开发客户端应用，而且 还可以编写以下应用。</span><br><span class="line"></span><br><span class="line"> 服务器端 JavaScript 应用程序。（nodejs）    •命令行工具。     •桌面图形界面应用程序。</span><br><span class="line"></span><br><span class="line"> CommonJS 就是模块化的标准（规范），nodejs 就是 CommonJS（模块化）的实现。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nodejs的模块化的规范是 ： commonJs规范 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">模块化的好处 ：提高代码的复用性  可维护性 </span><br><span class="line"></span><br><span class="line">                         功能独立 便于后期管理和维护</span><br><span class="line"></span><br><span class="line">                         防止全局变量的污染（浏览器中没有模块作用域的概念）</span><br><span class="line"></span><br><span class="line">                         可以实现按需加载</span><br></pre></td></tr></table></figure><h2 id="nodejs模块的种类"><a href="#nodejs模块的种类" class="headerlink" title="nodejs模块的种类"></a>nodejs模块的种类</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">核心模块 （官方文档 左侧的都是核心模块-内置模块） ：  使用<span class="keyword">var</span> http =  <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)   直接通过<span class="built_in">require</span>方法导入核心模块</span><br><span class="line"></span><br><span class="line">     http  querystring   fs   url  events</span><br><span class="line"></span><br><span class="line">第三方模块 :  </span><br><span class="line"></span><br><span class="line">    使用第三方模块之前 先进行  安装 ，  yarn add 模块   或  npm i  模块  --save</span><br><span class="line"></span><br><span class="line">    安装好第三方模块后，通过  <span class="built_in">require</span>()方法导入该模块</span><br><span class="line"></span><br><span class="line">自定义模块（文件模块）   使用<span class="built_in">exports</span> 或 <span class="variable language_">module</span>.<span class="property">exports</span> 进行模块的暴露   </span><br><span class="line"></span><br><span class="line">自定义模块 ： 自定义xxx.<span class="property">js</span>文件</span><br><span class="line"></span><br><span class="line">自定义模块的使用 ：<span class="built_in">require</span>() </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">模块的加载 ： </span><br><span class="line"></span><br><span class="line">核心模块和第三方模块一致</span><br><span class="line"></span><br><span class="line">自定义模块需要提供自定义  .<span class="property">js</span>的后缀名可以省略</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型、原型链</title>
      <link href="/2019/09/10/study/js/js%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2019/09/10/study/js/js%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript原型，原型链"><a href="#JavaScript原型，原型链" class="headerlink" title="JavaScript原型，原型链 ?"></a>JavaScript原型，原型链 ?</h2><ul><li>每个对象都会在其内部初始化一个属性，就是<code>__proto__</code>，当我们访问一个对象的属性时</li><li>如果这个对象内部不存在这个属性，那么他就会去<code>__proto__</code>里找这个属性，这个<code>__proto__</code>又会有自己的<code>__proto__</code>，于是就这样一直找下去，也就是我们平时所说的原型链的概念。按照标准，<code>__proto__</code> 是不对外公开的，也就是说是个私有属性</li><li>关系：<code>instance.constructor.prototype == instance.__proto__</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg.</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;</span><br><span class="line"></span><br><span class="line">a.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> == a.<span class="property">__proto__</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li>特点：<ul><li><code>JavaScript</code>对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变</li></ul></li><li>当我们需要一个属性的时，<code>Javascript</code>引擎会先看当前对象中是否有这个属性， 如果没有的</li><li>就会查找他的<code>Prototype</code>对象是否有这个属性，如此递推下去，一直检索到 <code>Object</code> 内建对象</li><li><strong>原型：</strong><ul><li><code>JavaScript</code>的所有对象中都包含了一个 <code>[__proto__]</code> 内部属性，这个属性所对应的就是该对象的原型</li><li>JavaScript的函数对象，除了原型 <code>[__proto__]</code> 之外，还预置了 <code>prototype</code> 属性</li><li>当函数对象作为构造函数创建实例时，该 prototype 属性值将被作为实例对象的原型 <code>[__proto__]</code>。</li></ul></li><li><strong>原型链：</strong><ul><li>当一个对象调用的属性/方法自身不存在时，就会去自己 <code>[__proto__]</code> 关联的前辈 <code>prototype</code> 对象上去找</li><li>如果没找到，就会去该 <code>prototype</code> 原型 <code>[__proto__]</code> 关联的前辈 <code>prototype</code> 去找。依次类推，直到找到属性/方法或 <code>undefined</code> 为止。从而形成了所谓的“原型链”</li></ul></li><li><strong>原型特点：</strong><ul><li><code>JavaScript</code>对象是通过引用来传递的，当修改原型时，与之相关的对象也会继承这一改变</li></ul></li></ul><h2 id="Javascript如何实现继承？"><a href="#Javascript如何实现继承？" class="headerlink" title="Javascript如何实现继承？"></a>Javascript如何实现继承？</h2><ul><li>构造继承</li><li>原型继承</li><li>实例继承</li><li>拷贝继承</li><li>原型<code>prototype</code>机制或<code>apply</code>和<code>call</code>方法去实现较简单，建议使用构造函数与原型混合方式</li></ul><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例，三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent1&#x27;</span>;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child2&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title class_">Child1</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Child</span>())</span><br></pre></td></tr></table></figure><p>上面代码看似没问题，实际存在潜在问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Child2</span>();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Child2</span>();</span><br><span class="line">s1.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">play</span>, s2.<span class="property">play</span>); <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>改变<code>s1</code>的<code>play</code>属性，会发现<code>s2</code>也跟着发生变化了，这是因为两个实例使用的是同一个原型对象，内存空间是共享的</p><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><p>借助 <code>call</code>调用<code>Parent</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Parent1</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child);  <span class="comment">// 没问题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="title function_">getName</span>());  <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>前面我们讲到两种继承方式，各有优缺点。组合继承则将前两种方式继承起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent3</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent3&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 第二次调用 Parent3()</span></span><br><span class="line">    <span class="title class_">Parent3</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次调用 Parent3()</span></span><br><span class="line"><span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent3</span>();</span><br><span class="line"><span class="comment">// 手动挂上构造器，指向自己的构造函数</span></span><br><span class="line"><span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child3</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> <span class="title class_">Child3</span>();</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> <span class="title class_">Child3</span>();</span><br><span class="line">s3.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="property">play</span>, s4.<span class="property">play</span>);  <span class="comment">// 不互相影响</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="title function_">getName</span>()); <span class="comment">// 正常输出&#x27;parent3&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4.<span class="title function_">getName</span>()); <span class="comment">// 正常输出&#x27;parent3&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>这里主要借助<code>Object.create</code>方法实现普通对象的继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> parent4 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;parent4&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;p3&quot;</span>],</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> person4 = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent4);</span><br><span class="line">  person4.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">  person4.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> person5 = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent4);</span><br><span class="line">  person5.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person4.<span class="property">name</span>); <span class="comment">// tom</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person4.<span class="property">name</span> === person4.<span class="title function_">getName</span>()); <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="property">name</span>); <span class="comment">// parent4</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person4.<span class="property">friends</span>); <span class="comment">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="property">friends</span>); <span class="comment">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;]</span></span><br></pre></td></tr></table></figure><p>这种继承方式的缺点也很明显，因为<code>Object.create</code>方法实现的是浅拷贝，多个实例的引用类型属性指向相同的内存，存在篡改的可能</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax、axios、fetch区别</title>
      <link href="/2019/06/30/study/js/ajax%E3%80%81axios%E3%80%81feach/"/>
      <url>/2019/06/30/study/js/ajax%E3%80%81axios%E3%80%81feach/</url>
      
        <content type="html"><![CDATA[<h2 id="ajax、axios、fetch区别"><a href="#ajax、axios、fetch区别" class="headerlink" title="ajax、axios、fetch区别"></a>ajax、axios、fetch区别</h2><ul><li>ajax 是一种技术统称</li><li>fetch 一个原生API</li><li>axios 一个第三方库</li></ul><h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery ajax"></a><strong>jQuery ajax</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">   <span class="attr">url</span>: url,</span><br><span class="line">   <span class="attr">data</span>: data,</span><br><span class="line">   <span class="attr">dataType</span>: dataType,</span><br><span class="line">   <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">   <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">        @程序员<span class="attr">poetry</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>本身是针对<code>MVC</code>的编程,不符合现在前端<code>MVVM</code>的浪潮</li><li>基于原生的<code>XHR</code>开发，<code>XHR</code>本身的架构不清晰，已经有了<code>fetch</code>的替代方案</li><li><code>JQuery</code>整个项目太大，单纯使用<code>ajax</code>却要引入整个<code>JQuery</code>非常的不合理（采取个性化打包的方案又不能享受CDN服务）</li></ul><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a><strong>axios</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/12345&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">        @程序员<span class="attr">poetry</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>从浏览器中创建 <code>XMLHttpRequest</code></li><li>从 <code>node.js</code> 发出 <code>http</code> 请求</li><li>支持 <code>Promise API</code></li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换<code>JSON</code>数据</li><li>客户端支持防止<code>CSRF/XSRF</code></li></ul><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a><strong>fetch</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">  <span class="keyword">let</span> data = response.<span class="title function_">json</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Oops, error&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">        @程序员<span class="attr">poetry</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li><code>fetcht</code>只对网络请求报错，对<code>400</code>，<code>500</code>都当做成功的请求，需要封装去处理</li><li><code>fetch</code>默认不会带<code>cookie</code>，需要添加配置项</li><li><code>fetch</code>不支持<code>abort</code>，不支持超时控制，使用<code>setTimeout</code>及<code>Promise.reject</code>的实现的超时控制并不能阻止请求过程继续在后台运行，造成了量的浪费</li><li><code>fetch</code>没有办法原生监测请求的进度，而XHR可以</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数据类型</title>
      <link href="/2019/06/30/study/js/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/06/30/study/js/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h2><h3 id="JS内置类型"><a href="#JS内置类型" class="headerlink" title="JS内置类型"></a>JS内置类型</h3><ul><li><p><code>JS</code> 中分为七种内置类型，七种内置类型又分为两大类型：基本类型和对象（<code>Object</code>）。</p></li><li><p>基本类型有七种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null undefined boolean number string symbol bigint</span><br></pre></td></tr></table></figure><ul><li>其中 <code>Symbo</code>l 和 <code>BigInt</code> 是 <code>ES6</code> 新增的数据类型</li><li><code>Symbol</code> 代表独一无二的值，最大的用法是用来定义对象的唯一属性名。</li><li><code>BigInt</code> 可以表示任意大小的整数。</li></ul></li><li><p>其中 <code>JS</code> 的数字类型是浮点类型的，没有整型。并且浮点类型基于 <code>IEEE 754</code>标准实现，在使用中会遇到某些 Bug。<code>NaN</code> 也属于 <code>number</code> 类型，并且 <code>NaN</code> 不等于自身。</p></li><li><p>对于基本类型来说，如果使用字面量的方式，那么这个变量只是个字面量，只有在必要的时候才会转换为对应的类型。</p></li></ul><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型:"></a>引用数据类型:</h3><ul><li>对象<code>Object</code>（包含普通对象-<code>Object</code>，数组对象-<code>Array</code>，正则对象-<code>RegExp</code>，日期对象-<code>Date</code>，数学函数-<code>Math</code>，函数对象-<code>Function</code>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">111</span> <span class="comment">// 这只是字面量，不是 number 类型</span></span><br><span class="line">a.<span class="title function_">toString</span>() <span class="comment">// 使用时候才会转换为对象类型</span></span><br><span class="line"> </span><br><span class="line">        @程序员<span class="attr">poetry</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>对象（<code>Object</code>）是引用类型，在使用过程中会遇到浅拷贝和深拷贝的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  person.<span class="property">age</span> = <span class="number">26</span></span><br><span class="line">  person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hzj&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> person</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;fyq&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title function_">test</span>(p1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1) <span class="comment">// -&gt; ?</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2) <span class="comment">// -&gt; ?</span></span><br><span class="line"> </span><br><span class="line">        @程序员<span class="attr">poetry</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 结果:</span></span><br><span class="line">p1：&#123;<span class="attr">name</span>: “fyq”, <span class="attr">age</span>: <span class="number">26</span>&#125;</span><br><span class="line">p2：&#123;<span class="attr">name</span>: “hzj”, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"> </span><br><span class="line">        @程序员<span class="attr">poetry</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><blockquote><p>原因: 在函数传参的时候传递的是对象在堆中的内存地址值，test函数中的实参person是p1对象的内存地址，通过调用<code>person.age = 26</code>确实改变了p1的值，但随后<code>person</code>变成了另一块内存空间的地址，并且在最后将这另外一份内存空间的地址返回，赋给了p2。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="/2019/06/30/study/js/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>/2019/06/30/study/js/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是防抖和节流？有什么区别？"><a href="#什么是防抖和节流？有什么区别？" class="headerlink" title="什么是防抖和节流？有什么区别？"></a>什么是防抖和节流？有什么区别？</h2><p>防抖和节流本质上是优化高频率执行代码的一种手段</p><ul><li>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</li><li>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>相同点：</p><ul><li>都可以通过使用 <code>setTimeout</code> 实现</li><li>目的都是，降低回调执行频率。节省计算资源</li></ul><p>不同点：</p><ul><li>函数防抖，在一段连续操作结束后，处理回调，利用<code>clearTimeout</code>和 <code>setTimeout</code>实现。函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能</li><li>函数防抖关注一定时间连续触发的事件，只在最后执行一次，而函数节流一段时间内只执行一次</li></ul><p>例如，都设置时间频率为500ms，在2秒时间内，频繁触发函数，节流，每隔 500ms 就执行一次。防抖，则不管调动多少次方法，在2s后，只会执行一次</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>使用定时器写法，<code>delay</code>毫秒后第一次执行，第二次事件停止触发后依然会再一次执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttled2</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>简单版本的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>; <span class="comment">// 保存this指向</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>; <span class="comment">// 拿到event对象</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>防抖在连续的事件，只需触发一次回调的场景有：</p><ul><li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li><li>手机号、邮箱验证输入检测</li><li>窗口大小<code>resize</code>。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li></ul><p>节流在间隔一段时间执行一次回调的场景有：</p><ul><li>滚动加载，加载更多或滚到底部监听</li><li>搜索框，搜索联想功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>null和undefined</title>
      <link href="/2019/06/28/study/js/null%E5%92%8Cundefined/"/>
      <url>/2019/06/28/study/js/null%E5%92%8Cundefined/</url>
      
        <content type="html"><![CDATA[<h3 id="null和undefined区别"><a href="#null和undefined区别" class="headerlink" title="null和undefined区别"></a>null和undefined区别</h3><blockquote><p><code>Undefined</code>类型只有一个值，即<code>undefined</code>。当声明的变量还未被初始化时，变量的默认值为<code>undefined</code>。用法</p></blockquote><ul><li>变量被声明了，但没有赋值时，就等于<code>undefined</code>。</li><li>调用函数时，应该提供的参数没有提供，该参数等于<code>undefined</code>。</li><li>对象没有赋值的属性，该属性的值为<code>undefined</code>。</li><li>函数没有返回值时，默认返回<code>undefined</code></li></ul><blockquote><p><code>Null</code>类型也只有一个值，即<code>null</code>。<code>null</code>用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。用法</p></blockquote><ul><li>作为函数的参数，表示该函数的参数不是对象。</li><li>作为对象原型链的终点</li></ul><h3 id="null是对象吗？"><a href="#null是对象吗？" class="headerlink" title="null是对象吗？"></a>null是对象吗？</h3><p><code>null</code>不是对象。</p><blockquote><p>解释: 虽然 <code>typeof null</code> 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object 。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css设备像素</title>
      <link href="/2019/06/21/study/css/css%E8%AE%BE%E5%A4%87%E5%83%8F%E7%B4%A0/"/>
      <url>/2019/06/21/study/css/css%E8%AE%BE%E5%A4%87%E5%83%8F%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS像素"><a href="#CSS像素" class="headerlink" title="CSS像素"></a>CSS像素</h2><p>CSS像素（css pixel, px）: 适用于web编程，在 CSS 中以 px 为后缀，是一个长度单位</p><p>在 CSS 规范中，长度单位可以分为两类，绝对单位以及相对单位</p><p>px是一个相对单位，相对的是设备像素（device pixel）</p><p>一般情况，页面缩放比为1，1个CSS像素等于1个设备独立像素</p><p><code>CSS</code>像素又具有两个方面的相对性：</p><ul><li>在同一个设备上，每1个 CSS 像素所代表的设备像素是可以变化的（比如调整屏幕的分辨率）</li><li>在不同的设备之间，每1个 CSS 像素所代表的设备像素是可以变化的（比如两个不同型号的手机）</li></ul><p>在页面进行缩放操作也会 引起<code>css</code>中<code>px</code>的变化，假设页面放大一倍，原来的 1px 的东西变成 2px，在实际宽度不变的情况下1px 变得跟原来的 2px 的长度（长宽）一样了（元素会占据更多的设备像素）</p><p>假设原来需要 320px 才能填满的宽度现在只需要 160px</p><p>px会受到下面的因素的影响而变化：</p><ul><li>每英寸像素（PPI）</li><li>设备像素比（DPR）</li></ul><h3 id="设备像素"><a href="#设备像素" class="headerlink" title="设备像素"></a>设备像素</h3><p>设备像素（device pixels），又称为物理像素</p><p>指设备能控制显示的最小物理单位，不一定是一个小正方形区块，也没有标准的宽高，只是用于显示丰富色彩的一个“点”而已</p><p>从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了，单位为<code>pt</code></p><h3 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h3><p>设备独立像素（Device Independent Pixel）：与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟像素，是一个总体概念，包括了CSS像素</p><p>备独立像素（Device Independent Pixel）：与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟像素，是一个总体概念，包括了CSS像素</p><p>在<code>javaScript</code>中可以通过<code>window.screen.width/ window.screen.height</code> 查看</p><p>比如我们会说“电脑屏幕在 2560x1600分辨率下不适合玩游戏，我们把它调为 1440x900”，这里的“分辨率”（非严谨说法）指的就是设备独立像素</p><p>一个设备独立像素里可能包含1个或者多个物理像素点，包含的越多则屏幕看起来越清晰</p><p>至于为什么出现设备独立像素这种虚拟像素单位概念，下面举个例子：</p><p>iPhone 3GS 和 iPhone 4/4s 的尺寸都是 3.5 寸，但 iPhone 3GS 的分辨率是 320x480，iPhone 4/4s 的分辨率是 640x960</p><p>这意味着，iPhone 3GS 有 320 个物理像素，iPhone 4/4s 有 640 个物理像素</p><p>如果我们按照真实的物理像素进行布局，比如说我们按照 320 物理像素进行布局，到了 640 物理像素的手机上就会有一半的空白，为了避免这种问题，就产生了虚拟像素单位</p><p>我们统一 iPhone 3GS 和 iPhone 4/4s 都是 320 个虚拟像素，只是在 iPhone 3GS 上，最终 1 个虚拟像素换算成 1 个物理像素，在 iphone 4s 中，1 个虚拟像素最终换算成 2 个物理像素</p><p>至于 1 个虚拟像素被换算成几个物理像素，这个数值我们称之为设备像素比，也就是下面介绍的<code>dpr</code></p><h3 id="dpr"><a href="#dpr" class="headerlink" title="dpr"></a>dpr</h3><p>dpr（device pixel ratio），设备像素比，代表设备独立像素到设备像素的转换关系，在<code>JavaScript</code>中可以通过 <code>window.devicePixelRatio</code> 获取</p><p>计算公式如下：</p><p><img src="https://static.vue-js.com/dd45e2b0-91f2-11eb-ab90-d9ae814b240d.png" alt="img"></p><p>当设备像素比为1:1时，使用1（1×1）个设备像素显示1个CSS像素</p><p>当设备像素比为2:1时，使用4（2×2）个设备像素显示1个CSS像素</p><p>当设备像素比为3:1时，使用9（3×3）个设备像素显示1个CSS像素</p><p>当<code>dpr</code>为3，那么<code>1px</code>的<code>CSS</code>像素宽度对应<code>3px</code>的物理像素的宽度，1px的<code>CSS</code>像素高度对应<code>3px</code>的物理像素高度</p><h3 id="ppi"><a href="#ppi" class="headerlink" title="ppi"></a>ppi</h3><p>ppi （pixel per inch），每英寸像素，表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>无缩放情况下，1个CSS像素等于1个设备独立像素</p><p>设备像素由屏幕生产之后就不发生改变，而设备独立像素是一个虚拟单位会发生改变</p><p>PC端中，1个设备独立像素 = 1个设备像素 （在100%，未缩放的情况下）</p><p>在移动端中，标准屏幕（160ppi）下 1个设备独立像素 = 1个设备像素</p><p>设备像素比（dpr） = 设备像素 / 设备独立像素</p><p>每英寸像素（ppi），值越大，图像越清晰</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax原理</title>
      <link href="/2019/06/21/study/js/ajax%E5%8E%9F%E7%90%86/"/>
      <url>/2019/06/21/study/js/ajax%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>AJAX全称(Async Javascript and XML)</p><p>即异步的<code>JavaScript</code> 和<code>XML</code>，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数据，并且更新部分网页</p><p><code>Ajax</code>的原理简单来说通过<code>XmlHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用<code>JavaScript</code>来操作<code>DOM</code>而更新页面</p><p>流程图如下：</p><p><img src="https://static.vue-js.com/af42de10-7b2a-11eb-85f6-6fac77c0c9b3.png" alt="img"></p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>实现 <code>Ajax</code>异步交互需要服务器逻辑进行配合，需要完成以下步骤：</p><ul><li>创建 <code>Ajax</code>的核心对象 <code>XMLHttpRequest</code>对象</li><li>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务端建立连接</li><li>构建请求所需的数据内容，并通过<code>XMLHttpRequest</code> 对象的 <code>send()</code> 方法发送给服务器端</li><li>通过 <code>XMLHttpRequest</code> 对象提供的 <code>onreadystatechange</code> 事件监听服务器端你的通信状态</li><li>接受并处理服务端向客户端响应的数据结果</li><li>将处理结果更新到 <code>HTML</code>页面中</li></ul><h3 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h3><p>通过<code>XMLHttpRequest()</code> 构造函数用于初始化一个 <code>XMLHttpRequest</code> 实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><h3 id="与服务器建立连接"><a href="#与服务器建立连接" class="headerlink" title="与服务器建立连接"></a>与服务器建立连接</h3><p>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务器建立连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(method, url, [<span class="keyword">async</span>][, user][, password])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>method</code>：表示当前的请求方式，常见的有<code>GET</code>、<code>POST</code></li><li><code>url</code>：服务端地址</li><li><code>async</code>：布尔值，表示是否异步执行操作，默认为<code>true</code></li><li><code>user</code>: 可选的用户名用于认证用途；默认为`null</li><li><code>password</code>: 可选的密码用于认证用途，默认为`null</li></ul><h3 id="给服务端发送数据"><a href="#给服务端发送数据" class="headerlink" title="给服务端发送数据"></a>给服务端发送数据</h3><p>通过 <code>XMLHttpRequest</code> 对象的 <code>send()</code> 方法，将客户端页面的数据发送给服务端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>([body])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body`: 在 `XHR` 请求中要发送的数据体，如果不传递数据则为 `null</span><br></pre></td></tr></table></figure><p>如果使用<code>GET</code>请求发送数据的时候，需要注意如下：</p><ul><li>将请求数据添加到<code>open()</code>方法中的<code>url</code>地址中</li><li>发送请求数据中的<code>send()</code>方法中参数设置为<code>null</code></li></ul><h3 id="绑定onreadystatechange事件"><a href="#绑定onreadystatechange事件" class="headerlink" title="绑定onreadystatechange事件"></a>绑定onreadystatechange事件</h3><p><code>onreadystatechange</code> 事件用于监听服务器端的通信状态，主要监听的属性为<code>XMLHttpRequest.readyState</code> ,</p><p>关于<code>XMLHttpRequest.readyState</code>属性有五个状态，如下图显示</p><p><img src="https://static.vue-js.com/9782fc90-7b31-11eb-ab90-d9ae814b240d.png" alt="img"></p><p>只要 <code>readyState</code>属性值一变化，就会触发一次 <code>readystatechange</code> 事件</p><p><code>XMLHttpRequest.responseText</code>属性用于接收服务器端的响应结果</p><h2 id="整体流程代码"><a href="#整体流程代码" class="headerlink" title="整体流程代码"></a>整体流程代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">request.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://xxxx&#x27;</span>)</span><br><span class="line">request.<span class="title function_">send</span>()</span><br><span class="line">request.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.<span class="property">readyState</span> === <span class="number">4</span>)&#123; <span class="comment">// 整个请求过程完毕</span></span><br><span class="line">        <span class="keyword">if</span>(request.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; request.<span class="property">status</span> &lt;= <span class="number">300</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">responseText</span>) <span class="comment">// 服务端返回的结果</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.<span class="property">status</span> &gt;=<span class="number">400</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;错误信息：&quot;</span> + request.<span class="property">status</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装ajax"><a href="#封装ajax" class="headerlink" title="封装ajax"></a>封装ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装一个ajax请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">//创建XMLHttpRequest对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化参数的内容</span></span><br><span class="line">    options = options || &#123;&#125;</span><br><span class="line">    options.<span class="property">type</span> = (options.<span class="property">type</span> || <span class="string">&#x27;GET&#x27;</span>).<span class="title function_">toUpperCase</span>()</span><br><span class="line">    options.<span class="property">dataType</span> = options.<span class="property">dataType</span> || <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> params = options.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">type</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, options.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + params, <span class="literal">true</span>)</span><br><span class="line">        xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">type</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, options.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">        xhr.<span class="title function_">send</span>(params)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收请求</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> status = xhr.<span class="property">status</span></span><br><span class="line">            <span class="keyword">if</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                options.<span class="property">success</span> &amp;&amp; options.<span class="title function_">success</span>(xhr.<span class="property">responseText</span>, xhr.<span class="property">responseXML</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                options.<span class="property">fail</span> &amp;&amp; options.<span class="title function_">fail</span>(status)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">    <span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://xxxx&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">text,xml</span>)&#123;<span class="comment">//请求成功后的回调函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params">status</span>)&#123;<span class="comment">////请求失败后的回调函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(status)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typeof 与 instanceof</title>
      <link href="/2019/06/21/study/js/typeOf%E5%92%8CinstanceOf%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/06/21/study/js/typeOf%E5%92%8CinstanceOf%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="typeof-与-instanceof-区别"><a href="#typeof-与-instanceof-区别" class="headerlink" title="typeof 与 instanceof 区别"></a>typeof 与 instanceof 区别</h2><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p><code>typeof</code> 操作符返回一个字符串，表示未经计算的操作数的类型</p><p>使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> operand</span><br><span class="line"><span class="title function_">typeof</span>(operand)</span><br></pre></td></tr></table></figure><p><code>operand</code>表示对象或原始值的表达式，其类型将被返回</p><p>举个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span> <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;1&#x27;</span> <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// &#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>() <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">console</span> <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">log</span> <span class="comment">// &#x27;function&#x27;</span></span><br></pre></td></tr></table></figure><p>从上面例子，前6个都是基础数据类型。虽然<code>typeof null</code>为<code>object</code>，但这只是<code>JavaScript</code> 存在的一个悠久 <code>Bug</code>，不代表<code>null</code>就是引用数据类型，并且<code>null</code>本身也不是对象</p><p>所以，<code>null</code>在 <code>typeof</code>之后返回的是有问题的结果，不能作为判断<code>null</code>的方法。如果你需要在 <code>if</code> 语句中判断是否为 <code>null</code>，直接通过<code>===null</code>来判断就好</p><p>同时，可以发现引用类型数据，用<code>typeof</code>来判断的话，除了<code>function</code>会被识别出来之外，其余的都输出<code>object</code></p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p><code>instanceof</code> 运算符用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上</p><p>也就是顺着原型链去找，直到找到相同的原型对象，返回<code>true</code>，否则为<code>false</code></p><p>使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object <span class="keyword">instanceof</span> constructor</span><br></pre></td></tr></table></figure><p><code>object</code>为实例对象，<code>constructor</code>为构造函数</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><code>typeof</code>与<code>instanceof</code>都是判断数据类型的方法，区别如下：</p><ul><li><code>typeof</code>会返回一个变量的基本类型，<code>instanceof</code>返回的是一个布尔值</li><li><code>instanceof</code> 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li><li>而<code>typeof</code> 也存在弊端，它虽然可以判断基础数据类型（<code>null</code> 除外），但是引用数据类型中，除了<code>function</code> 类型以外，其他的也无法判断</li></ul><p>可以看到，上述两种方法都有弊端，并不能满足所有场景的需求</p><p>如果需要通用检测数据类型，可以采用<code>Object.prototype.toString</code>，调用该方法，统一返回格式<code>“[object Xxx]”</code>的字符串</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce方法</title>
      <link href="/2019/06/21/study/js/reduce%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/06/21/study/js/reduce%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p><code>reduce()</code> 方法将数组缩减为单个值。</p><p><code>reduce()</code> 方法为数组的每个值（从左到右）执行提供的函数。</p><p>函数的返回值存储在累加器中（结果/总计）。</p><p><strong>注释：</strong>对没有值的数组元素，不执行 <code>reduce()</code> 方法。</p><p><strong>注释：</strong><code>reduce()</code> 方法不会改变原始数组。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</p><table><thead><tr><th><em>total</em></th><th>必需。initialValue，或函数先前返回的值。</th></tr></thead><tbody><tr><td><em>currentValue</em></td><td>必需。当前元素的值。</td></tr><tr><td><em>index</em></td><td>可选。当前元素的数组索引。</td></tr><tr><td><em>arr</em></td><td>可选。当前元素所属的数组对象</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JavaScript 数组<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>从左边开始减去数组中的数字：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> numbers = [<span class="number">175</span>, <span class="number">50</span>, <span class="number">25</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = numbers.<span class="title function_">reduce</span>(myFunc);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params">total, num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> total - num;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">从左边开始减去数组中的数字：</span><br><span class="line">100</span><br></pre></td></tr></table></figure><h1 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h1><p>reduceRight和reduce大致一样，不过这个是从右往左进行计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 忽略大小写进行字符串次数统计</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">instanceOfStr</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    str = str.<span class="title function_">toLocaleLowerCase</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 不忽略大小写的话，把toLocaleLowerCase()去掉就行</span></span><br><span class="line">    <span class="keyword">let</span> data = str.<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj, item</span>) =&gt;</span> &#123;</span><br><span class="line">        (item <span class="keyword">in</span> obj) ? obj[item]++ : obj[item] = <span class="number">1</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;====================================&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;====================================&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">instanceOfStr</span>(<span class="string">&quot;113sa4d5as萨达&quot;</span>)</span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* ====================================</span></span><br><span class="line"><span class="comment">* &#123; &#x27;1&#x27;: 2, &#x27;3&#x27;: 1, &#x27;4&#x27;: 1, &#x27;5&#x27;: 1, &#x27;达&#x27;: 1, &#x27;萨&#x27;: 1, s: 2, a: 2, d: 1 &#125;</span></span><br><span class="line"><span class="comment">* ====================================</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器解析url</title>
      <link href="/2019/05/21/study/js/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90url/"/>
      <url>/2019/05/21/study/js/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90url/</url>
      
        <content type="html"><![CDATA[<h2 id="从输入-URL到回车后发生的行为"><a href="#从输入-URL到回车后发生的行为" class="headerlink" title="从输入 URL到回车后发生的行为"></a>从输入 <code>URL</code>到回车后发生的行为</h2><ul><li>URL解析</li><li>DNS 查询</li><li>TCP 连接</li><li>HTTP 请求</li><li>响应请求</li><li>页面渲染</li></ul><h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><h3 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h3><p>首先判断你输入的是一个合法的<code>URL</code> 还是一个待搜索的关键词，并且根据你输入的内容进行对应操作</p><h3 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h3><p>整个查询过程如下图所示：</p><p><img src="https://static.vue-js.com/330fb770-bdf4-11eb-85f6-6fac77c0c9b3.png" alt="img"></p><p>最终，获取到了域名对应的目标服务器<code>IP</code>地址</p><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>在之前文章中，了解到<code>tcp</code>是一种面向有连接的传输层协议</p><p>在确定目标服务器服务器的<code>IP</code>地址后，则经历三次握手建立<code>TCP</code>连接</p><h3 id="发送-http-请求"><a href="#发送-http-请求" class="headerlink" title="发送 http 请求"></a>发送 http 请求</h3><p>当建立<code>tcp</code>连接之后，就可以在这基础上进行通信，浏览器发送 <code>http</code> 请求到目标服务器</p><p>请求的内容包括：</p><ul><li>请求行</li><li>请求头</li><li>请求主体</li></ul><h3 id="响应请求"><a href="#响应请求" class="headerlink" title="响应请求"></a>响应请求</h3><p>当服务器接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个<code>HTTP</code>响应消息，包括：</p><ul><li>状态行</li><li>响应头</li><li>响应正文</li></ul><p>在服务器响应之后，由于现在<code>http</code>默认开始长连接<code>keep-alive</code>，当页面关闭之后，<code>tcp</code>链接则会经过四次挥手完成断开</p><h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><p>当浏览器接收到服务器响应的资源后，首先会对资源进行解析：</p><ul><li>查看响应头的信息，根据不同的指示做对应处理，比如重定向，存储cookie，解压gzip，缓存资源等等</li><li>查看响应头的 Content-Type的值，根据不同的资源类型采用不同的解析方式</li></ul><p>关于页面的渲染过程如下：</p><ul><li>解析HTML，构建 DOM 树</li><li>解析 CSS ，生成 CSS 规则树</li><li>合并 DOM 树和 CSS 规则，生成 render 树</li><li>布局 render 树（ Layout / reflow ），负责各元素尺寸、位置的计算</li><li>绘制 render 树（ paint ），绘制页面像素信息</li><li>浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（ composite ），显示在屏幕上</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2019/04/28/study/js/jsPromise/"/>
      <url>/2019/04/28/study/js/jsPromise/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise-的含义"><a href="#Promise-的含义" class="headerlink" title="Promise 的含义"></a>Promise 的含义</h2><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了 <code>Promise</code>对象。</p><p>所谓 <code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><p><code>Promise</code>对象有以下两个特点。</p><p>（1）对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和 <code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 <code>Promise</code>这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从 <code>pending</code>变为 <code>fulfilled</code>和从 <code>pending</code>变为 <code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对 <code>Promise</code>对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><p>注意，为了行文方便，本章后面的 <code>resolved</code>统一只指 <code>fulfilled</code>状态，不包含 <code>rejected</code>状态。</p><p>有了 <code>Promise</code>对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，<code>Promise</code>对象提供统一的接口，使得控制异步操作更加容易。</p><p><code>Promise</code>也有一些缺点。首先，无法取消 <code>Promise</code>，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反应到外部。第三，当处于 <code>pending</code>状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><p>如果某些事件不断地反复发生，一般来说，使用 <a href="https://nodejs.org/api/stream.html">Stream</a> 模式是比部署 <code>Promise</code>更好的选择。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6 规定，<code>Promise</code>对象是一个构造函数，用来生成 <code>Promise</code>实例。</p><p>下面代码创造了一个 <code>Promise</code>实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是 <code>resolve</code>和 <code>reject</code>。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p><code>resolve</code>函数的作用是，将 <code>Promise</code>对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<code>reject</code>函数的作用是，将 <code>Promise</code>对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p><code>Promise</code>实例生成以后，可以用 <code>then</code>方法分别指定 <code>resolved</code>状态和 <code>rejected</code>状态的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是 <code>Promise</code>对象的状态变为 <code>resolved</code>时调用，第二个回调函数是 <code>Promise</code>对象的状态变为 <code>rejected</code>时调用。这两个函数都是可选的，不一定要提供。它们都接受 <code>Promise</code>对象传出的值作为参数。</p><p>下面是一个 <code>Promise</code>对象的简单例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, ms, <span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">timeout</span>(<span class="number">100</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>timeout</code>方法返回一个 <code>Promise</code>实例，表示一段时间以后才会发生的结果。过了指定的时间（<code>ms</code>参数）以后，<code>Promise</code>实例的状态变为 <code>resolved</code>，就会触发 <code>then</code>方法绑定的回调函数。</p><p>Promise 新建后就会立即执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolved.&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="comment">// Hi!</span></span><br><span class="line"><span class="comment">// resolved</span></span><br></pre></td></tr></table></figure><p>上面代码中，Promise 新建后立即执行，所以首先输出的是 <code>Promise</code>。然后，<code>then</code>方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以 <code>resolved</code>最后输出。</p><p>下面是异步加载图片的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImageAsync</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line"></span><br><span class="line">    image.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(image);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    image.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Could not load image at &#x27;</span> + url));</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    image.<span class="property">src</span> = url;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，使用 <code>Promise</code>包装了一个图片加载的异步操作。如果加载成功，就调用 <code>resolve</code>方法，否则就调用 <code>reject</code>方法。</p><p>下面是一个用 <code>Promise</code>对象实现的 Ajax 操作的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getJSON = <span class="keyword">function</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    client.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">    client.<span class="property">onreadystatechange</span> = handler;</span><br><span class="line">    client.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span><br><span class="line">    client.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    client.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Contents: &#x27;</span> + json);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;出错了&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>getJSON</code>是对 XMLHttpRequest 对象的封装，用于发出一个针对 JSON 数据的 HTTP 请求，并且返回一个 <code>Promise</code>对象。需要注意的是，在 <code>getJSON</code>内部，<code>resolve</code>函数和 <code>reject</code>函数调用时，都带有参数。</p><p>如果调用 <code>resolve</code>函数和 <code>reject</code>函数时带有参数，那么它们的参数会被传递给回调函数。<code>reject</code>函数的参数通常是 <code>Error</code>对象的实例，表示抛出的错误；<code>resolve</code>函数的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">resolve</span>(p1);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码中，<code>p1</code>和 <code>p2</code>都是 Promise 的实例，但是 <code>p2</code>的 <code>resolve</code>方法将 <code>p1</code>作为参数，即一个异步操作的结果是返回另一个异步操作。</p><p>注意，这时 <code>p1</code>的状态就会传递给 <code>p2</code>，也就是说，<code>p1</code>的状态决定了 <code>p2</code>的状态。如果 <code>p1</code>的状态是 <code>pending</code>，那么 <code>p2</code>的回调函数就会等待 <code>p1</code>的状态改变；如果 <code>p1</code>的状态已经是 <code>resolved</code>或者 <code>rejected</code>，那么 <code>p2</code>的回调函数将会立刻执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fail&#x27;</span>)), <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(p1), <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p2</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error))</span><br><span class="line"><span class="comment">// Error: fail</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>p1</code>是一个 Promise，3 秒之后变为 <code>rejected</code>。<code>p2</code>的状态在 1 秒之后改变，<code>resolve</code>方法返回的是 <code>p1</code>。由于 <code>p2</code>返回的是另一个 Promise，导致 <code>p2</code>自己的状态无效了，由 <code>p1</code>的状态决定 <code>p2</code>的状态。所以，后面的 <code>then</code>语句都变成针对后者（<code>p1</code>）。又过了 2 秒，<code>p1</code>变为 <code>rejected</code>，导致触发 <code>catch</code>方法指定的回调函数。</p><p>注意，调用 <code>resolve</code>或 <code>reject</code>并不会终结 Promise 的参数函数的执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>上面代码中，调用 <code>resolve(1)</code>以后，后面的 <code>console.log(2)</code>还是会执行，并且会首先打印出来。这是因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。</p><p>一般来说，调用 <code>resolve</code>或 <code>reject</code>以后，Promise 的使命就完成了，后继操作应该放到 <code>then</code>方法里面，而不应该直接写在 <code>resolve</code>或 <code>reject</code>的后面。所以，最好在它们前面加上 <code>return</code>语句，这样就不会有意外。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 后面的语句不会执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><p>Promise 实例具有 <code>then</code>方法，也就是说，<code>then</code>方法是定义在原型对象 <code>Promise.prototype</code>上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，<code>then</code>方法的第一个参数是 <code>resolved</code>状态的回调函数，第二个参数是 <code>rejected</code>状态的回调函数，它们都是可选的。</p><p><code>then</code>方法返回的是一个新的 <code>Promise</code>实例（注意，不是原来那个 <code>Promise</code>实例）。因此可以采用链式写法，即 <code>then</code>方法后面再调用另一个 <code>then</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> json.<span class="property">post</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码使用 <code>then</code>方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p><p>采用链式的 <code>then</code>，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个 <code>Promise</code>对象（即有异步操作），这时后一个回调函数，就会等待该 <code>Promise</code>对象的状态发生变化，才会被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/post/1.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">comments</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolved: &quot;</span>, comments);</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rejected: &quot;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，第一个 <code>then</code>方法指定的回调函数，返回的是另一个 <code>Promise</code>对象。这时，第二个 <code>then</code>方法指定的回调函数，就会等待这个新的 <code>Promise</code>对象状态发生变化。如果变为 <code>resolved</code>，就调用第一个回调函数，如果状态变为 <code>rejected</code>，就调用第二个回调函数。</p><p>如果采用箭头函数，上面的代码可以写得更简洁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/post/1.json&quot;</span>).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">post</span> =&gt;</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>)</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">comments</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolved: &quot;</span>, comments),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rejected: &quot;</span>, err)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h2><p><code>Promise.prototype.catch()</code>方法是 <code>.then(null, rejection)</code>或 <code>.then(undefined, rejection)</code>的别名，用于指定发生错误时的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>getJSON()</code>方法返回一个 Promise 对象，如果该对象状态变为 <code>resolved</code>，则会调用 <code>then()</code>方法指定的回调函数；如果异步操作抛出错误，状态就会变为 <code>rejected</code>，就会调用 <code>catch()</code>方法指定的回调函数，处理这个错误。另外，<code>then()</code>方法指定的回调函数，如果运行中抛出错误，也会被 <code>catch()</code>方法捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fulfilled:&#x27;</span>, val))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rejected&#x27;</span>, err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fulfilled:&#x27;</span>, val))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="literal">null</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rejected:&quot;</span>, err));</span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Error: test</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>promise</code>抛出一个错误，就被 <code>catch()</code>方法指定的回调函数捕获。注意，上面的写法与下面两种写法是等价的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>比较上面两种写法，可以发现 <code>reject()</code>方法的作用，等同于抛出错误。</p><p>如果 Promise 状态已经变成 <code>resolved</code>，再抛出错误是无效的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(value) &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(error) &#125;);</span><br><span class="line"><span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>上面代码中，Promise 在 <code>resolve</code>语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。</p><p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 <code>catch</code>语句捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/post/1.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">comments</span>) &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理前面三个Promise产生的错误</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，一共有三个 Promise 对象：一个由 <code>getJSON()</code>产生，两个由 <code>then()</code>产生。它们之中任何一个抛出的错误，都会被最后一个 <code>catch()</code>捕获。</p><p>一般来说，不要在 <code>then()</code>方法里面定义 Reject 状态的回调函数（即 <code>then</code>的第二个参数），总是使用 <code>catch</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123; <span class="comment">//cb</span></span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面 <code>then</code>方法执行中的错误，也更接近同步的写法（<code>try/catch</code>）。因此，建议总是使用 <code>catch()</code>方法，而不使用 <code>then()</code>方法的第二个参数。</p><p>跟传统的 <code>try/catch</code>代码块不同的是，如果没有使用 <code>catch()</code>方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someAsyncThing = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面一行会报错，因为x没有声明</span></span><br><span class="line">    <span class="title function_">resolve</span>(x + <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">someAsyncThing</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;everything is great&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) &#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="comment">// Uncaught (in promise) ReferenceError: x is not defined</span></span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>someAsyncThing()</code>函数产生的 Promise 对象，内部有语法错误。浏览器运行到这一行，会打印出错误提示 <code>ReferenceError: x is not defined</code>，但是不会退出进程、终止脚本执行，2 秒之后还是会输出 <code>123</code>。这就是说，Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。</p><p>这个脚本放在服务器执行，退出码就是 <code>0</code>（即表示执行成功）。不过，Node.js 有一个 <code>unhandledRejection</code>事件，专门监听未捕获的 <code>reject</code>错误，上面的脚本会触发这个事件的监听函数，可以在监听函数里面抛出错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;unhandledRejection&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, p</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> err;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>unhandledRejection</code>事件的监听函数有两个参数，第一个是错误对象，第二个是报错的 Promise 实例，它可以用来了解发生错误的环境信息。</p><p>注意，Node 有计划在未来废除 <code>unhandledRejection</code>事件。如果 Promise 内部有未捕获的错误，会直接终止进程，并且进程的退出码不为 0。</p><p>再看下面的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>) &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(value) &#125;);</span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line"><span class="comment">// Uncaught Error: test</span></span><br></pre></td></tr></table></figure><p>上面代码中，Promise 指定在下一轮“事件循环”再抛出错误。到了那个时候，Promise 的运行已经结束了，所以这个错误是在 Promise 函数体外抛出的，会冒泡到最外层，成了未捕获的错误。</p><p>一般总是建议，Promise 对象后面要跟 <code>catch()</code>方法，这样可以处理 Promise 内部发生的错误。<code>catch()</code>方法返回的还是一个 Promise 对象，因此后面还可以接着调用 <code>then()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someAsyncThing = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面一行会报错，因为x没有声明</span></span><br><span class="line">    <span class="title function_">resolve</span>(x + <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">someAsyncThing</span>()</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;oh no&#x27;</span>, error);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;carry on&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// oh no [ReferenceError: x is not defined]</span></span><br><span class="line"><span class="comment">// carry on</span></span><br></pre></td></tr></table></figure><p>上面代码运行完 <code>catch()</code>方法指定的回调函数，会接着运行后面那个 <code>then()</code>方法指定的回调函数。如果没有报错，则会跳过 <code>catch()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;oh no&#x27;</span>, error);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;carry on&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// carry on</span></span><br></pre></td></tr></table></figure><p>上面的代码因为没有报错，跳过了 <code>catch()</code>方法，直接执行后面的 <code>then()</code>方法。此时，要是 <code>then()</code>方法里面报错，就与前面的 <code>catch()</code>无关了。</p><p><code>catch()</code>方法之中，还能再抛出错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someAsyncThing = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面一行会报错，因为x没有声明</span></span><br><span class="line">    <span class="title function_">resolve</span>(x + <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">someAsyncThing</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">someOtherAsyncThing</span>();</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;oh no&#x27;</span>, error);</span><br><span class="line">  <span class="comment">// 下面一行会报错，因为 y 没有声明</span></span><br><span class="line">  y + <span class="number">2</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;carry on&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// oh no [ReferenceError: x is not defined]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>catch()</code>方法抛出一个错误，因为后面没有别的 <code>catch()</code>方法了，导致这个错误不会被捕获，也不会传递到外层。如果改写一下，结果就不一样了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">someAsyncThing</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">someOtherAsyncThing</span>();</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;oh no&#x27;</span>, error);</span><br><span class="line">  <span class="comment">// 下面一行会报错，因为y没有声明</span></span><br><span class="line">  y + <span class="number">2</span>;</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;carry on&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// oh no [ReferenceError: x is not defined]</span></span><br><span class="line"><span class="comment">// carry on [ReferenceError: y is not defined]</span></span><br></pre></td></tr></table></figure><p>上面代码中，第二个 <code>catch()</code>方法用来捕获前一个 <code>catch()</code>方法抛出的错误。</p><h2 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h2><p><code>finally()</code>方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，不管 <code>promise</code>最后的状态，在执行完 <code>then</code>或 <code>catch</code>指定的回调函数以后，都会执行 <code>finally</code>方法指定的回调函数。</p><p>下面是一个例子，服务器使用 Promise 处理请求，然后使用 <code>finally</code>方法关掉服务器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>(port)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(server.<span class="property">stop</span>);</span><br></pre></td></tr></table></figure><p><code>finally</code>方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是 <code>fulfilled</code>还是 <code>rejected</code>。这表明，<code>finally</code>方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。</p><p><code>finally</code>本质上是 <code>then</code>方法的特例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 语句</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面代码中，如果不使用 <code>finally</code>方法，同样的语句需要为成功和失败两种情况各写一次。有了 <code>finally</code>方法，则只需要写一次。</p><p>它的实现也很简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> P = <span class="variable language_">this</span>.<span class="property">constructor</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">value</span>  =&gt;</span> P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value),</span><br><span class="line">    <span class="function"><span class="params">reason</span> =&gt;</span> P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，不管前面的 Promise 是 <code>fulfilled</code>还是 <code>rejected</code>，都会执行回调函数 <code>callback</code>。</p><p>从上面的实现还可以看到，<code>finally</code>方法总是会返回原来的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve 的值是 undefined</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;&#125;, <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// resolve 的值是 2</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reject 的值是 undefined</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">3</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;&#125;, <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reject 的值是 3</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">3</span>).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>Promise.all()</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是 Promise 实例，如果不是，就会先调用下面讲到的 <code>Promise.resolve</code>方法，将参数转为 Promise 实例，再进一步处理。另外，<code>Promise.all()</code>方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p><p><code>p</code>的状态由 <code>p1</code>、<code>p2</code>、<code>p3</code>决定，分成两种情况。</p><p>（1）只有 <code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成 <code>fulfilled</code>，<code>p</code>的状态才会变成 <code>fulfilled</code>，此时 <code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给 <code>p</code>的回调函数。</p><p>（2）只要 <code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被 <code>rejected</code>，<code>p</code>的状态就变成 <code>rejected</code>，此时第一个被 <code>reject</code>的实例的返回值，会传递给 <code>p</code>的回调函数。</p><p>下面是一个具体的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个Promise对象的数组</span></span><br><span class="line"><span class="keyword">const</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(<span class="string">&#x27;/post/&#x27;</span> + id + <span class="string">&quot;.json&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>promises</code>是包含 6 个 Promise 实例的数组，只有这 6 个实例的状态都变成 <code>fulfilled</code>，或者其中有一个变为 <code>rejected</code>，才会调用 <code>Promise.all</code>方法后面的回调函数。</p><p>下面是另一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> databasePromise = <span class="title function_">connectDatabase</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> booksPromise = databasePromise</span><br><span class="line">  .<span class="title function_">then</span>(findAllBooks);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userPromise = databasePromise</span><br><span class="line">  .<span class="title function_">then</span>(getCurrentUser);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  booksPromise,</span><br><span class="line">  userPromise</span><br><span class="line">])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">[books, user]</span>) =&gt;</span> <span class="title function_">pickTopRecommendations</span>(books, user));</span><br></pre></td></tr></table></figure><p>上面代码中，<code>booksPromise</code>和 <code>userPromise</code>是两个异步操作，只有等到它们的结果都返回了，才会触发 <code>pickTopRecommendations</code>这个回调函数。</p><p>注意，如果作为参数的 Promise 实例，自己定义了 <code>catch</code>方法，那么它一旦被 <code>rejected</code>，并不会触发 <code>Promise.all()</code>的 <code>catch</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;报错了&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, Error: 报错了]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>p1</code>会 <code>resolved</code>，<code>p2</code>首先会 <code>rejected</code>，但是 <code>p2</code>有自己的 <code>catch</code>方法，该方法返回的是一个新的 Promise 实例，<code>p2</code>指向的实际上是这个实例。该实例执行完 <code>catch</code>方法后，也会变成 <code>resolved</code>，导致 <code>Promise.all()</code>方法参数里面的两个实例都会 <code>resolved</code>，因此会调用 <code>then</code>方法指定的回调函数，而不会调用 <code>catch</code>方法指定的回调函数。</p><p>如果 <code>p2</code>没有自己的 <code>catch</code>方法，就会调用 <code>Promise.all()</code>的 <code>catch</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;报错了&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="comment">// Error: 报错了</span></span><br></pre></td></tr></table></figure><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，只要 <code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 <code>p</code>的回调函数。</p><p><code>Promise.race()</code>方法的参数与 <code>Promise.all()</code>方法一样，如果不是 Promise 实例，就会先调用下面讲到的 <code>Promise.resolve()</code>方法，将参数转为 Promise 实例，再进一步处理。</p><p>下面是一个例子，如果指定时间内没有获得结果，就将 Promise 的状态变为 <code>reject</code>，否则变为 <code>resolve</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/resource-that-may-take-a-while&#x27;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;request timeout&#x27;</span>)), <span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，如果 5 秒之内 <code>fetch</code>方法无法返回结果，变量 <code>p</code>的状态就会变为 <code>rejected</code>，从而触发 <code>catch</code>方法指定的回调函数。</p><h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h2><p>有时候，我们希望等到一组异步操作都结束了，不管每一个操作是成功还是失败，再进行下一步操作。但是，现有的 Promise 方法很难实现这个要求。</p><p><code>Promise.all()</code>方法只适合所有异步操作都成功的情况，如果有一个操作失败，就无法满足要求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urls = [url_1, url_2, url_3];</span><br><span class="line"><span class="keyword">const</span> requests = urls.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">fetch</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(requests);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有请求都成功。&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;至少一个请求失败，其他请求可能还没结束。&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例中，<code>Promise.all()</code>可以确定所有请求都成功了，但是只要有一个请求失败，它就会报错，而不管另外的请求是否结束。</p><p>为了解决这个问题，<a href="https://github.com/tc39/proposal-promise-allSettled">ES2020</a> 引入了 <code>Promise.allSettled()</code>方法，用来确定一组异步操作是否都结束了（不管成功或失败）。所以，它的名字叫做”Settled“，包含了”fulfilled“和”rejected“两种情况。</p><p><code>Promise.allSettled()</code>方法接受一个数组作为参数，数组的每个成员都是一个 Promise 对象，并返回一个新的 Promise 对象。只有等到参数数组的所有 Promise 对象都发生状态变更（不管是 <code>fulfilled</code>还是 <code>rejected</code>），返回的 Promise 对象才会发生状态变更。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/api-1&#x27;</span>),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/api-2&#x27;</span>),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/api-3&#x27;</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises);</span><br><span class="line"><span class="title function_">removeLoadingIndicator</span>();</span><br></pre></td></tr></table></figure><p>上面示例中，数组 <code>promises</code>包含了三个请求，只有等到这三个请求都结束了（不管请求成功还是失败），<code>removeLoadingIndicator()</code>才会执行。</p><p>该方法返回的新的 Promise 实例，一旦发生状态变更，状态总是 <code>fulfilled</code>，不会变成 <code>rejected</code>。状态变成 <code>fulfilled</code>后，它的回调函数会接收到一个数组作为参数，该数组的每个成员对应前面数组的每个 Promise 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resolved = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">const</span> rejected = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allSettledPromise = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([resolved, rejected]);</span><br><span class="line"></span><br><span class="line">allSettledPromise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">results</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    &#123; status: &#x27;fulfilled&#x27;, value: 42 &#125;,</span></span><br><span class="line"><span class="comment">//    &#123; status: &#x27;rejected&#x27;, reason: -1 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>Promise.allSettled()</code>的返回值 <code>allSettledPromise</code>，状态只可能变成 <code>fulfilled</code>。它的回调函数接收到的参数是数组 <code>results</code>。该数组的每个成员都是一个对象，对应传入 <code>Promise.allSettled()</code>的数组里面的两个 Promise 对象。</p><p><code>results</code>的每个成员是一个对象，对象的格式是固定的，对应异步操作的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步操作成功时</span></span><br><span class="line">&#123;<span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>, <span class="attr">value</span>: value&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步操作失败时</span></span><br><span class="line">&#123;<span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>, <span class="attr">reason</span>: reason&#125;</span><br></pre></td></tr></table></figure><p>成员对象的 <code>status</code>属性的值只可能是字符串 <code>fulfilled</code>或字符串 <code>rejected</code>，用来区分异步操作是成功还是失败。如果是成功（<code>fulfilled</code>），对象会有 <code>value</code>属性，如果是失败（<code>rejected</code>），会有 <code>reason</code>属性，对应两种状态时前面异步操作的返回值。</p><p>下面是返回值的用法例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [ <span class="title function_">fetch</span>(<span class="string">&#x27;index.html&#x27;</span>), <span class="title function_">fetch</span>(<span class="string">&#x27;https://does-not-exist/&#x27;</span>) ];</span><br><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤出成功的请求</span></span><br><span class="line"><span class="keyword">const</span> successfulPromises = results.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤出失败的请求，并输出原因</span></span><br><span class="line"><span class="keyword">const</span> errors = results</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">reason</span>);</span><br></pre></td></tr></table></figure><h2 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h2><p>ES2021 引入了<a href="https://github.com/tc39/proposal-promise-any"><code>Promise.any()</code>方法</a>。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;https://v8.dev/&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;home&#x27;</span>),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;https://v8.dev/blog&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;blog&#x27;</span>),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;https://v8.dev/docs&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;docs&#x27;</span>)</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">first</span>) =&gt;</span> &#123;  <span class="comment">// 只要有一个 fetch() 请求成功</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(first);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="comment">// 所有三个 fetch() 全部请求失败</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>只要参数实例有一个变成 <code>fulfilled</code>状态，包装实例就会变成 <code>fulfilled</code>状态；如果所有参数实例都变成 <code>rejected</code>状态，包装实例就会变成 <code>rejected</code>状态。</p><p><code>Promise.any()</code>跟 <code>Promise.race()</code>方法很像，只有一点不同，就是 <code>Promise.any()</code>不会因为某个 Promise 变成 <code>rejected</code>状态而结束，必须等到所有参数 Promise 变成 <code>rejected</code>状态才会结束。</p><p>下面是 <code>Promise()</code>与 <code>await</code>命令结合使用的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/endpoint-a&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;a&#x27;</span>),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/endpoint-b&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/endpoint-c&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;c&#x27;</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> first = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">any</span>(promises);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(first);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>Promise.any()</code>方法的参数数组包含三个 Promise 操作。其中只要有一个变成 <code>fulfilled</code>，<code>Promise.any()</code>返回的 Promise 对象就变成 <code>fulfilled</code>。如果所有三个操作都变成 <code>rejected</code>，那么 <code>await</code>命令就会抛出错误。</p><p><code>Promise.any()</code>抛出的错误是一个 AggregateError 实例（详见《对象的扩展》一章），这个 AggregateError 实例对象的 <code>errors</code>属性是一个数组，包含了所有成员的错误。</p><p>下面是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resolved = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">var</span> rejected = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> alsoRejected = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="title class_">Infinity</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([resolved, rejected, alsoRejected]).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 42</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([rejected, alsoRejected]).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">results</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results <span class="keyword">instanceof</span> <span class="title class_">AggregateError</span>); <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results.<span class="property">errors</span>); <span class="comment">// [-1, Infinity]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><p>有时需要将现有对象转为 Promise 对象，<code>Promise.resolve()</code>方法就起到这个作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>($.<span class="title function_">ajax</span>(<span class="string">&#x27;/whatever.json&#x27;</span>));</span><br></pre></td></tr></table></figure><p>上面代码将 jQuery 生成的 <code>deferred</code>对象，转为一个新的 Promise 对象。</p><p><code>Promise.resolve()</code>等价于下面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><p><code>Promise.resolve()</code>方法的参数分成四种情况。</p><p><strong>（1）参数是一个 Promise 实例</strong></p><p>如果参数是 Promise 实例，那么 <code>Promise.resolve</code>将不做任何修改、原封不动地返回这个实例。</p><p><strong>（2）参数是一个 <code>thenable</code>对象</strong></p><p><code>thenable</code>对象指的是具有 <code>then</code>方法的对象，比如下面这个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">  <span class="attr">then</span>: <span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Promise.resolve()</code>方法会将这个对象转为 Promise 对象，然后就立即执行 <code>thenable</code>对象的 <code>then()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">  <span class="attr">then</span>: <span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(thenable);</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);  <span class="comment">// 42</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>thenable</code>对象的 <code>then()</code>方法执行后，对象 <code>p1</code>的状态就变为 <code>resolved</code>，从而立即执行最后那个 <code>then()</code>方法指定的回调函数，输出42。</p><p><strong>（3）参数不是具有 <code>then()</code>方法的对象，或根本就不是对象</strong></p><p>如果参数是一个原始值，或者是一个不具有 <code>then()</code>方法的对象，则 <code>Promise.resolve()</code>方法返回一个新的 Promise 对象，状态为 <code>resolved</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><p>上面代码生成一个新的 Promise 对象的实例 <code>p</code>。由于字符串 <code>Hello</code>不属于异步操作（判断方法是字符串对象不具有 then 方法），返回 Promise 实例的状态从一生成就是 <code>resolved</code>，所以回调函数会立即执行。<code>Promise.resolve()</code>方法的参数，会同时传给回调函数。</p><p><strong>（4）不带有任何参数</strong></p><p><code>Promise.resolve()</code>方法允许调用时不带参数，直接返回一个 <code>resolved</code>状态的 Promise 对象。</p><p>所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用 <code>Promise.resolve()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码的变量 <code>p</code>就是一个 Promise 对象。</p><p>需要注意的是，立即 <code>resolve()</code>的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>setTimeout(fn, 0)</code>在下一轮“事件循环”开始时执行，<code>Promise.resolve()</code>在本轮“事件循环”结束时执行，<code>console.log(&#39;one&#39;)</code>则是立即执行，因此最先输出。</p><h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><p><code>Promise.reject(reason)</code>方法也会返回一个新的 Promise 实例，该实例的状态为 <code>rejected</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><p>上面代码生成一个 Promise 对象的实例 <code>p</code>，状态为 <code>rejected</code>，回调函数会立即执行。</p><p><code>Promise.reject()</code>方法的参数，会原封不动地作为 <code>reject</code>的理由，变成后续方法的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e === <span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>Promise.reject()</code>方法的参数是一个字符串，后面 <code>catch()</code>方法的参数 <code>e</code>就是这个字符串。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h3><p>我们可以将图片的加载写成一个 <code>Promise</code>，一旦加载完成，<code>Promise</code>的状态就发生变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadImage = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">onload</span>  = resolve;</span><br><span class="line">    image.<span class="property">onerror</span> = reject;</span><br><span class="line">    image.<span class="property">src</span> = path;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Generator-函数与-Promise-的结合"><a href="#Generator-函数与-Promise-的结合" class="headerlink" title="Generator 函数与 Promise 的结合"></a>Generator 函数与 Promise 的结合</h3><p>使用 Generator 函数管理流程，遇到异步操作的时候，通常返回一个 <code>Promise</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFoo</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> foo = <span class="keyword">yield</span> <span class="title function_">getFoo</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span> (generator) &#123;</span><br><span class="line">  <span class="keyword">const</span> it = <span class="title function_">generator</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">go</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">done</span>) <span class="keyword">return</span> result.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.<span class="property">value</span>.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">go</span>(it.<span class="title function_">next</span>(value));</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">go</span>(it.<span class="keyword">throw</span>(error));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">go</span>(it.<span class="title function_">next</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">run</span>(g);</span><br></pre></td></tr></table></figure><p>上面代码的 Generator 函数 <code>g</code>之中，有一个异步操作 <code>getFoo</code>，它返回的就是一个 <code>Promise</code>对象。函数 <code>run</code>用来处理这个 <code>Promise</code>对象，并调用下一个 <code>next</code>方法。</p><h2 id="Promise-try"><a href="#Promise-try" class="headerlink" title="Promise.try()"></a>Promise.try()</h2><p>实际开发中，经常遇到一种情况：不知道或者不想区分，函数 <code>f</code>是同步函数还是异步操作，但是想用 Promise 来处理它。因为这样就可以不管 <code>f</code>是否包含异步操作，都用 <code>then</code>方法指定下一步流程，用 <code>catch</code>方法处理 <code>f</code>抛出的错误。一般就会采用下面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(f)</span><br></pre></td></tr></table></figure><p>上面的写法有一个缺点，就是如果 <code>f</code>是同步函数，那么它会在本轮事件循环的末尾执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;now&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>);</span><br><span class="line"><span class="comment">// next</span></span><br><span class="line"><span class="comment">// now</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数 <code>f</code>是同步的，但是用 Promise 包装了以后，就变成异步执行了。</p><p>那么有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API 呢？回答是可以的，并且还有两种写法。第一种写法是用 <code>async</code>函数来写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;now&#x27;</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; <span class="title function_">f</span>())();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure><p>上面代码中，第二行是一个立即执行的匿名函数，会立即执行里面的 <code>async</code>函数，因此如果 <code>f</code>是同步的，就会得到同步的结果；如果 <code>f</code>是异步的，就可以用 <code>then</code>指定下一步，就像下面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; <span class="title function_">f</span>())()</span><br><span class="line">.<span class="title function_">then</span>(...)</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>async () =&gt; f()</code>会吃掉 <code>f()</code>抛出的错误。所以，如果想捕获错误，要使用 <code>promise.catch</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; <span class="title function_">f</span>())()</span><br><span class="line">.<span class="title function_">then</span>(...)</span><br><span class="line">.<span class="title function_">catch</span>(...)</span><br></pre></td></tr></table></figure><p>第二种写法是使用 <code>new Promise()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;now&#x27;</span>);</span><br><span class="line">(</span><br><span class="line">  <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(</span><br><span class="line">    <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="title function_">f</span>())</span><br><span class="line">  )</span><br><span class="line">)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure><p>上面代码也是使用立即执行的匿名函数，执行 <code>new Promise()</code>。这种情况下，同步函数也是同步执行的。</p><p>鉴于这是一个很常见的需求，所以现在有一个<a href="https://github.com/ljharb/proposal-promise-try">提案</a>，提供 <code>Promise.try</code>方法替代上面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;now&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">try</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure><p>事实上，<code>Promise.try</code>存在已久，Promise 库<a href="http://bluebirdjs.com/docs/api/promise.try.html"><code>Bluebird</code></a>、<a href="https://github.com/kriskowal/q/wiki/API-Reference#promisefcallargs"><code>Q</code></a>和<a href="https://github.com/cujojs/when/blob/master/docs/api.md#whentry"><code>when</code></a>，早就提供了这个方法。</p><p>由于 <code>Promise.try</code>为所有操作提供了统一的处理机制，所以如果想用 <code>then</code>方法管理流程，最好都用 <code>Promise.try</code>包装一下。这样有<a href="http://cryto.net/~joepie91/blog/2016/05/11/what-is-promise-try-and-why-does-it-matter/">许多好处</a>，其中一点就是可以更好地管理异常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUsername</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> database.<span class="property">users</span>.<span class="title function_">get</span>(&#123;<span class="attr">id</span>: userId&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> user.<span class="property">name</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>database.users.get()</code>返回一个 Promise 对象，如果抛出异步错误，可以用 <code>catch</code>方法捕获，就像下面这样写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">database.<span class="property">users</span>.<span class="title function_">get</span>(&#123;<span class="attr">id</span>: userId&#125;)</span><br><span class="line">.<span class="title function_">then</span>(...)</span><br><span class="line">.<span class="title function_">catch</span>(...)</span><br></pre></td></tr></table></figure><p>但是 <code>database.users.get()</code>可能还会抛出同步错误（比如数据库连接错误，具体要看实现方法），这时你就不得不用 <code>try...catch</code>去捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  database.<span class="property">users</span>.<span class="title function_">get</span>(&#123;<span class="attr">id</span>: userId&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(...)</span><br><span class="line">  .<span class="title function_">catch</span>(...)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这样的写法就很笨拙了，这时就可以统一用 <code>promise.catch()</code>捕获所有同步和异步的错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">try</span>(<span class="function">() =&gt;</span> database.<span class="property">users</span>.<span class="title function_">get</span>(&#123;<span class="attr">id</span>: userId&#125;))</span><br><span class="line">  .<span class="title function_">then</span>(...)</span><br><span class="line">  .<span class="title function_">catch</span>(...)</span><br></pre></td></tr></table></figure><p>事实上，<code>Promise.try</code>就是模拟 <code>try</code>代码块，就像 <code>promise.catch</code>模拟的是 <code>catch</code>代码块。</p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p>以上内容来源以及更多es6语法可以到下面这个网址查看，还是很详细的</p><p><a href="https://es6.ruanyifeng.com/#docs/promise">https://es6.ruanyifeng.com/#docs/promise</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的事件循环</title>
      <link href="/2019/04/21/study/js/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
      <url>/2019/04/21/study/js/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="js中的事件循环"><a href="#js中的事件循环" class="headerlink" title="js中的事件循环"></a>js中的事件循环</h2><p>首先，<code>JavaScript</code>是一门单线程的语言，意味着同一时间内只能做一件事，但是这并不意味着单线程就是阻塞，而实现单线程非阻塞的方法就是事件循环</p><p>在 <code>JavaScript</code>中，所有的任务都可以分为</p><ul><li>同步任务：立即执行的任务，同步任务一般会直接进入到主线程中执行</li><li>异步任务：异步执行的任务，比如 <code>ajax</code>网络请求，<code>setTimeout</code>定时函数等</li></ul><p>同步任务与异步任务的运行流程图如下：</p><p><img src="https://static.vue-js.com/61efbc20-7cb8-11eb-85f6-6fac77c0c9b3.png"></p><p>从上面我们可以看到，同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就事件循环</p><h2 id="宏微任务理解"><a href="#宏微任务理解" class="headerlink" title="宏微任务理解"></a>宏微任务理解</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res,ret</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">res</span>()</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;).<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">9</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"><span class="comment">/*  以上运行结果如下</span></span><br><span class="line"><span class="comment">* 2</span></span><br><span class="line"><span class="comment">* 5</span></span><br><span class="line"><span class="comment">* 3</span></span><br><span class="line"><span class="comment">* 1</span></span><br><span class="line"><span class="comment">* 7</span></span><br><span class="line"><span class="comment">* 9</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面代码中的运行顺序为，同步任务-&gt;执行微任务-&gt;执行宏任务-&gt;宏任务中的微任务。</span></span><br><span class="line"><span class="comment">解析：</span></span><br><span class="line"><span class="comment">js线程首先执行同步任务，也就是promise中的代码。此时因为promise还没有调用自身的方法，所以他并不是一个微任务。第一个就是2，之后就是5，此时同步任务执行完毕。开始从任务队列读取，并将任务推入主线程。这时候就开始走微任务，首先就是promise.then中的方法此时执行的是3，因为.then中的定时器也是一个宏任务，所有将定时器推到宏任务队列，此时微任务执行完毕，开始执行宏任务。首先打印的就是1，因为宏任务也有自己的微任务，这个时候就会等当前宏任务中的微任务执行完毕之后，再去执行下一个宏任务。所以此时打印的就是7。当前宏任务包括宏任务中的微任务执行完毕，继续执行下一个宏任务，也就是最后一个定时器，此时打印结果为9。然后就是上面的结果2、5、3、1、7、9。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器本地存储</title>
      <link href="/2019/03/02/study/js/js%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
      <url>/2019/03/02/study/js/js%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</span><br><span class="line"><span class="number">2.</span> 浏览器端通过 <span class="title class_">Window</span>.<span class="property">sessionStorage</span> 和 <span class="title class_">Window</span>.<span class="property">localStorage</span> 属性来实现本地存储机制。</span><br><span class="line"><span class="number">3.</span> 相关<span class="variable constant_">API</span>：</span><br><span class="line">   <span class="number">1.</span> <span class="string">``</span><span class="string">`xxxxxStorage.setItem(&#x27;key&#x27;, &#x27;value&#x27;);`</span><span class="string">``</span></span><br><span class="line">      该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</span><br><span class="line">   <span class="number">2.</span> <span class="string">``</span><span class="string">`xxxxxStorage.getItem(&#x27;person&#x27;);`</span><span class="string">``</span></span><br><span class="line">      该方法接受一个键名作为参数，返回键名对应的值。</span><br><span class="line">   <span class="number">3.</span> <span class="string">``</span><span class="string">`xxxxxStorage.removeItem(&#x27;key&#x27;);`</span><span class="string">``</span></span><br><span class="line">      该方法接受一个键名作为参数，并把该键名从存储中删除。</span><br><span class="line">   <span class="number">4.</span> <span class="string">``</span><span class="string">` xxxxxStorage.clear()`</span><span class="string">``</span></span><br><span class="line">      该方法会清空存储中的所有数据。</span><br><span class="line"><span class="number">4.</span> 备注：</span><br><span class="line">   <span class="number">1.</span> <span class="title class_">SessionStorage</span>存储的内容会随着浏览器窗口关闭而消失。</span><br><span class="line">   <span class="number">2.</span> <span class="title class_">LocalStorage</span>存储的内容，需要手动清除才会消失。</span><br><span class="line">   <span class="number">3.</span> <span class="string">``</span><span class="string">`xxxxxStorage.getItem(xxx)`</span><span class="string">``</span>如果xxx对应的value获取不到，那么getItem的返回值是<span class="literal">null</span>。</span><br><span class="line">   <span class="number">4.</span> <span class="string">``</span><span class="string">`JSON.parse(null)`</span><span class="string">``</span>的结果依然是<span class="literal">null</span>。&lt;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由</title>
      <link href="/2018/08/25/study/vue/12-vue%E8%B7%AF%E7%94%B1/"/>
      <url>/2018/08/25/study/vue/12-vue%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在 <code>views</code>文件夹，一般组件通常存放在 <code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的 <code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的 <code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><pre><code>作用：让路由组件更方便的收到参数</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为 <code>push</code>和 <code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为 <code>push</code></li><li>如何开启 <code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助 <code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;zt&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;zt&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex-persistedstate</title>
      <link href="/2018/08/20/study/vue/11-vuex%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2018/08/20/study/vue/11-vuex%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="vuex-persistedstate"><a href="#vuex-persistedstate" class="headerlink" title="vuex-persistedstate"></a>vuex-persistedstate</h1><p><strong>持久化原理</strong>：结合本地存储做到数据状态持久化，使页面刷新后数据不会初始化为默认状态</p><h2 id="Vuex为什么要持久化"><a href="#Vuex为什么要持久化" class="headerlink" title="Vuex为什么要持久化?"></a>Vuex为什么要持久化?</h2><blockquote><p>原因：因为Vuex是基于内存，存在内存里面的，刷新网页之后就没有了，不会持久化储存</p></blockquote><h2 id="1、安装插件-vuex-persistedstate"><a href="#1、安装插件-vuex-persistedstate" class="headerlink" title="1、安装插件 vuex-persistedstate"></a>1、安装插件 vuex-persistedstate</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex-persistedstate --save</span><br></pre></td></tr></table></figure><h2 id="2、vuex-persistedstate默认存储到localStorage"><a href="#2、vuex-persistedstate默认存储到localStorage" class="headerlink" title="2、vuex-persistedstate默认存储到localStorage"></a>2、vuex-persistedstate默认存储到localStorage</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import createPersistedState from &#x27;vuex-persistedstate&#x27;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line">export default new Vuex.store(&#123;</span><br><span class="line">    //...</span><br><span class="line">    plugins:[createPersistedState] // 注意</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3、使用vuex-persistedstate自定义存储方式"><a href="#3、使用vuex-persistedstate自定义存储方式" class="headerlink" title="3、使用vuex-persistedstate自定义存储方式"></a>3、使用vuex-persistedstate自定义存储方式</h2><h3 id="1、存储到sessionStorage"><a href="#1、存储到sessionStorage" class="headerlink" title="1、存储到sessionStorage"></a>1、存储到sessionStorage</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import createPersistedState from &#x27;vuex-persistedstate&#x27;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line">export default new Vuex.store(&#123;</span><br><span class="line">    //...</span><br><span class="line">    plugins:[</span><br><span class="line">        createPersistedState(&#123;</span><br><span class="line">            storage:window.sessionStorage // 注意</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2、存储到cookie"><a href="#2、存储到cookie" class="headerlink" title="2、存储到cookie"></a>2、存储到cookie</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import persistedState from &#x27;vuex-persistedstate&#x27;</span><br><span class="line">import * as Cookies from &#x27;js-cookie&#x27;</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  // ...</span><br><span class="line">  plugins: [</span><br><span class="line">    persistedState(&#123; // 注意</span><br><span class="line">      storage: &#123;</span><br><span class="line">        getItem: key =&gt; Cookies.get(key),</span><br><span class="line">        setItem: (key, value) =&gt; Cookies.set(key, value, &#123; expires: 7 &#125;),</span><br><span class="line">        removeItem: key =&gt; Cookies.remove(key)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4、部分数据持久化"><a href="#4、部分数据持久化" class="headerlink" title="4、部分数据持久化"></a>4、部分数据持久化</h2><h3 id="1、vuex-persistedstate提供有一个reducer函数，可以自定义存储Key"><a href="#1、vuex-persistedstate提供有一个reducer函数，可以自定义存储Key" class="headerlink" title="1、vuex-persistedstate提供有一个reducer函数，可以自定义存储Key"></a>1、vuex-persistedstate提供有一个reducer函数，可以自定义存储Key</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 实现持久化部分数据，被持久化的数据为：manage模块的isVisitor、login模块的time</span><br><span class="line"></span><br><span class="line">import createPersistedState from &#x27;vuex-persistedstate&#x27;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line">export default new Vuex.store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        manage,</span><br><span class="line">        login,</span><br><span class="line">        userInfo,</span><br><span class="line">        //...</span><br><span class="line">    &#125;,</span><br><span class="line">    strict:debug,</span><br><span class="line">    plugins:[</span><br><span class="line">        createPersistedState(&#123;</span><br><span class="line">            reducer(val)&#123; // 注意: 指定需要持久化的数据</span><br><span class="line">                return &#123;</span><br><span class="line">                    isVisitor:val.manage.isVisitor,</span><br><span class="line">                    time:val.login.time</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2、使用paths参数【推荐：使用更为简单】"><a href="#2、使用paths参数【推荐：使用更为简单】" class="headerlink" title="2、使用paths参数【推荐：使用更为简单】"></a>2、使用paths参数【推荐：使用更为简单】</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 实现持久化部分数据，被持久化的数据为：manage模块的isAdmin、login模块的token</span><br><span class="line"></span><br><span class="line">import createPersistedState from &#x27;vuex-persistedstate&#x27;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line">const PERSIST_PATHS = [&#x27;manage.isAdmin&#x27;,&#x27;login.token&#x27;]; // 注意</span><br><span class="line">export default new Vuex.store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        manage,</span><br><span class="line">        login,</span><br><span class="line">        userInfo,</span><br><span class="line">        //...</span><br><span class="line">    &#125;,</span><br><span class="line">    strict:debug,</span><br><span class="line">    plugins:[</span><br><span class="line">        createPersistedState(&#123;</span><br><span class="line">            paths:PERSIST_PATHS // 注意</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex</title>
      <link href="/2018/07/18/study/vue/10-vuex/"/>
      <url>/2018/07/18/study/vue/10-vuex/</url>
      
        <content type="html"><![CDATA[<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><pre><code>在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</code></pre><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><pre><code>多个组件需要共享数据时</code></pre><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在 <code>main.js</code>中创建vm时传入 <code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置 <code>actions</code>、配置 <code>mutations</code>，操作文件 <code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写 <code>dispatch</code>，直接编写 <code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在 <code>store.js</code>中追加 <code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><code>&lt;strong&gt;</code>mapState方法：<code>&lt;/strong&gt;</code>用于帮助我们映射 <code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;strong&gt;</code>mapGetters方法：<code>&lt;/strong&gt;</code>用于帮助我们映射 <code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;strong&gt;</code>mapActions方法：<code>&lt;/strong&gt;</code>用于帮助我们生成与 <code>actions</code>对话的方法，即：包含 <code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;strong&gt;</code>mapMutations方法：<code>&lt;/strong&gt;</code>用于帮助我们生成与 <code>mutations</code>对话的方法，即：包含 <code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改 <code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue脚手架</title>
      <link href="/2018/07/10/study/vue/9-vue%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2018/07/10/study/vue/9-vue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="vue脚手架"><a href="#vue脚手架" class="headerlink" title="vue脚手架"></a>vue脚手架</h2><p>创建vue脚手架 <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p><p>首先需要安装node，才可以使用npm命令安装脚手架</p><p>npm是node的包管理工具</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">脚手架--vue-cli （vue的开发环境）      command line interface 命令行接口工具</span><br><span class="line"></span><br><span class="line">第一步 : (仅第一次执行)    以后就不用执行了            </span><br><span class="line">      全局安装  @vue/cli</span><br><span class="line"></span><br><span class="line">打开cmd全局安装，执行下面的命令</span><br><span class="line">     npm install -g @vue/cli  </span><br><span class="line">    然后建议重启cmd</span><br><span class="line"></span><br><span class="line">    vue -V测试脚手架是否安装成功</span><br><span class="line"></span><br><span class="line">第二步 ： 切换到你要创建项目的目录，然后使用命令创建项目  项目名尽可能回避主流库名字 比如jQuery  dayjs vue等</span><br><span class="line">     vue create xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>---------</span><br><span class="line"></span><br><span class="line"> 是否安装淘宝镜像(都可以)  选n 不安装</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>--</span><br><span class="line"></span><br><span class="line">这里建议选择第三个选项，自定义风格模式</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>--</span><br><span class="line">加下来等就可以，如果卡掉了，就配置一下npm的淘宝镜像   电脑太卡也会安装的很慢</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三步 ：</span><br><span class="line">     关掉当前的cmd页面</span><br><span class="line">     cmd 进入到刚才创建的项目文件夹，然后运行下面的命令</span><br><span class="line">     npm run serve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">浏览器运行  <span class="keyword">http</span>：//localhost:<span class="number">8080</span></span><br><span class="line">还有一种方法就是在cmd窗口输入 进入指定目录 vue ui 这个是vue的可视化创建项目</span><br><span class="line"></span><br><span class="line">看到界面表示项目创建成功</span><br></pre></td></tr></table></figure><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre><code>在vue.config.js中添加如下配置：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre><code>编写vue.config.js配置具体代理规则：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用 <code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定 <code>key</code>值。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件功能与通信</title>
      <link href="/2018/07/08/study/vue/8-vue%E7%BB%84%E4%BB%B6%E5%8A%9F%E8%83%BD%E4%B8%8E%E9%80%9A%E4%BF%A1/"/>
      <url>/2018/07/08/study/vue/8-vue%E7%BB%84%E4%BB%B6%E5%8A%9F%E8%83%BD%E4%B8%8E%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="vue组件功能和通信"><a href="#vue组件功能和通信" class="headerlink" title="vue组件功能和通信"></a>vue组件功能和通信</h1><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1. 功能：让组件接收外部传过来的数据</span><br><span class="line"></span><br><span class="line">2. 传递数据：父组件使用子组件Demo时，在子组件上定义属性  name 即可向子组件传递name数据  &lt;Demo name=&quot;xxx&quot;/&gt;</span><br><span class="line"></span><br><span class="line">3. 子组件接收数据：</span><br><span class="line"></span><br><span class="line">    1. 第一种方式（只接收）：props:[&#x27;name&#x27;] </span><br><span class="line"></span><br><span class="line">    2. 第二种方式（限制类型）：props:&#123;name:String&#125;</span><br><span class="line"></span><br><span class="line">    3. 第三种方式（限制类型、限制必要性、指定默认值）：</span><br><span class="line"></span><br><span class="line">       js</span><br><span class="line">        props:&#123;</span><br><span class="line">            name:&#123;</span><br><span class="line">            type:String, //类型</span><br><span class="line">            required:true, //必要性</span><br><span class="line">            default:&#x27;张三&#x27; //默认值</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    注意：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到当前组件的data中一份，然后去修改data中的数据。</span><br><span class="line"></span><br><span class="line">4、子组件向父组件传递数据</span><br><span class="line">方式一：</span><br><span class="line">     父组件定义方法，使用子组件时通过动态属性将父组件的方法传递给子组件</span><br><span class="line">     子组件使用props接收父组件传递的方法</span><br><span class="line">     子组件通过事件 在合适的位置调用这个方法，并传递参数，将子组件的数据传递给父组件</span><br><span class="line">方式二 ：</span><br><span class="line">           在父组件上 通过  @或v-on的方式添加自定义事件</span><br><span class="line">           &lt;Scholl @myevent=&quot;demo()&quot;/&gt;</span><br><span class="line">          子组件的事件调用中使用this.$emit(&quot;myevent&quot;,参数) 向父组件传递数据</span><br><span class="line">        </span><br><span class="line">父组件向子组件传递数据 ： 利用props接收  向下传递</span><br><span class="line">子组件向父组件传递数据 ： 利用事件向上传递</span><br></pre></td></tr></table></figure><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>局部混入</span><br><span class="line"><span class="comment">// 定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">hello</span>()</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello from mixin!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Component</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> <span class="title class_">Component</span>() <span class="comment">// =&gt; &quot;hello from mixin!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>全局混入</span><br><span class="line">混入也可以进行全局注册。使用时格外小心！一旦使用全局混入，它将影响每一个之后创建的 <span class="title class_">Vue</span> 实例。使用恰当时，这可以用来为自定义选项注入处理逻辑。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为自定义的选项 &#x27;myOption&#x27; 注入一个处理器。</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> myOption = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">myOption</span></span><br><span class="line">    <span class="keyword">if</span> (myOption) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(myOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">myOption</span>: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; &quot;hello!&quot;</span></span><br></pre></td></tr></table></figure><p>使用混入：</p><pre><code>全局混入：``Vue.mixin(xxx)``局部混入：``mixins:[&#39;xxx&#39;]    ``</code></pre></li></ol><h2 id="directive自定义指令"><a href="#directive自定义指令" class="headerlink" title="directive自定义指令"></a>directive自定义指令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.<span class="title function_">focus</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想注册局部指令，组件中也接受一个 directives 的选项：</span></span><br><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line">  <span class="attr">focus</span>: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">      el.<span class="title function_">focus</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后你可以在模板中任何元素上使用新的 v-focus property，如下：</span></span><br><span class="line"></span><br><span class="line">&lt;input v-focus&gt;</span><br></pre></td></tr></table></figure><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li><code>update</code>：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li></ul><p>我们会在<a href="https://v2.cn.vuejs.org/v2/guide/render-function.html#%E8%99%9A%E6%8B%9F-DOM">稍后</a>讨论<a href="https://v2.cn.vuejs.org/v2/guide/render-function.html">渲染函数</a>时介绍更多 VNodes 的细节。</p><ul><li><code>componentUpdated</code>：指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用。</li></ul><h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3><p>指令钩子函数会被传入以下参数：</p><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</li><li>binding：一个对象，包含以下 property：<ul><li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li><li><code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 <code>2</code>。</li><li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，表达式为 <code>&quot;1 + 1&quot;</code>。</li><li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123; foo: true, bar: true &#125;</code>。</li></ul></li><li><code>vnode</code>：Vue 编译生成的虚拟节点。移步 <a href="https://v2.cn.vuejs.org/v2/api/#VNode-%E6%8E%A5%E5%8F%A3">VNode API</a> 来了解更多详情。</li><li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset来进行。</p><h3 id="官方案例"><a href="#官方案例" class="headerlink" title="官方案例"></a>官方案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">这是一个使用了这些 property 的自定义钩子样例：</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;hook-arguments-example&quot;</span> v-<span class="attr">demo</span>:foo.<span class="property">a</span>.<span class="property">b</span>=<span class="string">&quot;message&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;demo&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">bind</span>: <span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="title class_">JSON</span>.<span class="property">stringify</span></span><br><span class="line">    el.<span class="property">innerHTML</span> =</span><br><span class="line">      <span class="string">&#x27;name: &#x27;</span>       + <span class="title function_">s</span>(binding.<span class="property">name</span>) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;value: &#x27;</span>      + <span class="title function_">s</span>(binding.<span class="property">value</span>) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;expression: &#x27;</span> + <span class="title function_">s</span>(binding.<span class="property">expression</span>) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;argument: &#x27;</span>   + <span class="title function_">s</span>(binding.<span class="property">arg</span>) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;modifiers: &#x27;</span>  + <span class="title function_">s</span>(binding.<span class="property">modifiers</span>) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;vnode keys: &#x27;</span> + <span class="title class_">Object</span>.<span class="title function_">keys</span>(vnode).<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#hook-arguments-example&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  name: &quot;demo&quot;</span></span><br><span class="line"><span class="comment">*  value: &quot;hello!&quot;</span></span><br><span class="line"><span class="comment">*  expression: &quot;message&quot;</span></span><br><span class="line"><span class="comment">*  argument: &quot;foo&quot;</span></span><br><span class="line"><span class="comment">*  modifiers: &#123;&quot;a&quot;:true,&quot;b&quot;:true&#125;</span></span><br><span class="line"><span class="comment">*  vnode keys: tag, data, children, text, elm, ns, context, fnContext, fnOptions, </span></span><br><span class="line"><span class="comment">*  fnScopeId, key, componentOptions, componentInstance, parent, raw, isStatic, </span></span><br><span class="line"><span class="comment">*  isRootInsert, isComment, isCloned, isOnce, asyncFactory, asyncMeta, isAsyncPlaceholder</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">对象字面量</span><br><span class="line"></span><br><span class="line">如果指令需要多个值，可以传入一个 <span class="title class_">JavaScript</span> 对象字面量。记住，指令函数能够接受所有合法的 <span class="title class_">JavaScript</span> 表达式。</span><br><span class="line">&lt;div v-demo=<span class="string">&quot;&#123; color: &#x27;white&#x27;, text: &#x27;hello!&#x27; &#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;demo&#x27;</span>, <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(binding.<span class="property">value</span>.<span class="property">color</span>) <span class="comment">// =&gt; &quot;white&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(binding.<span class="property">value</span>.<span class="property">text</span>)  <span class="comment">// =&gt; &quot;hello!&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Plugin插件"><a href="#Plugin插件" class="headerlink" title="Plugin插件"></a>Plugin插件</h2><p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p><ol><li>添加全局方法或者 property。如：<a href="https://github.com/karol-f/vue-custom-element">vue-custom-element</a></li><li>添加全局资源：指令/过滤器/过渡等。如 <a href="https://github.com/vuejs/vue-touch">vue-touch</a></li><li>通过全局混入来添加一些组件选项。如 <a href="https://github.com/vuejs/vue-router">vue-router</a></li><li>添加 Vue 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现。</li><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 <a href="https://github.com/vuejs/vue-router">vue-router</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">通过全局方法 <span class="title class_">Vue</span>.<span class="title function_">use</span>() 使用插件。它需要在你调用 <span class="keyword">new</span> <span class="title class_">Vue</span>() 启动应用之前完成：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 `MyPlugin.install(Vue)`</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MyPlugin</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// ...组件选项</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">也可以传入一个可选的选项对象：</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MyPlugin</span>, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">use</span> 会自动阻止多次注册相同插件，届时即使多次调用也只会注册一次该插件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">js</span> 的插件应该暴露一个 install 方法。这个方法的第一个参数是 <span class="title class_">Vue</span> 构造器，第二个参数是一个可选的选项对象：</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPlugin</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">myGlobalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params">methodOptions</span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<code>&lt;span style=&quot;color:red&quot;&gt;</code>任意组件间通信。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<code>&lt;span style=&quot;color:red&quot;&gt;</code>回调留在A组件自身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<code>&lt;span style=&quot;color:red&quot;&gt;</code>当前组件所用到的事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<code>&lt;span style=&quot;color:red&quot;&gt;</code>任意组件间通信。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<code>&lt;span style=&quot;color:red&quot;&gt;</code>回调留在A组件自身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用 <code>PubSub.unsubscribe(pid)</code>去<code>&lt;span style=&quot;color:red&quot;&gt;</code>取消订阅。</p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <code>&lt;strong style=&quot;color:red&quot;&gt;</code>父组件 ===&gt; 子组件<code>&lt;/strong&gt;</code> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<code>&lt;span style=&quot;color:red&quot;&gt;</code>数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :row=&quot;row&quot; :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                      row: &#123; &quot;date&quot;: &quot;2016-05-02&quot;, &quot;name&quot;: &quot;王小虎&quot;,                     &quot;address&quot;: &quot;上海市普陀区金沙江路 1518 弄&quot;, &quot;sex&quot;: 1 &#125;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件</title>
      <link href="/2018/07/01/study/vue/7-vue%E7%BB%84%E4%BB%B6/"/>
      <url>/2018/07/01/study/vue/7-vue%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="vue中的组件"><a href="#vue中的组件" class="headerlink" title="vue中的组件"></a>vue中的组件</h1><h3 id="1-组件"><a href="#1-组件" class="headerlink" title="1.组件"></a>1.组件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">用来实现局部特定的功能效果的代码集合</span><br><span class="line">作用：复用编码  简化项目编码  提高运行效率</span><br><span class="line">一个组件一般由三部分组成template(视图模板)、script(vue方法属性等)、style(css样式)</span><br><span class="line">template: 写一些html代码</span><br><span class="line">script:   写一些vue的语法、方法、属性等</span><br><span class="line">style:   写一些css样式，需要添加scoped来设置单独样式，添加之后样式只在当前组件内部生效</span><br></pre></td></tr></table></figure><h3 id="2-组件分类-："><a href="#2-组件分类-：" class="headerlink" title="2.组件分类 ："></a>2.组件分类 ：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">非单文件组件和单文件组件</span><br><span class="line"></span><br><span class="line">非单文件组件:一个文件中包含n个组件</span><br><span class="line"></span><br><span class="line">单文件组件:一个文件中只包含1个组件</span><br></pre></td></tr></table></figure><h3 id="3-创建组件的基本格式"><a href="#3-创建组件的基本格式" class="headerlink" title="3.创建组件的基本格式"></a>3.创建组件的基本格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建组件的基本格式:使用Vue.extend创建组件实例，并在父级实例中注册该组件</span><br><span class="line"></span><br><span class="line">组件的基本格式:与vm实例类似，但是不能有el，因为最终所有的组件都要被一个vm管理，有vm决定服务于哪个容器</span><br><span class="line">并且在组件中data只能是一个函数 ，这样才能保证每次使用该组件时获取的数据都是data中的原数据，否则当我们在一个页面中修改了data中的数据时，其他使用了该组件的页面中的数据也会相应改变，会造成数据混乱</span><br></pre></td></tr></table></figure><h3 id="4-使用组件的步骤"><a href="#4-使用组件的步骤" class="headerlink" title="4.使用组件的步骤"></a>4.使用组件的步骤</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Vue中使用组件的三大步骤：</span></span><br><span class="line"><span class="comment">        一、定义组件(创建组件)</span></span><br><span class="line"><span class="comment">        二、注册组件</span></span><br><span class="line"><span class="comment">        三、使用组件(写组件标签)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一、如何定义一个组件？</span></span><br><span class="line"><span class="comment">      使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；</span></span><br><span class="line"><span class="comment">      区别如下：</span></span><br><span class="line"><span class="comment">            1.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</span></span><br><span class="line"><span class="comment">            2.data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。</span></span><br><span class="line"><span class="comment">            注意：使用template可以配置组件结构--html代码。</span></span><br><span class="line"><span class="comment">          </span></span><br><span class="line"><span class="comment">二、如何注册组件？</span></span><br><span class="line"><span class="comment">      1.局部注册：靠new Vue的时候传入components选项</span></span><br><span class="line"><span class="comment">      2.全局注册：靠Vue.component(&#x27;组件名&#x27;,组件)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、编写（使用）组件标签：</span></span><br><span class="line"><span class="comment">       &lt;Hello&gt;&lt;/Hello&gt;  闭合标签</span></span><br><span class="line"><span class="comment">       &lt;Hello /&gt;   单标签（一般在脚手架中使用）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-1非单文件组件"><a href="#4-1非单文件组件" class="headerlink" title="4.1非单文件组件"></a>4.1非单文件组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第三步：使用组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">navbar</span>&gt;</span><span class="tag">&lt;/<span class="name">navbar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footbar</span>&gt;</span><span class="tag">&lt;/<span class="name">footbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            第一步 ： 定义组件  </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                组件名称 = Vue.extend(&#123;  &#125;)  或者  组件名称 = &#123;  &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            第二步 ： 注册组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                局部注册    components   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                全局注册    Vue.component()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            第三步 ： 使用组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                双标签 &lt;组件&gt;&lt;/组件&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                单标签 &lt;组件/&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//第一步 ： 定义一个组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> navbar = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// el : &quot;&quot; 组件中没有el属性，组件的使用是由vm实例对象决定的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//template属性表示组件数据要展示的视图界面 ， 要求必须有一个根标签</span></span></span><br><span class="line"><span class="language-javascript">            template : <span class="string">`   </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                            &lt;h1&gt;&#123;&#123;one&#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                            &lt;h1&gt;&#123;&#123;two&#125;&#125;&lt;/h1&gt; </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                            &lt;button @click=&quot;clickHandler&quot;&gt;获取信息&lt;/button&gt;   </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        `</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>)&#123;  <span class="comment">//data数据使用函数式的写法 </span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    one : <span class="string">&quot;首页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    two : <span class="string">&quot;新闻页&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            methods : &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">clickHandler</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>( <span class="variable language_">this</span>.<span class="property">two</span> )</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//定义组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> footbar = &#123;</span></span><br><span class="line"><span class="language-javascript">            template : <span class="string">&quot;&lt;div&gt;这是底部&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;footbar&quot;</span>,footbar)  <span class="comment">// 全局注册组件</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">              </span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            components : &#123; <span class="comment">//局部注册组件</span></span></span><br><span class="line"><span class="language-javascript">                navbar,</span></span><br><span class="line"><span class="language-javascript">                footbar</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2单文件组件"><a href="#4-2单文件组件" class="headerlink" title="4.2单文件组件"></a>4.2单文件组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;医院名称: &#123;&#123;name&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name : &quot;Hospital&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name : &quot;儿童医院&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="5-需要注意的问题"><a href="#5-需要注意的问题" class="headerlink" title="5.需要注意的问题"></a>5.需要注意的问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.关于组件名:</span><br><span class="line">       一个单词组成：</span><br><span class="line">       第一种写法(首字母小写)：Hello</span><br><span class="line">       第二种写法(首字母大写)：Hello</span><br><span class="line">       多个单词组成：</span><br><span class="line">              第一种写法(kebab-case命名)：my-Hello</span><br><span class="line">              第二种写法(CamelCase命名)：MyHello (需要Vue脚手架支持)</span><br><span class="line">              注意：</span><br><span class="line">                    (1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</span><br><span class="line">                    (2).可以使用name配置项指定组件在开发者工具中呈现的名字。</span><br><span class="line">2.关于组件标签:</span><br><span class="line">        第一种写法：&lt;Hello&gt;&lt;/Hello&gt;</span><br><span class="line">        第二种写法：&lt;Hello/&gt;</span><br><span class="line">        注意：不用使用脚手架时，&lt;Hello/&gt;会导致后续组件不能渲染。</span><br><span class="line"></span><br><span class="line">3.一个简写方式：</span><br><span class="line">        const Hello = Vue.extend(options) </span><br><span class="line">        可简写为：</span><br><span class="line">        const Hello = options  </span><br><span class="line">        也就是说Vue.extend()是可用省略的</span><br></pre></td></tr></table></figure><h3 id="6-组件的嵌套"><a href="#6-组件的嵌套" class="headerlink" title="6.组件的嵌套"></a>6.组件的嵌套</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">--  一个组件的内部可用嵌套另一个组件</span></span><br><span class="line"><span class="comment">--  一般app组件管理所有的组件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Hello</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        let Person = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template : `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名:</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    name : &quot;张三&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        let Hello = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template : `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello，World<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            <span class="tag">&lt;<span class="name">Person</span>&gt;</span><span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                       `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            components : &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                Person</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        let vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            el : &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            components : &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                Person</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue生命周期</title>
      <link href="/2018/06/24/study/vue/6-vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2018/06/24/study/vue/6-vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">生命周期：</span><br><span class="line">      1.又名：生命周期回调函数、生命周期函数、生命周期钩子。</span><br><span class="line">      2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</span><br><span class="line">      3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</span><br><span class="line">      4.生命周期函数中的this指向是vm 或 组件实例对象。</span><br><span class="line">钩子函数</span><br><span class="line">1.beforeCreate  无法通过vm访问到data中的数据  methods中的方法</span><br><span class="line">2.created 可以通过vm访问到data中的数据、methods中配置的方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.beforeMount 页面呈现的是未经vue编译的dom结构，所有对dom的操作，最终都无效</span><br><span class="line">4.mounted </span><br><span class="line"> 此时 页面中呈现的是经过vue编译的dom，对dom的操作均有效（尽可能不在此处操作dom）</span><br><span class="line">     至此初始化过程结束，一般在此进行：开启定时器、发送网络请求、订阅消息、绑定自定义事件等初始化操作</span><br><span class="line">5.beforeUpdate     此时 数据是新的，但页面是旧的，即 ： 页面尚未和数据保持同步</span><br><span class="line">6.updated  此时 ： 数据是新的、页面也是新的 ，即页面和数据保持同步期望缓存页面被销毁，就会调用</span><br><span class="line">  $destroy()方法</span><br><span class="line">7.beforeDestroy </span><br><span class="line">此时：</span><br><span class="line">     vm中所有的data、methods、指令等等，都处于可用状态，马上要执行销毁过程</span><br><span class="line">     一般在此阶段 ： 关闭定时器、取消订阅消息、解绑自定义事件等首尾工作</span><br><span class="line">8.destroyed 没有也可以  可以忽略的一个钩子函数</span><br><span class="line">常用的生命周期钩子：</span><br><span class="line">    1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</span><br><span class="line">    2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</span><br><span class="line">关于销毁Vue实例</span><br><span class="line">    1.销毁后借助Vue开发者工具看不到任何信息。</span><br><span class="line">    2.销毁后自定义事件会失效，但原生DOM事件依然有效。</span><br><span class="line">    3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</span><br></pre></td></tr></table></figure><h2 id="vue的网络请求数据"><a href="#vue的网络请求数据" class="headerlink" title="vue的网络请求数据"></a>vue的网络请求数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>fetch</span><br><span class="line">fetch方法类似于ajax，从服务器请求数据，vue中使用$.ajax成本太高  用vue中的fetch方法实现</span><br><span class="line">使用方法 :</span><br><span class="line"><span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    res为服务器返回的结果</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>axios</span><br><span class="line"><span class="title class_">Axios</span> 是一个基于 promise 的 <span class="variable constant_">HTTP</span> 库，可以用在浏览器和 node.<span class="property">js</span> 中。</span><br><span class="line">使用前，需要引入一个axios库 </span><br><span class="line">get请求</span><br><span class="line">axios.<span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    res为服务器返回的结果</span><br><span class="line">&#125;)</span><br><span class="line">post请求 : </span><br><span class="line">         <span class="comment">// URLSearchParams 用来解决post的传值问题， 多个键值对 ， 多个append方法</span></span><br><span class="line">         <span class="keyword">var</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">         params.<span class="title function_">append</span>(<span class="string">&#x27;键&#x27;</span>, 值);</span><br><span class="line">         <span class="title function_">axios</span>(&#123;</span><br><span class="line">           <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">           <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">           <span class="attr">data</span>:params</span><br><span class="line">           &#125;).<span class="title function_">then</span>( <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">              <span class="comment">// res为服务器返回的结果</span></span><br><span class="line">              &#125;);</span><br><span class="line">配合<span class="keyword">async</span>、<span class="keyword">await</span>写法：</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(url)</span><br><span class="line">            <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(url,参数) <span class="comment">//参数为对象形式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue中created与mounted请求数据的区别"><a href="#Vue中created与mounted请求数据的区别" class="headerlink" title="Vue中created与mounted请求数据的区别"></a>Vue中created与mounted请求数据的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">首先，created() 和 mounted() 都可以访问原型上的 data 和 props </span><br><span class="line"></span><br><span class="line">created() 和 mounted() 之间的根本区别在于访问DOM，在 created()中返回 null，在 mounted() 中返回 DOM元素</span><br><span class="line"></span><br><span class="line">因此，任何 DOM 操作，甚至使用方法获取 DOM 元素结构将无法在 created() 中使用。因此根据这点区别created() 非常适合调用 API，而 mounted() 非常适合在 DOM 元素完全加载后执行任何操作。</span><br></pre></td></tr></table></figure><h2 id="vue生命周期流程图"><a href="#vue生命周期流程图" class="headerlink" title="vue生命周期流程图"></a>vue生命周期流程图</h2><p><img src="/../../image/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/1676516002473.png" alt="1676516002473"></p>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue配置属性</title>
      <link href="/2018/06/23/study/vue/5-vue%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7/"/>
      <url>/2018/06/23/study/vue/5-vue%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-Methods方法事件"><a href="#vue-Methods方法事件" class="headerlink" title="vue-Methods方法事件"></a>vue-Methods方法事件</h2><p>vue中方法或事件处理程序的绑定，绑定的事件或者方法一般都在这里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-on 动态为元素绑定事件指令 v-on:事件  简写 : @ --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件处理程序调用时，可以不加括号，缺陷 : 无法传递用户自定义参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;handleClick1&quot;</span>&gt;</span>按钮一<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件处理程序调用时，后面加括号可以传递用户自定义参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;handleClick2(12)&quot;</span>&gt;</span>按钮二<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-on: 可以简写成@  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick3&quot;</span>&gt;</span>按钮三<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">              </span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            methods : &#123; <span class="comment">//方法或事件处理程序的绑定</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleClick1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;按钮一被点击&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleClick2</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;按纽二被点击&quot;</span>+msg)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleClick3</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;haha&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue-Computed计算属性"><a href="#vue-Computed计算属性" class="headerlink" title="vue-Computed计算属性"></a>vue-Computed计算属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--计算属性关键词: computed。</span></span><br><span class="line"><span class="comment">可以使用 methods 来替代 computed，效果上两个都是一样的，</span></span><br><span class="line"><span class="comment">但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。</span></span><br><span class="line"><span class="comment">而使用 methods ，在重新渲染的时候，函数总会重新调用执行。</span></span><br><span class="line"><span class="comment">可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插值中完成字符串反转 --&gt;</span></span><br><span class="line">        &#123;&#123;str.split(&quot;&quot;).reverse().join(&quot;&quot;)&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插值表达中只要结果 --&gt;</span></span><br><span class="line">        &#123;&#123; getReverse() &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; getReverse() &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; getReverse() &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 访问计算属性 --&gt;</span></span><br><span class="line">        &#123;&#123; myReverse &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; myReverse &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; myReverse &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">str</span>:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            methods : &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">getReverse</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods中方法的调用&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">str</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            filters : &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//可以放在过滤器中完成字符串的反转</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            computed : &#123; <span class="comment">//计算属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//计算属性 : 通过操作得到新的结果</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//myReverse 表示一个计算属性的名称</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//计算属性return后面的结果就是属性值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//计算属性被执行一次后，如果属性值没有发生任何变化，后面计算属性获取值时，会直接从缓存中获取数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//方法被调用几次，就会重新执行，没有缓存</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">myReverse</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;计算属性的调用&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">str</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue-filters过滤器"><a href="#vue-filters过滤器" class="headerlink" title="vue-filters过滤器"></a>vue-filters过滤器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和v-bind表达式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">过滤器：</span></span><br><span class="line"><span class="comment">        定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</span></span><br><span class="line"><span class="comment">        语法：</span></span><br><span class="line"><span class="comment">        1.注册过滤器：</span></span><br><span class="line"><span class="comment">            全局注册：Vue.filter(name,callback) </span></span><br><span class="line"><span class="comment">局部注册：new Vue&#123;filters:&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">        2.使用过滤器：&#123;&#123; xxx | 过滤器名&#125;&#125;  或  v-bind:属性 = &quot;xxx | 过滤器名称&quot;</span></span><br><span class="line"><span class="comment">        注意：</span></span><br><span class="line"><span class="comment">              1.过滤器也可以接收额外参数、多个过滤器也可以串联</span></span><br><span class="line"><span class="comment">              2.并没有改变原本的数据, 是产生新的对应的数据</span></span><br><span class="line"><span class="comment">过滤器分为全局过滤器和局部过滤器</span></span><br><span class="line"><span class="comment">局部和全局过滤器重名时，启用局部过滤器</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; str1 | mySlice &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; str2 | myToUpper &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3、定义一个字符串，如果字符串长度大于10 ，页面上就显示  &quot;helloworld......&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 否则就显示原字符串（使用过滤器完成）  </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 4、 将一个字符串&quot;how are you&quot; 首字母大写后输出显示  &quot;How Are You&quot;（使用过滤器完成）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                str1 : <span class="string">&quot;helloworldhelloworldhello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                str2 : <span class="string">&quot;how are you&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            filters : &#123;</span></span><br><span class="line"><span class="language-javascript">                mySlice : <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>( data.<span class="property">length</span> &gt; <span class="number">10</span> )&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> data.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">10</span>) + <span class="string">&quot;......&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> data;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                myToUpper : <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> arr = data.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> newArr = [];</span></span><br><span class="line"><span class="language-javascript">                    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        newArr.<span class="title function_">push</span>( item[<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + item.<span class="title function_">substr</span>(<span class="number">1</span>) ) </span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> newArr.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)  </span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue-watch监听属性"><a href="#vue-watch监听属性" class="headerlink" title="vue-watch监听属性"></a>vue-watch监听属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">监视属性watch：</span></span><br><span class="line"><span class="comment">            1.当被监视的属性变化时, handler()回调函数自动调用, 进行相关操作</span></span><br><span class="line"><span class="comment">            2.监视的属性必须存在，才能进行监视</span></span><br><span class="line"><span class="comment">            3.监视的两种写法：</span></span><br><span class="line"><span class="comment">            (1).new Vue时传入watch配置</span></span><br><span class="line"><span class="comment">                (2).通过vm.$watch监视</span></span><br><span class="line"><span class="comment">            4、计算属性和data中普通属性都可以被监视</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">监视属性的其他配置</span></span><br><span class="line"><span class="comment">immediate 当值为true， 表示handler立即执行一次  此时监视属性还没有改变</span></span><br><span class="line"><span class="comment">深度监视： deep:true 用于监听某个对象的多个属性值的改变</span></span><br><span class="line"><span class="comment">                    (1).Vue中的watch默认不监测对象内部值的改变（默认监听一层属性）。</span></span><br><span class="line"><span class="comment">                    (2).配置deep:true可以监测对象内部值改变（多层）。</span></span><br><span class="line"><span class="comment">            注意：</span></span><br><span class="line"><span class="comment">                    (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</span></span><br><span class="line"><span class="comment">                    (2).使用watch时根据数据的具体结构，决定是否采用深度监视。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">watch属性只有一个handler方法时可以简写，配置deep或immediate属性后，就不可以简写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &#123;&#123; isDay ? &quot;平安夜&quot; : &quot;圣诞节&quot; &#125;&#125;&lt;br&gt; --&gt;</span></span><br><span class="line">        &#123;&#123;day&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleChange&quot;</span>&gt;</span>切换节日<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handlerChangeNum&quot;</span>&gt;</span>改变num的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123;num&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//点击按钮，判断isDay的值的变化，如果为真，输出今天是“平安夜” 否则输出“圣诞节”</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                isDay : <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                num : <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            methods : &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleChange</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isDay</span> = !<span class="variable language_">this</span>.<span class="property">isDay</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handlerChangeNum</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">num</span>++</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            computed : &#123; <span class="comment">//计算属性</span></span></span><br><span class="line"><span class="language-javascript">                day : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isDay</span> ? <span class="string">&quot;平安夜&quot;</span>:<span class="string">&quot;圣诞节&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            watch : &#123; <span class="comment">//监听属性</span></span></span><br><span class="line"><span class="language-javascript">                isDay : &#123; <span class="comment">//isDay就是要监听的属性</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">immediate</span>:<span class="literal">true</span>,<span class="comment">//改配置项结果为true，表示handler方法立即执行一次</span></span></span><br><span class="line"><span class="language-javascript">                    deep : <span class="literal">true</span>,<span class="comment">//deep属性值为true，表示深度监听</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;<span class="comment">//当监听的属性值发生改变了 就执行改方法</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当监听的属性值发生改变了，我就被输出&quot;</span>,newValue,oldValue);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                day : &#123;<span class="comment">//计算属性也可以被监听</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听计算属性----&quot;</span>,newValue,oldValue);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//$watch()方法也可以实现监听</span></span></span><br><span class="line"><span class="language-javascript">        vm.$watch(<span class="string">&quot;num&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`使用$watch实现对属性的监听操作,值由<span class="subst">$&#123;oldValue&#125;</span>变成了<span class="subst">$&#123;newValue&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue事件对象及事件修饰符</title>
      <link href="/2018/06/22/study/vue/4-vue%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E5%8F%8A%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2018/06/22/study/vue/4-vue%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E5%8F%8A%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="vue事件处理器"><a href="#vue事件处理器" class="headerlink" title="vue事件处理器"></a>vue事件处理器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">事件对象 event</span><br><span class="line">当调用事件处理程序时，如果不传递参数，方法的默认参数就是事件对象</span><br><span class="line">@click=&quot;handle&quot;</span><br><span class="line">handle(event)&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">获取事件源 : event.target</span><br><span class="line">获取坐标属性：</span><br><span class="line">     event.pageX横坐标  </span><br><span class="line">     event.pageY 纵坐标</span><br><span class="line"></span><br><span class="line">当调用事件处理程序时，传递了自定义参数，vue中也提供了一个事件对象 $event ,可以将这个对象通过参数传递到事件处理程序中，参数位置自定义</span><br><span class="line">@click=&quot;handle(mynum,$event)&quot;</span><br><span class="line">handle(num,evt)&#123;</span><br><span class="line">     这里的evt就表示事件对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue事件修饰符"><a href="#vue事件修饰符" class="headerlink" title="vue事件修饰符"></a>vue事件修饰符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">事件冒泡现象 ： </span><br><span class="line">     当操作某个元素的某个事件时（click），会自动的向父级查找（子级---&gt;父级），如果父级元素具有同样的事件，就会被触发</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">js</span> 通过由点 . 表示的指令后缀来调用修饰符。</span><br><span class="line">.<span class="property">stop</span> - 阻止冒泡</span><br><span class="line">.<span class="property">prevent</span> - 阻止默认事件</span><br><span class="line">浏览器的默认行为 ： </span><br><span class="line">     超链接自动跳转</span><br><span class="line">     form标签中的submit按钮自动刷新页面</span><br><span class="line">     右键单击鼠标 会弹出一个菜单</span><br><span class="line"></span><br><span class="line">.<span class="property">self</span> - 只监听触发该元素的事件</span><br><span class="line">.<span class="property">once</span> - 只触发一次</span><br><span class="line">.<span class="property">left</span> - 左键事件</span><br><span class="line">.<span class="property">right</span> - 右键事件</span><br><span class="line">.<span class="property">middle</span> - 中间滚轮事件</span><br></pre></td></tr></table></figure><h2 id="vue按键修饰符"><a href="#vue按键修饰符" class="headerlink" title="vue按键修饰符"></a>vue按键修饰符</h2><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：常见的修饰符  .enter.ctrl  .A(65)  事件上也可以使用多个修饰符  @keyup.ctrl.enter</p><h2 id="双向数据绑定-v-model-（表单绑定）"><a href="#双向数据绑定-v-model-（表单绑定）" class="headerlink" title="双向数据绑定 v-model （表单绑定）"></a>双向数据绑定 v-model （表单绑定）</h2><p>表单绑定 v-model 双向数据绑定  你可以用 v-model 指令在表单控件元素上创建双向数据绑定  v-model 会根据控件类型自动选取正确的方法来更新元素。</p><h2 id="什么是数据双向绑定"><a href="#什么是数据双向绑定" class="headerlink" title="什么是数据双向绑定"></a>什么是数据双向绑定</h2><p>vue是一个mvvm框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是vue的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于UI控件来说的，非UI控件不会涉及到数据双向绑定。</p><h2 id="双向绑定实现思路"><a href="#双向绑定实现思路" class="headerlink" title="双向绑定实现思路"></a>双向绑定实现思路</h2><p>即和vue一样的方式来实现数据的双向绑定。那么，我们可以把整个实现过程分为下面几步：- 输入框以及文本节点与 data 中的数据绑定<br>- 输入框内容变化时，data 中的数据同步变化。即 view =&gt; model 的变化。<br>- data 中的数据变化时，文本节点的内容同步变化。即 model =&gt; view 的变化vue使用v-model实现这些标签数据的双向绑定，它会根据控件类型自动选取正确的方法来更新元素。</p><h2 id="表单的修饰符"><a href="#表单的修饰符" class="headerlink" title="表单的修饰符"></a>表单的修饰符</h2><p>.lazy 这个修饰符表示该文本框失去焦点后同步数据</p><p>.number这个修饰符表示文本框中输入的数字可以同步显示，字母不显示；但是一开始就输入字母修饰符无效，所以这个修饰符作用不大</p><p>.trim 这个修饰符表示去掉字符串的首尾空白字符</p>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue指令</title>
      <link href="/2018/06/21/study/vue/3-vue%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/06/21/study/vue/3-vue%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="vue中的指令"><a href="#vue中的指令" class="headerlink" title="vue中的指令"></a>vue中的指令</h1><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>为标签动态的绑定一个属性，值来自于Model中的data数据 ,简写成 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;url&quot;</span> <span class="attr">v-bind:alt</span>=<span class="string">&quot;alt&quot;</span> <span class="attr">width</span>=<span class="string">200</span>  <span class="attr">v-bind:myindex</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind : 为标签动态的绑定一个属性，值来自于Model中的data数据 ,简写成 :  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>v-bind指令可以简化成一个 : 形式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                url : <span class="string">&quot;https://img2.baidu.com/it/u=1814268193,3619863984&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=632&amp;h=500&quot;</span> ,</span></span><br><span class="line"><span class="language-javascript">                alt : <span class="string">&quot;三亚好风景&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                index : <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                title : <span class="string">&quot;p的标题内容&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代码运行结果</p><p><img src="/../../image/template-%E5%89%AF%E6%9C%AC/1675995400193.png" alt="1675995400193"></p><h3 id="v-html和v-text"><a href="#v-html和v-text" class="headerlink" title="v-html和v-text"></a>v-html和v-text</h3><p>**v-html:**将内容解析成为html格式数据，会覆盖标签原有内容；</p><p>**v-text:**将标签内容解析成纯文本格式数据,标签原有的内容就会被覆盖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>普通变量形式：&#123;&#123; htmlStr &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlStr&quot;</span>&gt;</span>使用v-html指令绑定标签内容，将标签内容解析成html格式数据,标签原有的内容就会被覆盖<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;textStr&quot;</span>&gt;</span>使用v-text指令绑定标签内容，将标签内容解析成纯文本格式数据,标签原有的内容就会被覆盖<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                htmlStr : <span class="string">&quot;&lt;i&gt;斜体&lt;/i&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                textStr : <span class="string">&quot;&lt;b&gt;加粗&lt;/b&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以上代码结果如下</span><br><span class="line"></span><br><span class="line">普通变量形式：<span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">斜体</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>v-on 动态为元素绑定事件指令 v-on:事件  简写 : @</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-on 动态为元素绑定事件指令 v-on:事件  简写 : @ --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件处理程序调用时，可以不加括号，缺陷 : 无法传递用户自定义参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;handleClick1&quot;</span>&gt;</span>按钮一<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件处理程序调用时，后面加括号可以传递用户自定义参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;handleClick2(12)&quot;</span>&gt;</span>按钮二<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-on: 可以简写成@  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick3&quot;</span>&gt;</span>按钮三<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            methods : &#123; <span class="comment">//方法或事件处理程序的绑定</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleClick1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;按钮一被点击&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleClick2</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;按纽二被点击&quot;</span>+msg)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleClick3</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;haha&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-if、v-else、v-else-if"><a href="#v-if、v-else、v-else-if" class="headerlink" title="v-if、v-else、v-else -if"></a>v-if、v-else、v-else -if</h3><p>v-if 单分支 ： if后面条件为真就显示 否则就不显示，v-if根据条件对标签进行删除或创建的操作</p><p>v-else、v-else-if：搭配v-if使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-if 单分支 ： if后面条件为真就显示 否则就不显示，v-if根据条件对标签进行删除或创建的操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;score&gt;=90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>加油<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 多分支v-if --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;C&#x27;&quot;</span>&gt;</span>C显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>D显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                score : <span class="number">98</span>,</span></span><br><span class="line"><span class="language-javascript">                type : <span class="string">&quot;B&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>v-show指令-控制元素的显示和隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-show指令-控制元素的显示和隐藏<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>控制p标签的显示和隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>v-show指令控制元素的显示和隐藏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                isShow : <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            methods : &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">v-show与v-if的区别</span><br><span class="line">- 控制手段不同</span><br><span class="line">- 编译过程不同</span><br><span class="line">- 编译条件不同</span><br><span class="line"></span><br><span class="line">控制手段：`v-show`隐藏则是为该元素添加`css--display:none`，`dom`元素依旧还在。`v-if`显示隐藏是将`dom`元素整个添加或删除</span><br><span class="line"></span><br><span class="line">编译过程：`v-if`切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；`v-show`只是简单的基于css切换</span><br><span class="line"></span><br><span class="line">编译条件：`v-if`是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染</span><br><span class="line"></span><br><span class="line">- `v-show` 由`false`变为`true`的时候不会触发组件的生命周期</span><br><span class="line">- `v-if`由`false`变为`true`的时候，触发组件的`beforeCreate`、`create`、`beforeMount`、`mounted`钩子，由`true`变为`false`的时候触发组件的`beforeDestory`、`destoryed`方法</span><br><span class="line"></span><br><span class="line">性能消耗：`v-if`有更高的切换消耗；`v-show`有更高的初始渲染消耗；</span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-for 列表的循环 ：循环数组  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in arr&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;item&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- v-for循环数组，获取下标  为列表添加key值，目的是为了区分一组数据的唯一标识，防止标签的复用问题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) of arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;index&#125;&#125; --- &#123;&#123;item&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-for遍历对象  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in obj&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;key&#125;&#125; --- &#123;&#123; value &#125;&#125; -- &#123;&#123; index &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-for 遍历数值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;num in 10&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;num&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">arr</span>: [<span class="string">&quot;老虎&quot;</span>, <span class="string">&quot;大象&quot;</span>, <span class="string">&quot;大灰狼&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">stuInfo</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">name</span>: <span class="string">&quot;lily&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">name</span>: <span class="string">&quot;jason&quot;</span>, <span class="attr">age</span>: <span class="number">8</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">obj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;xiaoming&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">17</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">school</span>: <span class="string">&quot;清大&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 结果如下所示：</span></span><br><span class="line"><span class="comment">列表的循环 ：循环数组</span></span><br><span class="line"><span class="comment">老虎</span></span><br><span class="line"><span class="comment">大象</span></span><br><span class="line"><span class="comment">大灰狼</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">v-for循环数组，获取下标</span></span><br><span class="line"><span class="comment">0 --- 老虎</span></span><br><span class="line"><span class="comment">1 --- 大象</span></span><br><span class="line"><span class="comment">2 --- 大灰狼</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> v-for遍历对象</span></span><br><span class="line"><span class="comment">name --- xiaoming -- 0</span></span><br><span class="line"><span class="comment">age --- 17 -- 1</span></span><br><span class="line"><span class="comment">school --- 清大 -- 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">v-for 遍历数值</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        用户名 ： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        手机号 ： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>获取表单数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                username : <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                tel : <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            methods : &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">username</span> , <span class="variable language_">this</span>.<span class="property">tel</span> );</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vue的数据绑定"><a href="#vue的数据绑定" class="headerlink" title="vue的数据绑定"></a>vue的数据绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue中有2种数据绑定的方式：</span><br><span class="line">            1.单向绑定(v-bind)：数据只能从data流向页面。</span><br><span class="line">            2.双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。</span><br><span class="line">            </span><br><span class="line">                    1.双向绑定一般都应用在表单类元素上（如：input、select等）</span><br><span class="line">                    2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</span><br><span class="line">                      v-model只能应用在表单类元素上</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue插值表达式</title>
      <link href="/2018/06/19/study/vue/2-vue%E6%8F%92%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/06/19/study/vue/2-vue%E6%8F%92%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="VUE插值表达式"><a href="#VUE插值表达式" class="headerlink" title="VUE插值表达式"></a>VUE插值表达式</h2><p>vue中使用插值表达式来进行数据变量的展示，vue会自动解析，加载data中对应变量的值，在插值表达式中可以输入vue变量还有一些js表达式等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>插值表达式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> 插值表达式中只需要直接写入data中的数据即可 :  &#123;&#123; name &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; score &gt; 90 ? &quot;优秀&quot; : &quot;加油&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; score+10 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str.toUpperCase() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>展示学生信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名:&#123;&#123; stuObj.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄:&#123;&#123; stuObj.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>家庭住址:&#123;&#123; stuObj.addr &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>就读院校:&#123;&#123; stuObj.school &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                name : <span class="string">&quot;jack&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                score : <span class="number">89</span>,</span></span><br><span class="line"><span class="language-javascript">                str : <span class="string">&quot;hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">stuObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    name : <span class="string">&quot;lily&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">school</span>:<span class="string">&quot;北大&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    address : <span class="string">&quot;北京&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                arr : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">以上代码运行结果如下：</span><br><span class="line"></span><br><span class="line">插值表达式中只需要直接写入data中的数据即可 : jack</span><br><span class="line">加油</span><br><span class="line">99</span><br><span class="line">HELLO</span><br><span class="line">展示学生信息</span><br><span class="line">姓名:lily</span><br><span class="line">年龄:18</span><br><span class="line">家庭住址:北京</span><br><span class="line">就读院校:北大</span><br></pre></td></tr></table></figure><p>以上就是一些关于插值表达式的运用</p><h3 id="el和data的两种写法"><a href="#el和data的两种写法" class="headerlink" title="el和data的两种写法"></a>el和data的两种写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">el两种写法</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">     el : &quot;#app&quot;</span><br><span class="line">&#125;)</span><br><span class="line">vm.$mount(&quot;#app&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data两种写法</span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">     data : &#123;  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let vm = new Vue(&#123;</span><br><span class="line">     data()&#123;</span><br><span class="line">          return&#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue简介</title>
      <link href="/2018/06/18/study/vue/1-vue%E5%BC%80%E5%A7%8B/"/>
      <url>/2018/06/18/study/vue/1-vue%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="vue初识"><a href="#vue初识" class="headerlink" title="vue初识"></a>vue初识</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.js是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。</span><br><span class="line">Vue作者尤雨溪是在为AngularJS工作之后开发出了这一框架。他声称自己的思路是提取Angular中为自己所喜欢的部分，构建出一款相当轻量的框架最早发布于2014年2月</span><br></pre></td></tr></table></figure><h2 id="Vue核心特性"><a href="#Vue核心特性" class="headerlink" title="Vue核心特性"></a>Vue核心特性</h2><h3 id="数据驱动（MVVM"><a href="#数据驱动（MVVM" class="headerlink" title="数据驱动（MVVM)"></a>数据驱动（MVVM)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MVVM`表示的是 `Model-View-ViewModel</span><br></pre></td></tr></table></figure><ul><li>Model：模型层，负责处理业务逻辑以及和服务器端进行交互</li><li>View：视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面</li><li>ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁</li></ul><p>关系图，如下</p><p> <img src="https://static.vue-js.com/4402c560-3ac6-11eb-85f6-6fac77c0c9b3.png" alt="image.png"></p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>1.什么是组件化一句话来说就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在 <code>Vue</code>中每一个 <code>.vue</code>文件都可以视为一个组件2.组件化的优势</p><ul><li>降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现</li><li>调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单</li><li>提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级</li></ul><h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><p>解释：指令 (Directives) 是带有 v- 前缀的特殊属性作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p><ul><li>常用的指令<ul><li>条件渲染指令 <code>v-if</code></li><li>列表渲染指令 <code>v-for</code></li><li>属性绑定指令 <code>v-bind</code></li><li>事件绑定指令 <code>v-on</code></li><li>双向数据绑定指令 <code>v-model</code></li></ul></li></ul><h2 id="Vue和React对比"><a href="#Vue和React对比" class="headerlink" title="Vue和React对比"></a>Vue和React对比</h2><p>这里就做几个简单的类比吧，当然没有好坏之分，只是使用场景不同</p><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都有组件化思想</li><li>都支持服务器端渲染</li><li>都有Virtual DOM（虚拟dom）</li><li>数据驱动视图</li><li>都有支持native的方案：<code>Vue</code>的 <code>weex</code>、<code>React</code>的 <code>React native</code></li><li>都有自己的构建工具：<code>Vue</code>的 <code>vue-cli</code>、<code>React</code>的 <code>Create React App</code></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>数据流向的不同。<code>react</code>从诞生开始就推崇单向数据流，而 <code>Vue</code>是双向数据流（Vue 的特性是单向数据流，可以通过.sycn修饰符，做到类似于双向数据流）</li><li>数据变化的实现原理不同。<code>react</code>使用的是不可变数据，而 <code>Vue</code>使用的是可变的数据</li><li>组件化通信的不同。<code>react</code>中我们通过使用回调函数来进行通信的，而 <code>Vue</code>中子组件向父组件传递消息有两种方式：事件和回调函数</li><li>diff算法不同。<code>react</code>主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。<code>Vue</code> 使用双向指针，边对比，边更新DOM</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// let vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     // el : &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     data:&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         msg : &quot;hello&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//el属性的第二种写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vm.$mount(&quot;#app&quot;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//data的第二种写法 ，也是后面脚手架中必须使用发方式 data()函数式写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123; <span class="comment">//data函数中返回一个对象 </span></span></span><br><span class="line"><span class="language-javascript">                    msg : <span class="string">&quot;hello&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="引入vue"><a href="#引入vue" class="headerlink" title="引入vue"></a>引入vue</h2><p>引入vue可以选择线上或者下载到本地</p><p>开发环境版本，包含了有帮助的命令行警告</p><script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script><p>生产环境版本，优化了尺寸和速度</p><script src="https://cdn.jsdelivr.net/npm/vue@2"></script><p>阿里云盘可下载本地vue文件</p><p><a href="https://www.aliyundrive.com/s/iXQzY3xgF3i">https://www.aliyundrive.com/s/iXQzY3xgF3i</a></p><p>提取码: bu29</p>]]></content>
      
      
      <categories>
          
          <category> vue分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
